{
	"api": {
		"ar": {
			"animation": {
				"PropertyMixer": {
					"url": "api/ar/animation/PropertyMixer",
					"methods": [
						"accumulate",
						"apply",
						"saveOriginalState",
						"restoreOriginalState"
					],
					"properties": [
						"binding",
						"buffer",
						"cumulativeWeight",
						"valueSize",
						"referenceCount",
						"useCount"
					]
				},
				"tracks": {
					"VectorKeyframeTrack": {
						"url": "api/ar/animation/tracks/VectorKeyframeTrack",
						"methods": [],
						"properties": [
							"ValueTypeName"
						]
					}
				}
			},
			"audio": {
				"PositionalAudio": {
					"url": "api/ar/audio/PositionalAudio",
					"methods": [
						"getOutput",
						"getRefDistance",
						"setRefDistance",
						"getRolloffFactor",
						"setRolloffFactor",
						"getDistanceModel",
						"setDistanceModel",
						"getMaxDistance",
						"setMaxDistance",
						"setDirectionalCone"
					],
					"properties": [
						"panner"
					]
				}
			},
			"cameras": {
				"CubeCamera": {
					"url": "api/ar/cameras/CubeCamera",
					"methods": [
						"update",
						"clear"
					],
					"properties": [
						"renderTarget"
					]
				}
			}
		},
		"en": {
			"animation": {
				"PropertyMixer": {
					"url": "api/en/animation/PropertyMixer",
					"methods": [
						"accumulate",
						"apply",
						"saveOriginalState",
						"restoreOriginalState"
					],
					"properties": [
						"binding",
						"buffer",
						"cumulativeWeight",
						"valueSize",
						"referenceCount",
						"useCount"
					]
				},
				"tracks": {
					"VectorKeyframeTrack": {
						"url": "api/en/animation/tracks/VectorKeyframeTrack",
						"methods": [],
						"properties": [
							"ValueTypeName"
						]
					}
				}
			},
			"audio": {
				"PositionalAudio": {
					"url": "api/en/audio/PositionalAudio",
					"methods": [
						"getOutput",
						"getRefDistance",
						"setRefDistance",
						"getRolloffFactor",
						"setRolloffFactor",
						"getDistanceModel",
						"setDistanceModel",
						"getMaxDistance",
						"setMaxDistance",
						"setDirectionalCone"
					],
					"properties": [
						"panner"
					]
				}
			},
			"cameras": {
				"StereoCamera": {
					"url": "api/en/cameras/StereoCamera",
					"methods": [
						"update"
					],
					"properties": [
						"aspect",
						"eyeSep",
						"cameraL",
						"cameraR"
					]
				}
			},
			"constants": {
				"Textures": {
					"url": "api/en/constants/Textures",
					"methods": [],
					"properties": []
				}
			},
			"core": {
				"Uniform": {
					"url": "api/en/core/Uniform",
					"methods": [
						"clone"
					],
					"properties": [
						"value"
					]
				},
				"bufferAttributeTypes": {
					"BufferAttributeTypes": {
						"url": "api/en/core/bufferAttributeTypes/BufferAttributeTypes",
						"methods": [],
						"properties": []
					}
				}
			},
			"extras": {
				"core": {
					"ShapePath": {
						"url": "api/en/extras/core/ShapePath",
						"methods": [
							"moveTo",
							"lineTo",
							"quadraticCurveTo",
							"bezierCurveTo",
							"splineThru",
							"toShapes"
						],
						"properties": [
							"subPaths",
							"currentPath",
							"color"
						]
					}
				},
				"curves": {
					"SplineCurve": {
						"url": "api/en/extras/curves/SplineCurve",
						"methods": [],
						"properties": [
							"points"
						]
					}
				},
				"ShapeUtils": {
					"url": "api/en/extras/ShapeUtils",
					"methods": [
						"area",
						"isClockWise",
						"triangulateShape"
					],
					"properties": []
				},
				"objects": {
					"ImmediateRenderObject": {
						"url": "api/en/extras/objects/ImmediateRenderObject",
						"methods": [
							"render"
						],
						"properties": [
							"material",
							"hasPositions",
							"hasNormals",
							"hasColors",
							"hasUvs",
							"positionArray",
							"normalArray",
							"colorArray",
							"uvArray",
							"count"
						]
					}
				}
			},
			"geometries": {
				"WireframeGeometry": {
					"url": "api/en/geometries/WireframeGeometry",
					"methods": [],
					"properties": []
				}
			},
			"helpers": {
				"SpotLightHelper": {
					"url": "api/en/helpers/SpotLightHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"cone",
						"light",
						"matrix",
						"matrixAutoUpdate",
						"color"
					]
				}
			},
			"lights": {
				"SpotLight": {
					"url": "api/en/lights/SpotLight",
					"methods": [
						"dispose",
						"copy"
					],
					"properties": [
						"angle",
						"castShadow",
						"decay",
						"distance",
						"penumbra",
						"position",
						"power",
						"shadow",
						"target"
					]
				},
				"shadows": {
					"SpotLightShadow": {
						"url": "api/en/lights/shadows/SpotLightShadow",
						"methods": [],
						"properties": [
							"camera",
							"focus"
						]
					}
				}
			},
			"loaders": {
				"TextureLoader": {
					"url": "api/en/loaders/TextureLoader",
					"methods": [
						"load"
					],
					"properties": []
				},
				"managers": {
					"LoadingManager": {
						"url": "api/en/loaders/managers/LoadingManager",
						"methods": [
							"addHandler",
							"getHandler",
							"removeHandler",
							"resolveURL",
							"setURLModifier",
							"itemStart",
							"itemEnd",
							"itemError"
						],
						"properties": [
							"onStart",
							"onLoad",
							"onProgress",
							"onError"
						]
					}
				}
			},
			"materials": {
				"SpriteMaterial": {
					"url": "api/en/materials/SpriteMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"color",
						"map",
						"rotation",
						"sizeAttenuation"
					]
				}
			},
			"math": {
				"Vector4": {
					"url": "api/en/math/Vector4",
					"methods": [
						"add",
						"addScalar",
						"addScaledVector",
						"addVectors",
						"applyMatrix4",
						"ceil",
						"clamp",
						"clampLength",
						"clampScalar",
						"clone",
						"copy",
						"divideScalar",
						"dot",
						"equals",
						"floor",
						"fromArray",
						"fromBufferAttribute",
						"getComponent",
						"length",
						"manhattanLength",
						"lengthSq",
						"lerp",
						"lerpVectors",
						"negate",
						"normalize",
						"max",
						"min",
						"multiply",
						"multiplyScalar",
						"round",
						"roundToZero",
						"set",
						"setAxisAngleFromQuaternion",
						"setAxisAngleFromRotationMatrix",
						"setComponent",
						"setLength",
						"setScalar",
						"setX",
						"setY",
						"setZ",
						"setW",
						"sub",
						"subScalar",
						"subVectors",
						"toArray",
						"random"
					],
					"properties": [
						"x",
						"y",
						"z",
						"w",
						"width",
						"height"
					]
				},
				"interpolants": {
					"QuaternionLinearInterpolant": {
						"url": "api/en/math/interpolants/QuaternionLinearInterpolant",
						"methods": [
							"evaluate"
						],
						"properties": [
							"parameterPositions",
							"resultBuffer",
							"sampleValues",
							"settings",
							"valueSize"
						]
					}
				}
			},
			"objects": {
				"Sprite": {
					"url": "api/en/objects/Sprite",
					"methods": [
						"clone",
						"copy",
						"raycast"
					],
					"properties": [
						"material",
						"center"
					]
				}
			},
			"renderers": {
				"shaders": {
					"UniformsUtils": {
						"url": "api/en/renderers/shaders/UniformsUtils",
						"methods": [
							"clone",
							"merge"
						],
						"properties": []
					}
				},
				"webgl": {
					"WebGLState": {
						"url": "api/en/renderers/webgl/WebGLState",
						"methods": [
							"enable",
							"disable",
							"setDepthTest",
							"setDepthWrite",
							"setBlending"
						],
						"properties": []
					}
				},
				"WebGLRenderTarget": {
					"url": "api/en/renderers/WebGLRenderTarget",
					"methods": [
						"setSize",
						"clone",
						"copy",
						"dispose"
					],
					"properties": [
						"width",
						"height",
						"scissor",
						"scissorTest",
						"viewport",
						"texture",
						"depthBuffer",
						"stencilBuffer",
						"depthTexture"
					]
				},
				"webxr": {
					"WebXRManager": {
						"url": "api/en/renderers/webxr/WebXRManager",
						"methods": [
							"getController",
							"getControllerGrip",
							"setFramebufferScaleFactor",
							"setReferenceSpaceType"
						],
						"properties": [
							"enabled",
							"isPresenting"
						]
					}
				}
			},
			"scenes": {
				"Scene": {
					"url": "api/en/scenes/Scene",
					"methods": [
						"toJSON"
					],
					"properties": [
						"autoUpdate",
						"background",
						"environment",
						"fog",
						"overrideMaterial"
					]
				}
			},
			"textures": {
				"VideoTexture": {
					"url": "api/en/textures/VideoTexture",
					"methods": [
						"update"
					],
					"properties": [
						"needsUpdate",
						"needsUpdate"
					]
				}
			}
		},
		"ko": {
			"animation": {
				"PropertyMixer": {
					"url": "api/ko/animation/PropertyMixer",
					"methods": [
						"accumulate",
						"apply",
						"saveOriginalState",
						"restoreOriginalState"
					],
					"properties": [
						"binding",
						"buffer",
						"cumulativeWeight",
						"valueSize",
						"referenceCount",
						"useCount"
					]
				},
				"tracks": {
					"VectorKeyframeTrack": {
						"url": "api/ko/animation/tracks/VectorKeyframeTrack",
						"methods": [],
						"properties": [
							"ValueTypeName"
						]
					}
				}
			},
			"audio": {
				"PositionalAudio": {
					"url": "api/ko/audio/PositionalAudio",
					"methods": [
						"getOutput",
						"getRefDistance",
						"setRefDistance",
						"getRolloffFactor",
						"setRolloffFactor",
						"getDistanceModel",
						"setDistanceModel",
						"getMaxDistance",
						"setMaxDistance",
						"setDirectionalCone"
					],
					"properties": [
						"panner"
					]
				}
			},
			"cameras": {
				"StereoCamera": {
					"url": "api/ko/cameras/StereoCamera",
					"methods": [
						"update"
					],
					"properties": [
						"aspect",
						"eyeSep",
						"cameraL",
						"cameraR"
					]
				}
			},
			"constants": {
				"Textures": {
					"url": "api/ko/constants/Textures",
					"methods": [],
					"properties": []
				}
			},
			"core": {
				"Uniform": {
					"url": "api/ko/core/Uniform",
					"methods": [
						"clone"
					],
					"properties": [
						"value"
					]
				},
				"bufferAttributeTypes": {
					"BufferAttributeTypes": {
						"url": "api/ko/core/bufferAttributeTypes/BufferAttributeTypes",
						"methods": [],
						"properties": []
					}
				}
			},
			"extras": {
				"core": {
					"ShapePath": {
						"url": "api/ko/extras/core/ShapePath",
						"methods": [
							"moveTo",
							"lineTo",
							"quadraticCurveTo",
							"bezierCurveTo",
							"splineThru",
							"toShapes"
						],
						"properties": [
							"subPaths",
							"currentPath",
							"color"
						]
					}
				},
				"curves": {
					"SplineCurve": {
						"url": "api/ko/extras/curves/SplineCurve",
						"methods": [],
						"properties": [
							"points"
						]
					}
				},
				"ShapeUtils": {
					"url": "api/ko/extras/ShapeUtils",
					"methods": [
						"area",
						"isClockWise",
						"triangulateShape"
					],
					"properties": []
				},
				"objects": {
					"ImmediateRenderObject": {
						"url": "api/ko/extras/objects/ImmediateRenderObject",
						"methods": [
							"render"
						],
						"properties": [
							"material",
							"hasPositions",
							"hasNormals",
							"hasColors",
							"hasUvs",
							"positionArray",
							"normalArray",
							"colorArray",
							"uvArray",
							"count"
						]
					}
				}
			}
		},
		"zh": {
			"animation": {
				"PropertyMixer": {
					"url": "api/zh/animation/PropertyMixer",
					"methods": [
						"accumulate",
						"apply",
						"saveOriginalState",
						"restoreOriginalState"
					],
					"properties": [
						"binding",
						"buffer",
						"cumulativeWeight",
						"valueSize",
						"referenceCount",
						"useCount"
					]
				},
				"tracks": {
					"VectorKeyframeTrack": {
						"url": "api/zh/animation/tracks/VectorKeyframeTrack",
						"methods": [],
						"properties": [
							"ValueTypeName"
						]
					}
				}
			},
			"audio": {
				"PositionalAudio": {
					"url": "api/zh/audio/PositionalAudio",
					"methods": [
						"getOutput",
						"getRefDistance",
						"setRefDistance",
						"getRolloffFactor",
						"setRolloffFactor",
						"getDistanceModel",
						"setDistanceModel",
						"getMaxDistance",
						"setMaxDistance",
						"setDirectionalCone"
					],
					"properties": [
						"panner"
					]
				}
			},
			"cameras": {
				"StereoCamera": {
					"url": "api/zh/cameras/StereoCamera",
					"methods": [
						"update"
					],
					"properties": [
						"aspect",
						"eyeSep",
						"cameraL",
						"cameraR"
					]
				}
			},
			"constants": {
				"Textures": {
					"url": "api/zh/constants/Textures",
					"methods": [],
					"properties": []
				}
			},
			"core": {
				"Uniform": {
					"url": "api/zh/core/Uniform",
					"methods": [
						"clone"
					],
					"properties": [
						"value"
					]
				},
				"bufferAttributeTypes": {
					"BufferAttributeTypes": {
						"url": "api/zh/core/bufferAttributeTypes/BufferAttributeTypes",
						"methods": [],
						"properties": []
					}
				}
			},
			"extras": {
				"core": {
					"ShapePath": {
						"url": "api/zh/extras/core/ShapePath",
						"methods": [
							"moveTo",
							"lineTo",
							"quadraticCurveTo",
							"bezierCurveTo",
							"splineThru",
							"toShapes"
						],
						"properties": [
							"subPaths",
							"currentPath"
						]
					}
				},
				"curves": {
					"SplineCurve": {
						"url": "api/zh/extras/curves/SplineCurve",
						"methods": [],
						"properties": [
							"points"
						]
					}
				},
				"ShapeUtils": {
					"url": "api/zh/extras/ShapeUtils",
					"methods": [
						"area",
						"isClockWise",
						"triangulateShape"
					],
					"properties": []
				},
				"objects": {
					"ImmediateRenderObject": {
						"url": "api/zh/extras/objects/ImmediateRenderObject",
						"methods": [
							"render"
						],
						"properties": [
							"material",
							"hasPositions",
							"hasNormals",
							"hasColors",
							"hasUvs",
							"positionArray",
							"normalArray",
							"colorArray",
							"uvArray",
							"count"
						]
					}
				}
			},
			"geometries": {
				"WireframeGeometry": {
					"url": "api/zh/geometries/WireframeGeometry",
					"methods": [],
					"properties": []
				}
			},
			"helpers": {
				"SpotLightHelper": {
					"url": "api/zh/helpers/SpotLightHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"cone",
						"light",
						"matrix",
						"matrixAutoUpdate",
						"color"
					]
				}
			},
			"lights": {
				"SpotLight": {
					"url": "api/zh/lights/SpotLight",
					"methods": [
						"copy"
					],
					"properties": [
						"angle",
						"castShadow",
						"decay",
						"distance",
						"penumbra",
						"position",
						"power",
						"shadow",
						"target"
					]
				},
				"shadows": {
					"SpotLightShadow": {
						"url": "api/zh/lights/shadows/SpotLightShadow",
						"methods": [],
						"properties": [
							"camera",
							"focus"
						]
					}
				}
			},
			"loaders": {
				"TextureLoader": {
					"url": "api/zh/loaders/TextureLoader",
					"methods": [
						"load"
					],
					"properties": []
				},
				"managers": {
					"LoadingManager": {
						"url": "api/zh/loaders/managers/LoadingManager",
						"methods": [
							"addHandler",
							"getHandler",
							"removeHandler",
							"resolveURL",
							"setURLModifier",
							"itemStart",
							"itemEnd",
							"itemError"
						],
						"properties": [
							"onStart",
							"onLoad",
							"onProgress",
							"onError"
						]
					}
				}
			},
			"materials": {
				"SpriteMaterial": {
					"url": "api/zh/materials/SpriteMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"color",
						"map",
						"rotation",
						"sizeAttenuation"
					]
				}
			},
			"math": {
				"Vector4": {
					"url": "api/zh/math/Vector4",
					"methods": [
						"add",
						"addScalar",
						"addScaledVector",
						"addVectors",
						"applyMatrix4",
						"ceil",
						"clamp",
						"clampLength",
						"clampScalar",
						"clone",
						"copy",
						"divideScalar",
						"dot",
						"equals",
						"floor",
						"fromArray",
						"fromBufferAttribute",
						"getComponent",
						"length",
						"manhattanLength",
						"lengthSq",
						"lerp",
						"lerpVectors",
						"negate",
						"normalize",
						"max",
						"min",
						"multiply",
						"multiplyScalar",
						"round",
						"roundToZero",
						"set",
						"setAxisAngleFromQuaternion",
						"setAxisAngleFromRotationMatrix",
						"setComponent",
						"setLength",
						"setScalar",
						"setX",
						"setY",
						"setZ",
						"setW",
						"sub",
						"subScalar",
						"subVectors",
						"toArray",
						"random"
					],
					"properties": [
						"x",
						"y",
						"z",
						"w",
						"width",
						"height"
					]
				},
				"interpolants": {
					"QuaternionLinearInterpolant": {
						"url": "api/zh/math/interpolants/QuaternionLinearInterpolant",
						"methods": [
							"evaluate"
						],
						"properties": [
							"parameterPositions",
							"resultBuffer",
							"sampleValues",
							"settings",
							"valueSize"
						]
					}
				}
			},
			"objects": {
				"Sprite": {
					"url": "api/zh/objects/Sprite",
					"methods": [
						"clone",
						"copy",
						"raycast"
					],
					"properties": [
						"material",
						"center"
					]
				}
			},
			"renderers": {
				"shaders": {
					"UniformsUtils": {
						"url": "api/zh/renderers/shaders/UniformsUtils",
						"methods": [
							"clone",
							"merge"
						],
						"properties": []
					}
				},
				"webgl": {
					"WebGLState": {
						"url": "api/zh/renderers/webgl/WebGLState",
						"methods": [
							"enable",
							"disable",
							"setDepthTest",
							"setDepthWrite",
							"setBlending"
						],
						"properties": []
					}
				},
				"WebGLRenderTarget": {
					"url": "api/zh/renderers/WebGLRenderTarget",
					"methods": [
						"setSize",
						"clone",
						"copy",
						"dispose"
					],
					"properties": [
						"width",
						"height",
						"scissor",
						"scissorTest",
						"viewport",
						"texture",
						"depthBuffer",
						"stencilBuffer",
						"depthTexture"
					]
				},
				"webxr": {
					"WebXRManager": {
						"url": "api/zh/renderers/webxr/WebXRManager",
						"methods": [
							"getController",
							"getControllerGrip",
							"setFramebufferScaleFactor",
							"setReferenceSpaceType"
						],
						"properties": [
							"enabled",
							"isPresenting"
						]
					}
				}
			},
			"scenes": {
				"Scene": {
					"url": "api/zh/scenes/Scene",
					"methods": [
						"toJSON"
					],
					"properties": [
						"autoUpdate",
						"background",
						"environment",
						"fog",
						"overrideMaterial"
					]
				}
			},
			"textures": {
				"VideoTexture": {
					"url": "api/zh/textures/VideoTexture",
					"methods": [
						"update"
					],
					"properties": [
						"needsUpdate",
						"needsUpdate"
					]
				}
			}
		}
	},
	"examples": {
		"en": {
			"animations": {
				"MMDPhysics": {
					"url": "examples/en/animations/MMDPhysics",
					"methods": [
						"createHelper",
						"reset",
						"setGravity",
						"update",
						"warmup"
					],
					"properties": [
						"mesh"
					]
				}
			},
			"controls": {
				"TransformControls": {
					"url": "examples/en/controls/TransformControls",
					"methods": [
						"attach",
						"detach",
						"dispose",
						"getMode",
						"setMode",
						"setRotationSnap",
						"setSize",
						"setSpace",
						"setTranslationSnap"
					],
					"properties": [
						"axis",
						"camera",
						"domElement",
						"dragging",
						"enabled",
						"mode",
						"object",
						"rotationSnap",
						"showX",
						"showY",
						"showZ",
						"size",
						"space",
						"translationSnap"
					]
				}
			},
			"exporters": {
				"PLYExporter": {
					"url": "examples/en/exporters/PLYExporter",
					"methods": [
						"parse"
					],
					"properties": []
				}
			},
			"geometries": {
				"DecalGeometry": {
					"url": "examples/en/geometries/DecalGeometry",
					"methods": [],
					"properties": []
				}
			},
			"helpers": {
				"VertexTangentsHelper": {
					"url": "examples/en/helpers/VertexTangentsHelper",
					"methods": [
						"update"
					],
					"properties": [
						"matrixAutoUpdate",
						"object",
						"size"
					]
				}
			},
			"lights": {
				"LightProbeGenerator": {
					"url": "examples/en/lights/LightProbeGenerator",
					"methods": [
						"fromCubeTexture",
						"fromCubeRenderTarget"
					],
					"properties": []
				}
			},
			"loaders": {
				"TGALoader": {
					"url": "examples/en/loaders/TGALoader",
					"methods": [
						"load"
					],
					"properties": []
				}
			},
			"math": {
				"convexhull": {
					"VertexNode": {
						"url": "examples/en/math/convexhull/VertexNode",
						"methods": [],
						"properties": [
							"point",
							"prev",
							"next",
							"face"
						]
					}
				},
				"OBB": {
					"url": "examples/en/math/OBB",
					"methods": [
						"applyMatrix4",
						"clampPoint",
						"clone",
						"containsPoint",
						"copy",
						"equals",
						"fromBox3",
						"getSize",
						"intersectsBox3",
						"intersectsSphere",
						"intersectsOBB",
						"intersectsRay",
						"intersectRay",
						"set"
					],
					"properties": [
						"center",
						"halfSize",
						"rotation"
					]
				}
			},
			"objects": {
				"Lensflare": {
					"url": "examples/en/objects/Lensflare",
					"methods": [],
					"properties": []
				}
			},
			"postprocessing": {
				"EffectComposer": {
					"url": "examples/en/postprocessing/EffectComposer",
					"methods": [
						"addPass",
						"insertPass",
						"isLastEnabledPass",
						"removePass",
						"render",
						"reset",
						"setPixelRatio",
						"setSize",
						"swapBuffers"
					],
					"properties": [
						"passes",
						"readBuffer",
						"renderer",
						"renderToScreen",
						"writeBuffer"
					]
				}
			},
			"renderers": {
				"SVGRenderer": {
					"url": "examples/en/renderers/SVGRenderer",
					"methods": [
						"clear",
						"getSize",
						"render",
						"setClearColor",
						"setPrecision",
						"setQuality",
						"setSize"
					],
					"properties": [
						"overdraw"
					]
				}
			},
			"utils": {
				"SkeletonUtils": {
					"url": "examples/en/utils/SkeletonUtils",
					"methods": [
						"clone",
						"findBoneTrackData",
						"getBoneByName",
						"getBones",
						"getEqualsBonesNames",
						"getHelperFromSkeleton",
						"getNearestBone",
						"getSkeletonOffsets",
						"renameBones",
						"retarget",
						"retargetClip"
					],
					"properties": []
				}
			}
		},
		"ko": {
			"controls": {
				"TransformControls": {
					"url": "examples/ko/controls/TransformControls",
					"methods": [
						"attach",
						"detach",
						"dispose",
						"getMode",
						"setMode",
						"setRotationSnap",
						"setSize",
						"setSpace",
						"setTranslationSnap"
					],
					"properties": [
						"axis",
						"camera",
						"domElement",
						"dragging",
						"enabled",
						"mode",
						"object",
						"rotationSnap",
						"showX",
						"showY",
						"showZ",
						"size",
						"space",
						"translationSnap"
					]
				}
			}
		},
		"zh": {
			"animations": {
				"MMDPhysics": {
					"url": "examples/zh/animations/MMDPhysics",
					"methods": [
						"createHelper",
						"reset",
						"setGravity",
						"update",
						"warmup"
					],
					"properties": [
						"mesh"
					]
				}
			},
			"controls": {
				"TransformControls": {
					"url": "examples/zh/controls/TransformControls",
					"methods": [
						"attach",
						"detach",
						"dispose",
						"getMode",
						"setMode",
						"setRotationSnap",
						"setSize",
						"setSpace",
						"setTranslationSnap"
					],
					"properties": [
						"axis",
						"camera",
						"domElement",
						"dragging",
						"enabled",
						"mode",
						"object",
						"rotationSnap",
						"showX",
						"showY",
						"showZ",
						"size",
						"space",
						"translationSnap"
					]
				}
			},
			"exporters": {
				"PLYExporter": {
					"url": "examples/zh/exporters/PLYExporter",
					"methods": [
						"parse"
					],
					"properties": []
				}
			},
			"geometries": {
				"DecalGeometry": {
					"url": "examples/zh/geometries/DecalGeometry",
					"methods": [],
					"properties": []
				}
			},
			"helpers": {
				"VertexTangentsHelper": {
					"url": "examples/zh/helpers/VertexTangentsHelper",
					"methods": [
						"update"
					],
					"properties": [
						"matrixAutoUpdate",
						"object",
						"size"
					]
				}
			},
			"lights": {
				"LightProbeGenerator": {
					"url": "examples/zh/lights/LightProbeGenerator",
					"methods": [
						"fromCubeTexture",
						"fromCubeRenderTarget"
					],
					"properties": []
				}
			},
			"loaders": {
				"TGALoader": {
					"url": "examples/zh/loaders/TGALoader",
					"methods": [
						"load"
					],
					"properties": []
				}
			},
			"math": {
				"convexhull": {
					"VertexNode": {
						"url": "examples/zh/math/convexhull/VertexNode",
						"methods": [],
						"properties": [
							"point",
							"prev",
							"next",
							"face"
						]
					}
				},
				"OBB": {
					"url": "examples/zh/math/OBB",
					"methods": [
						"applyMatrix4",
						"clampPoint",
						"clone",
						"containsPoint",
						"copy",
						"equals",
						"fromBox3",
						"getSize",
						"intersectsBox3",
						"intersectsSphere",
						"intersectsOBB",
						"intersectsRay",
						"intersectRay",
						"set"
					],
					"properties": [
						"center",
						"halfSize",
						"rotation"
					]
				}
			},
			"objects": {
				"Lensflare": {
					"url": "examples/zh/objects/Lensflare",
					"methods": [],
					"properties": []
				}
			},
			"postprocessing": {
				"EffectComposer": {
					"url": "examples/zh/postprocessing/EffectComposer",
					"methods": [
						"addPass",
						"insertPass",
						"isLastEnabledPass",
						"removePass",
						"render",
						"reset",
						"setPixelRatio",
						"setSize",
						"swapBuffers"
					],
					"properties": [
						"passes",
						"readBuffer",
						"renderer",
						"renderToScreen",
						"writeBuffer"
					]
				}
			},
			"renderers": {
				"SVGRenderer": {
					"url": "examples/zh/renderers/SVGRenderer",
					"methods": [
						"clear",
						"getSize",
						"render",
						"setClearColor",
						"setPrecision",
						"setQuality",
						"setSize"
					],
					"properties": []
				}
			},
			"utils": {
				"SkeletonUtils": {
					"url": "examples/zh/utils/SkeletonUtils",
					"methods": [
						"clone",
						"findBoneTrackData",
						"getBoneByName",
						"getBones",
						"getEqualsBonesNames",
						"getHelperFromSkeleton",
						"getNearestBone",
						"getSkeletonOffsets",
						"renameBones",
						"retarget",
						"retargetClip"
					],
					"properties": []
				}
			}
		}
	},
	"manual": {
		"ar": {
			"buildTools": {
				"Testing-with-NPM": {
					"url": "manual/ar/buildTools/Testing-with-NPM",
					"methods": [],
					"properties": []
				}
			},
			"introduction": {
				"WebGL-compatibility-check": {
					"url": "manual/ar/introduction/WebGL-compatibility-check",
					"methods": [],
					"properties": []
				}
			}
		},
		"en": {
			"buildTools": {
				"Testing-with-NPM": {
					"url": "manual/en/buildTools/Testing-with-NPM",
					"methods": [],
					"properties": []
				}
			},
			"introduction": {
				"WebGL-compatibility-check": {
					"url": "manual/en/introduction/WebGL-compatibility-check",
					"methods": [],
					"properties": []
				}
			}
		},
		"ja": {
			"buildTools": {
				"Testing-with-NPM": {
					"url": "manual/ja/buildTools/Testing-with-NPM",
					"methods": [],
					"properties": []
				}
			},
			"introduction": {
				"WebGL-compatibility-check": {
					"url": "manual/ja/introduction/WebGL-compatibility-check",
					"methods": [],
					"properties": []
				}
			}
		},
		"ko": {
			"buildTools": {
				"Testing-with-NPM": {
					"url": "manual/ko/buildTools/Testing-with-NPM",
					"methods": [],
					"properties": []
				}
			},
			"introduction": {
				"WebGL-compatibility-check": {
					"url": "manual/ko/introduction/WebGL-compatibility-check",
					"methods": [],
					"properties": []
				}
			}
		},
		"zh": {
			"buildTools": {
				"Testing-with-NPM": {
					"url": "manual/zh/buildTools/Testing-with-NPM",
					"methods": [],
					"properties": []
				}
			},
			"introduction": {
				"WebGL-compatibility-check": {
					"url": "manual/zh/introduction/WebGL-compatibility-check",
					"methods": [],
					"properties": []
				}
			}
		}
	}
}
