{
	"en": {
		"Manual": {
			"Getting Started": {
				"Creating a scene": {
					"url": "manual/en/introduction/Creating-a-scene"
				},

				"Installation": {
					"url": "manual/en/introduction/Installation"
				},

				"WebGL compatibility check": {
					"url": "manual/en/introduction/WebGL-compatibility-check"
				},

				"How to run things locally": {
					"url": "manual/en/introduction/How-to-run-things-locally"
				},

				"Drawing lines": {
					"url": "manual/en/introduction/Drawing-lines"
				},

				"Creating text": {
					"url": "manual/en/introduction/Creating-text"
				},

				"Loading 3D models": {
					"url": "manual/en/introduction/Loading-3D-models"
				},

				"Libraries and Plugins": {
					"url": "manual/en/introduction/Libraries-and-Plugins"
				},

				"FAQ": {
					"url": "manual/en/introduction/FAQ"
				},

				"Useful links": {
					"url": "manual/en/introduction/Useful-links"
				}
			},

			"Next Steps": {
				"How to update things": {
					"url": "manual/en/introduction/How-to-update-things"
				},

				"How to dispose of objects": {
					"url": "manual/en/introduction/How-to-dispose-of-objects"
				},

				"How to create VR content": {
					"url": "manual/en/introduction/How-to-create-VR-content"
				},

				"How to use post-processing": {
					"url": "manual/en/introduction/How-to-use-post-processing"
				},

				"Matrix transformations": {
					"url": "manual/en/introduction/Matrix-transformations"
				},

				"Animation system": {
					"url": "manual/en/introduction/Animation-system"
				}
			},

			"Build Tools": {
				"Testing with NPM": {
					"url": "manual/en/buildTools/Testing-with-NPM"
				}
			}
		},

		"Reference": {
			"Animation": {
				"AnimationAction": {
					"url": "api/en/animation/AnimationAction",
					"methods": [
						"crossFadeFrom",
						"crossFadeTo",
						"fadeIn",
						"fadeOut",
						"getEffectiveTimeScale",
						"getEffectiveWeight",
						"getClip",
						"getMixer",
						"getRoot",
						"halt",
						"isRunning",
						"isScheduled",
						"play",
						"reset",
						"setDuration",
						"setEffectiveTimeScale",
						"setEffectiveWeight",
						"setLoop",
						"startAt",
						"stop",
						"stopFading",
						"stopWarping",
						"syncWith",
						"warp"
					],
					"properties": [
						"clampWhenFinished",
						"enabled",
						"loop",
						"paused",
						"repetitions",
						"time",
						"timeScale",
						"weight",
						"zeroSlopeAtEnd",
						"zeroSlopeAtStart"
					]
				},

				"AnimationClip": {
					"url": "api/en/animation/AnimationClip",
					"methods": [
						"clone",
						"optimize",
						"resetDuration",
						"toJSON",
						"trim",
						"validate",
						"CreateClipsFromMorphTargetSequences",
						"CreateFromMorphTargetSequence",
						"findByName",
						"parse",
						"parseAnimation",
						"toJSON"
					],
					"properties": [
						"duration",
						"name",
						"tracks",
						"uuid"
					]
				},

				"AnimationMixer": {
					"url": "api/en/animation/AnimationMixer",
					"methods": [
						"clipAction",
						"existingAction",
						"getRoot",
						"stopAllAction",
						"update",
						"setTime",
						"uncacheClip",
						"uncacheRoot",
						"uncacheAction"
					],
					"properties": [
						"time",
						"timeScale"
					]
				},

				"AnimationObjectGroup": {
					"url": "api/en/animation/AnimationObjectGroup",
					"methods": [
						"add",
						"remove",
						"uncache"
					],
					"properties": [
						"stats",
						"uuid"
					]
				},

				"AnimationUtils": {
					"url": "api/en/animation/AnimationUtils",
					"methods": [
						"arraySlice",
						"convertArray",
						"flattenJSON",
						"getKeyframeOrder",
						"isTypedArray",
						"sortedArray",
						"subclip"
					],
					"properties": []
				},

				"KeyframeTrack": {
					"url": "api/en/animation/KeyframeTrack",
					"methods": [
						"clone",
						"createInterpolant",
						"getInterpolation",
						"getValueSize",
						"InterpolantFactoryMethodDiscrete",
						"InterpolantFactoryMethodLinear",
						"InterpolantFactoryMethodSmooth",
						"optimize",
						"scale",
						"setInterpolation",
						"shift",
						"trim",
						"validate",
						"toJSON"
					],
					"properties": [
						"name",
						"times",
						"values",
						"DefaultInterpolation",
						"TimeBufferType ",
						"ValueBufferType "
					]
				},

				"PropertyBinding": {
					"url": "api/en/animation/PropertyBinding",
					"methods": [
						"getValue",
						"setValue",
						"bind",
						"unbind",
						"Composite",
						"create",
						"parseTrackName",
						"findNode"
					],
					"properties": [
						"path",
						"parsedPath",
						"node",
						"rootNode",
						"BindingType",
						"Versioning",
						"GetterByBindingType",
						"SetterByBindingTypeAndVersioning"
					]
				},

				"PropertyMixer": {
					"url": "api/en/animation/PropertyMixer",
					"methods": [
						"accumulate",
						"apply",
						"saveOriginalState",
						"restoreOriginalState"
					],
					"properties": [
						"binding",
						"buffer",
						"cumulativeWeight",
						"valueSize",
						"referenceCount",
						"useCount"
					]
				}
			},

			"Animation / Tracks": {
				"BooleanKeyframeTrack": {
					"url": "api/en/animation/tracks/BooleanKeyframeTrack",
					"methods": [
						"InterpolantFactoryMethodLinear ",
						"InterpolantFactoryMethodSmooth "
					],
					"properties": [
						"DefaultInterpolation",
						"ValueBufferType",
						"ValueTypeName"
					]
				},

				"ColorKeyframeTrack": {
					"url": "api/en/animation/tracks/ColorKeyframeTrack",
					"methods": [],
					"properties": [
						"ValueTypeName"
					]
				},

				"NumberKeyframeTrack": {
					"url": "api/en/animation/tracks/NumberKeyframeTrack",
					"methods": [],
					"properties": [
						"ValueTypeName"
					]
				},

				"QuaternionKeyframeTrack": {
					"url": "api/en/animation/tracks/QuaternionKeyframeTrack",
					"methods": [
						"InterpolantFactoryMethodLinear"
					],
					"properties": [
						"DefaultInterpolation",
						"ValueTypeName"
					]
				},

				"StringKeyframeTrack": {
					"url": "api/en/animation/tracks/StringKeyframeTrack",
					"methods": [
						"InterpolantFactoryMethodLinear",
						"InterpolantFactoryMethodSmooth"
					],
					"properties": [
						"DefaultInterpolation",
						"ValueBufferType",
						"ValueTypeName"
					]
				},

				"VectorKeyframeTrack": {
					"url": "api/en/animation/tracks/VectorKeyframeTrack",
					"methods": [],
					"properties": [
						"ValueTypeName"
					]
				}
			},

			"Audio": {
				"Audio": {
					"url": "api/en/audio/Audio",
					"methods": [
						"connect",
						"disconnect",
						"getFilter",
						"getFilters",
						"getLoop",
						"getOutput",
						"getPlaybackRate",
						"getVolume",
						"play",
						"pause",
						"onEnded",
						"setBuffer",
						"setFilter",
						"setFilters",
						"setLoop",
						"setLoopStart",
						"setLoopEnd",
						"setMediaElementSource",
						"setMediaStreamSource",
						"setNodeSource",
						"setPlaybackRate",
						"setVolume",
						"stop"
					],
					"properties": [
						"autoplay",
						"context",
						"detune",
						"filters",
						"gain",
						"hasPlaybackControl",
						"isPlaying",
						"listener",
						"playbackRate",
						"offset",
						"duration",
						"source",
						"sourceType",
						"type"
					]
				},

				"AudioAnalyser": {
					"url": "api/en/audio/AudioAnalyser",
					"methods": [
						"getFrequencyData",
						"getAverageFrequency"
					],
					"properties": [
						"analyser",
						"fftSize",
						"data"
					]
				},

				"AudioContext": {
					"url": "api/en/audio/AudioContext",
					"methods": [
						"getContext",
						"setContext"
					],
					"properties": []
				},

				"AudioListener": {
					"url": "api/en/audio/AudioListener",
					"methods": [
						"getInput",
						"removeFilter",
						"getFilter",
						"setFilter",
						"getMasterVolume",
						"setMasterVolume"
					],
					"properties": [
						"context",
						"gain",
						"filter",
						"timeDelta"
					]
				},

				"PositionalAudio": {
					"url": "api/en/audio/PositionalAudio",
					"methods": [
						"getOutput",
						"getRefDistance",
						"setRefDistance",
						"getRolloffFactor",
						"setRolloffFactor",
						"getDistanceModel",
						"setDistanceModel",
						"getMaxDistance",
						"setMaxDistance",
						"setDirectionalCone"
					],
					"properties": [
						"panner"
					]
				}
			},

			"Cameras": {
				"ArrayCamera": {
					"url": "api/en/cameras/ArrayCamera",
					"methods": [],
					"properties": [
						"cameras"
					]
				},

				"Camera": {
					"url": "api/en/cameras/Camera",
					"methods": [
						"clone",
						"copy",
						"getWorldDirection"
					],
					"properties": [
						"layers",
						"matrixWorldInverse",
						"projectionMatrix",
						"projectionMatrixInverse"
					]
				},

				"CubeCamera": {
					"url": "api/en/cameras/CubeCamera",
					"methods": [
						"update"
					],
					"properties": [
						"renderTarget"
					]
				},

				"OrthographicCamera": {
					"url": "api/en/cameras/OrthographicCamera",
					"methods": [
						"setViewOffset",
						"clearViewOffset",
						"updateProjectionMatrix",
						"toJSON"
					],
					"properties": [
						"bottom",
						"far",
						"left",
						"near",
						"right",
						"top",
						"view",
						"zoom"
					]
				},

				"PerspectiveCamera": {
					"url": "api/en/cameras/PerspectiveCamera",
					"methods": [
						"clearViewOffset",
						"getEffectiveFOV",
						"getFilmHeight",
						"getFilmWidth",
						"getFocalLength",
						"setFocalLength",
						"setViewOffset",
						"updateProjectionMatrix",
						"toJSON"
					],
					"properties": [
						"aspect",
						"far",
						"filmGauge",
						"filmOffset",
						"focus",
						"fov",
						"near",
						"view",
						"zoom"
					]
				},

				"StereoCamera": {
					"url": "api/en/cameras/StereoCamera",
					"methods": [
						"update"
					],
					"properties": [
						"aspect",
						"eyeSep",
						"cameraL",
						"cameraR"
					]
				}
			},

			"Constants": {
				"Animation": {
					"url": "api/en/constants/Animation"
				},

				"Core": {
					"url": "api/en/constants/Core"
				},

				"CustomBlendingEquation": {
					"url": "api/en/constants/CustomBlendingEquations"
				},

				"BufferAttributeUsage": {
					"url": "api/en/constants/BufferAttributeUsage"
				},

				"Materials": {
					"url": "api/en/constants/Materials"
				},

				"Renderer": {
					"url": "api/en/constants/Renderer"
				},

				"Textures": {
					"url": "api/en/constants/Textures"
				}
			},

			"Core": {
				"BufferAttribute": {
					"url": "api/en/core/BufferAttribute",
					"methods": [
						"applyMatrix3",
						"applyMatrix4",
						"applyNormalMatrix",
						"transformDirection",
						"clone",
						"copy",
						"copyArray",
						"copyAt",
						"copyColorsArray",
						"copyVector2sArray",
						"copyVector3sArray",
						"copyVector4sArray",
						"getX",
						"getY",
						"getZ",
						"getW",
						"onUpload",
						"set",
						"setUsage",
						"setX",
						"setY",
						"setZ",
						"setW",
						"setXY",
						"setXYZ",
						"setXYZW"
					],
					"properties": [
						"array",
						"count",
						"itemSize",
						"name",
						"needsUpdate",
						"normalized",
						"onUploadCallback",
						"updateRange",
						"usage",
						"version"
					]
				},

				"BufferGeometry": {
					"url": "api/en/core/BufferGeometry",
					"methods": [
						"setAttribute",
						"addGroup",
						"applyMatrix4",
						"applyQuaternion",
						"center",
						"clone",
						"copy",
						"clearGroups",
						"computeBoundingBox",
						"computeBoundingSphere",
						"computeTangents",
						"computeVertexNormals",
						"dispose",
						"getAttribute",
						"getIndex",
						"hasAttribute",
						"lookAt",
						"merge",
						"normalizeNormals",
						"deleteAttribute",
						"rotateX",
						"rotateY",
						"rotateZ",
						"scale",
						"setIndex",
						"setDrawRange",
						"setFromPoints",
						"toJSON",
						"toNonIndexed",
						"translate"
					],
					"properties": [
						"attributes",
						"boundingBox",
						"boundingSphere",
						"drawRange",
						"groups",
						"drawcalls",
						"id",
						"index",
						"morphAttributes",
						"morphTargetsRelative",
						"name",
						"userData",
						"uuid"
					]
				},

				"Clock": {
					"url": "api/en/core/Clock",
					"methods": [
						"start",
						"stop",
						"getElapsedTime",
						"getDelta"
					],
					"properties": [
						"autoStart",
						"startTime",
						"oldTime",
						"elapsedTime",
						"running"
					]
				},

				"EventDispatcher": {
					"url": "api/en/core/EventDispatcher",
					"methods": [
						"addEventListener",
						"hasEventListener",
						"removeEventListener",
						"dispatchEvent"
					],
					"properties": []
				},

				"GLBufferAttribute": {
					"url": "api/en/core/GLBufferAttribute",
					"methods": [
						"setBuffer",
						"setType",
						"setItemSize",
						"setCount"
					],
					"properties": [
						"buffer",
						"count",
						"itemSize",
						"elementSize",
						"type",
						"isGLBufferAttribute",
						"version",
						"needsUpdate"
					]
				},

				"InstancedBufferAttribute": {
					"url": "api/en/core/InstancedBufferAttribute",
					"methods": [],
					"properties": [
						"meshPerAttribute"
					]
				},

				"InstancedBufferGeometry": {
					"url": "api/en/core/InstancedBufferGeometry",
					"methods": [],
					"properties": [
						"instanceCount"
					]
				},

				"InstancedInterleavedBuffer": {
					"url": "api/en/core/InstancedInterleavedBuffer",
					"methods": [],
					"properties": [
						"meshPerAttribute"
					]
				},

				"InterleavedBuffer": {
					"url": "api/en/core/InterleavedBuffer",
					"methods": [
						"copy",
						"copyAt",
						"set",
						"clone",
						"setUsage",
						"toJSON"
					],
					"properties": [
						"array",
						"stride",
						"count",
						"updateRange",
						"uuid",
						"version",
						"needsUpdate",
						"usage"
					]
				},

				"InterleavedBufferAttribute": {
					"url": "api/en/core/InterleavedBufferAttribute",
					"methods": [
						"applyMatrix4",
						"applyNormalMatrix",
						"transformDirection",
						"getX",
						"getY",
						"getZ",
						"getW",
						"setX",
						"setY",
						"setZ",
						"setW",
						"setXY",
						"setXYZ",
						"setXYZW"
					],
					"properties": [
						"data",
						"array",
						"count",
						"itemSize",
						"name",
						"needsUpdate",
						"normalized",
						"offset"
					]
				},

				"Layers": {
					"url": "api/en/core/Layers",
					"methods": [
						"disable",
						"enable",
						"set",
						"test",
						"toggle",
						"enableAll",
						"disableAll"
					],
					"properties": [
						"mask"
					]
				},

				"Object3D": {
					"url": "api/en/core/Object3D",
					"methods": [
						"add",
						"applyMatrix4",
						"applyQuaternion",
						"attach",
						"clone",
						"copy",
						"getObjectById",
						"getObjectByName",
						"getObjectByProperty",
						"getWorldPosition",
						"getWorldQuaternion",
						"getWorldScale",
						"getWorldDirection",
						"localToWorld",
						"lookAt",
						"lookAt",
						"raycast",
						"remove",
						"removeFromParent",
						"clear",
						"rotateOnAxis",
						"rotateOnWorldAxis",
						"rotateX",
						"rotateY",
						"rotateZ",
						"setRotationFromAxisAngle",
						"setRotationFromEuler",
						"setRotationFromMatrix",
						"setRotationFromQuaternion",
						"toJSON",
						"translateOnAxis",
						"translateX",
						"translateY",
						"translateZ",
						"traverse",
						"traverseVisible",
						"traverseAncestors",
						"updateMatrix",
						"updateMatrixWorld",
						"updateWorldMatrix",
						"worldToLocal"
					],
					"properties": [
						"animations",
						"castShadow",
						"children",
						"customDepthMaterial",
						"customDistanceMaterial",
						"frustumCulled",
						"id",
						"layers",
						"matrix",
						"matrixAutoUpdate",
						"matrixWorld",
						"matrixWorldNeedsUpdate",
						"modelViewMatrix",
						"name",
						"normalMatrix",
						"onAfterRender",
						"onBeforeRender",
						"parent",
						"position",
						"quaternion",
						"receiveShadow",
						"renderOrder",
						"rotation",
						"scale",
						"up",
						"userData",
						"uuid",
						"visible",
						"DefaultUp",
						"DefaultMatrixAutoUpdate"
					]
				},

				"Raycaster": {
					"url": "api/en/core/Raycaster",
					"methods": [
						"set",
						"setFromCamera",
						"intersectObject",
						"intersectObjects"
					],
					"properties": [
						"far",
						"near",
						"camera",
						"layers",
						"params",
						"ray"
					]
				},

				"Uniform": {
					"url": "api/en/core/Uniform",
					"methods": [
						"clone"
					],
					"properties": [
						"value"
					]
				}
			},

			"Core / BufferAttributes": {
				"BufferAttribute Types": {
					"url": "api/en/core/bufferAttributeTypes/BufferAttributeTypes"
				}
			},

			"Extras": {
				"DataUtils": {
					"url": "api/en/extras/DataUtils",
					"methods": [
						"toHalfFloat"
					],
					"properties": []
				},

				"Earcut": {
					"url": "api/en/extras/Earcut",
					"methods": [
						"triangulate"
					],
					"properties": []
				},

				"ImageUtils": {
					"url": "api/en/extras/ImageUtils",
					"methods": [
						"getDataURL"
					],
					"properties": []
				},

				"PMREMGenerator": {
					"url": "api/en/extras/PMREMGenerator",
					"methods": [
						"fromScene",
						"fromEquirectangular",
						"fromCubemap",
						"compileCubemapShader",
						"compileEquirectangularShader",
						"dispose"
					],
					"properties": []
				},

				"ShapeUtils": {
					"url": "api/en/extras/ShapeUtils",
					"methods": [
						"area",
						"isClockWise",
						"triangulateShape"
					],
					"properties": []
				}
			},

			"Extras / Core": {
				"Curve": {
					"url": "api/en/extras/core/Curve",
					"methods": [
						"getPoint",
						"getPointAt",
						"getPoints",
						"getSpacedPoints",
						"getLength",
						"getLengths",
						"updateArcLengths",
						"getUtoTmapping",
						"getTangent",
						"getTangentAt",
						"computeFrenetFrames",
						"clone",
						"copy",
						"toJSON",
						"fromJSON"
					],
					"properties": [
						"arcLengthDivisions"
					]
				},

				"CurvePath": {
					"url": "api/en/extras/core/CurvePath",
					"methods": [
						"add",
						"closePath",
						"getCurveLengths",
						"getPoint",
						"getPoints",
						"getSpacedPoints"
					],
					"properties": [
						"curves",
						"autoClose"
					]
				},

				"Font": {
					"url": "api/en/extras/core/Font",
					"methods": [
						"generateShapes"
					],
					"properties": [
						"data"
					]
				},

				"Interpolations": {
					"url": "api/en/extras/core/Interpolations",
					"methods": [
						"CatmullRom",
						"QuadraticBezier",
						"CubicBezier"
					],
					"properties": []
				},

				"Path": {
					"url": "api/en/extras/core/Path",
					"methods": [
						"absarc",
						"absellipse",
						"arc",
						"bezierCurveTo",
						"ellipse",
						"lineTo",
						"moveTo",
						"quadraticCurveTo",
						"setFromPoints",
						"splineThru"
					],
					"properties": [
						"currentPoint"
					]
				},

				"Shape": {
					"url": "api/en/extras/core/Shape",
					"methods": [
						"extractPoints",
						"getPointsHoles"
					],
					"properties": [
						"uuid",
						"holes"
					]
				},

				"ShapePath": {
					"url": "api/en/extras/core/ShapePath",
					"methods": [
						"moveTo",
						"lineTo",
						"quadraticCurveTo",
						"bezierCurveTo",
						"splineThru",
						"toShapes"
					],
					"properties": [
						"subPaths",
						"currentPath",
						"color"
					]
				}
			},

			"Extras / Curves": {
				"ArcCurve": {
					"url": "api/en/extras/curves/ArcCurve"
				},

				"CatmullRomCurve3": {
					"url": "api/en/extras/curves/CatmullRomCurve3",
					"methods": [],
					"properties": [
						"points",
						"closed",
						"curveType",
						"tension"
					]
				},

				"CubicBezierCurve": {
					"url": "api/en/extras/curves/CubicBezierCurve",
					"methods": [],
					"properties": [
						"v0",
						"v1",
						"v2",
						"v3"
					]
				},

				"CubicBezierCurve3": {
					"url": "api/en/extras/curves/CubicBezierCurve3",
					"methods": [],
					"properties": [
						"v0",
						"v1",
						"v2",
						"v3"
					]
				},

				"EllipseCurve": {
					"url": "api/en/extras/curves/EllipseCurve",
					"methods": [],
					"properties": [
						"aX",
						"aY",
						"xRadius",
						"yRadius",
						"aStartAngle",
						"aEndAngle",
						"aClockwise",
						"aRotation"
					]
				},

				"LineCurve": {
					"url": "api/en/extras/curves/LineCurve",
					"methods": [],
					"properties": [
						"v1",
						"v2"
					]
				},

				"LineCurve3": {
					"url": "api/en/extras/curves/LineCurve3",
					"methods": [],
					"properties": [
						"v1",
						"v2"
					]
				},

				"QuadraticBezierCurve": {
					"url": "api/en/extras/curves/QuadraticBezierCurve",
					"methods": [],
					"properties": [
						"v0",
						"v1",
						"v2"
					]
				},

				"QuadraticBezierCurve3": {
					"url": "api/en/extras/curves/QuadraticBezierCurve3",
					"methods": [],
					"properties": [
						"v0",
						"v1",
						"v2"
					]
				},

				"SplineCurve": {
					"url": "api/en/extras/curves/SplineCurve",
					"methods": [],
					"properties": [
						"points"
					]
				}
			},

			"Extras / Objects": {
				"ImmediateRenderObject": {
					"url": "api/en/extras/objects/ImmediateRenderObject",
					"methods": [
						"render"
					],
					"properties": [
						"material",
						"hasPositions",
						"hasNormals",
						"hasColors",
						"hasUvs",
						"positionArray",
						"normalArray",
						"colorArray",
						"uvArray",
						"count"
					]
				}
			},

			"Geometries": {
				"BoxGeometry": {
					"url": "api/en/geometries/BoxGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"CircleGeometry": {
					"url": "api/en/geometries/CircleGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"ConeGeometry": {
					"url": "api/en/geometries/ConeGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"CylinderGeometry": {
					"url": "api/en/geometries/CylinderGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"DodecahedronGeometry": {
					"url": "api/en/geometries/DodecahedronGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"EdgesGeometry": {
					"url": "api/en/geometries/EdgesGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"ExtrudeGeometry": {
					"url": "api/en/geometries/ExtrudeGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"IcosahedronGeometry": {
					"url": "api/en/geometries/IcosahedronGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"LatheGeometry": {
					"url": "api/en/geometries/LatheGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"OctahedronGeometry": {
					"url": "api/en/geometries/OctahedronGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"ParametricGeometry": {
					"url": "api/en/geometries/ParametricGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"PlaneGeometry": {
					"url": "api/en/geometries/PlaneGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"PolyhedronGeometry": {
					"url": "api/en/geometries/PolyhedronGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"RingGeometry": {
					"url": "api/en/geometries/RingGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"ShapeGeometry": {
					"url": "api/en/geometries/ShapeGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"SphereGeometry": {
					"url": "api/en/geometries/SphereGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"TetrahedronGeometry": {
					"url": "api/en/geometries/TetrahedronGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"TextGeometry": {
					"url": "api/en/geometries/TextGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"TorusGeometry": {
					"url": "api/en/geometries/TorusGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"TorusKnotGeometry": {
					"url": "api/en/geometries/TorusKnotGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"TubeGeometry": {
					"url": "api/en/geometries/TubeGeometry",
					"methods": [],
					"properties": [
						"parameters",
						"tangents",
						"normals",
						"binormals"
					]
				},

				"WireframeGeometry": {
					"url": "api/en/geometries/WireframeGeometry"
				}
			},

			"Helpers": {
				"ArrowHelper": {
					"url": "api/en/helpers/ArrowHelper",
					"methods": [
						"setColor",
						"setLength",
						"setDirection"
					],
					"properties": [
						"line",
						"cone"
					]
				},

				"AxesHelper": {
					"url": "api/en/helpers/AxesHelper",
					"methods": [
						"dispose"
					],
					"properties": []
				},

				"BoxHelper": {
					"url": "api/en/helpers/BoxHelper",
					"methods": [
						"update",
						"setFromObject"
					],
					"properties": []
				},

				"Box3Helper": {
					"url": "api/en/helpers/Box3Helper",
					"methods": [
						"updateMatrixWorld"
					],
					"properties": [
						"box"
					]
				},

				"CameraHelper": {
					"url": "api/en/helpers/CameraHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"camera",
						"pointMap",
						"matrix",
						"matrixAutoUpdate"
					]
				},

				"DirectionalLightHelper": {
					"url": "api/en/helpers/DirectionalLightHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"lightPlane",
						"light",
						"matrix",
						"matrixAutoUpdate",
						"color"
					]
				},

				"GridHelper": {
					"url": "api/en/helpers/GridHelper"
				},

				"PolarGridHelper": {
					"url": "api/en/helpers/PolarGridHelper"
				},

				"HemisphereLightHelper": {
					"url": "api/en/helpers/HemisphereLightHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"light",
						"matrix",
						"matrixAutoUpdate",
						"color"
					]
				},

				"PlaneHelper": {
					"url": "api/en/helpers/PlaneHelper",
					"methods": [
						"updateMatrixWorld"
					],
					"properties": [
						"plane",
						"size"
					]
				},

				"PointLightHelper": {
					"url": "api/en/helpers/PointLightHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"light",
						"matrix",
						"matrixAutoUpdate",
						"color"
					]
				},

				"SkeletonHelper": {
					"url": "api/en/helpers/SkeletonHelper",
					"methods": [],
					"properties": [
						"bones",
						"root"
					]
				},

				"SpotLightHelper": {
					"url": "api/en/helpers/SpotLightHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"cone",
						"light",
						"matrix",
						"matrixAutoUpdate",
						"color"
					]
				}
			},

			"Lights": {
				"AmbientLight": {
					"url": "api/en/lights/AmbientLight"
				},

				"AmbientLightProbe": {
					"url": "api/en/lights/AmbientLightProbe"
				},

				"DirectionalLight": {
					"url": "api/en/lights/DirectionalLight",
					"methods": [
						"dispose",
						"copy"
					],
					"properties": [
						"castShadow",
						"position",
						"shadow",
						"target"
					]
				},

				"HemisphereLight": {
					"url": "api/en/lights/HemisphereLight",
					"methods": [
						"copy"
					],
					"properties": [
						"color",
						"groundColor",
						"position"
					]
				},

				"HemisphereLightProbe": {
					"url": "api/en/lights/HemisphereLightProbe"
				},

				"Light": {
					"url": "api/en/lights/Light",
					"methods": [
						"dispose",
						"copy",
						"toJSON"
					],
					"properties": [
						"color",
						"intensity"
					]
				},

				"LightProbe": {
					"url": "api/en/lights/LightProbe",
					"methods": [],
					"properties": [
						"sh"
					]
				},

				"PointLight": {
					"url": "api/en/lights/PointLight",
					"methods": [
						"dispose",
						"copy"
					],
					"properties": [
						"decay",
						"distance",
						"power",
						"shadow"
					]
				},

				"RectAreaLight": {
					"url": "api/en/lights/RectAreaLight",
					"methods": [
						"copy"
					],
					"properties": []
				},

				"SpotLight": {
					"url": "api/en/lights/SpotLight",
					"methods": [
						"dispose",
						"copy"
					],
					"properties": [
						"angle",
						"castShadow",
						"decay",
						"distance",
						"penumbra",
						"position",
						"power",
						"shadow",
						"target"
					]
				}
			},

			"Lights / Shadows": {
				"LightShadow": {
					"url": "api/en/lights/shadows/LightShadow",
					"methods": [
						"getFrameExtents",
						"updateMatrices",
						"getFrustum",
						"getViewportCount",
						"dispose",
						"copy",
						"clone",
						"toJSON"
					],
					"properties": [
						"autoUpdate",
						"camera",
						"bias",
						"map",
						"mapPass",
						"mapSize",
						"matrix",
						"needsUpdate",
						"normalBias",
						"radius"
					]
				},

				"PointLightShadow": {
					"url": "api/en/lights/shadows/PointLightShadow",
					"methods": [
						"updateMatrices"
					],
					"properties": []
				},

				"DirectionalLightShadow": {
					"url": "api/en/lights/shadows/DirectionalLightShadow",
					"methods": [],
					"properties": [
						"camera"
					]
				},

				"SpotLightShadow": {
					"url": "api/en/lights/shadows/SpotLightShadow",
					"methods": [],
					"properties": [
						"camera",
						"focus"
					]
				}
			},

			"Loaders": {
				"AnimationLoader": {
					"url": "api/en/loaders/AnimationLoader",
					"methods": [
						"load",
						"parse"
					],
					"properties": []
				},

				"AudioLoader": {
					"url": "api/en/loaders/AudioLoader",
					"methods": [
						"load"
					],
					"properties": []
				},

				"BufferGeometryLoader": {
					"url": "api/en/loaders/BufferGeometryLoader",
					"methods": [
						"load",
						"parse"
					],
					"properties": []
				},

				"Cache": {
					"url": "api/en/loaders/Cache",
					"methods": [
						"add",
						"get",
						"remove",
						"clear"
					],
					"properties": [
						"enabled",
						"files"
					]
				},

				"CompressedTextureLoader": {
					"url": "api/en/loaders/CompressedTextureLoader",
					"methods": [
						"load"
					],
					"properties": []
				},

				"CubeTextureLoader": {
					"url": "api/en/loaders/CubeTextureLoader",
					"methods": [
						"load"
					],
					"properties": []
				},

				"DataTextureLoader": {
					"url": "api/en/loaders/DataTextureLoader",
					"methods": [
						"load"
					],
					"properties": []
				},

				"FileLoader": {
					"url": "api/en/loaders/FileLoader",
					"methods": [
						"load",
						"setMimeType",
						"setResponseType"
					],
					"properties": [
						"mimeType",
						"responseType"
					]
				},

				"FontLoader": {
					"url": "api/en/loaders/FontLoader",
					"methods": [
						"load",
						"parse"
					],
					"properties": []
				},

				"ImageBitmapLoader": {
					"url": "api/en/loaders/ImageBitmapLoader",
					"methods": [
						"load",
						"setOptions"
					],
					"properties": [
						"options"
					]
				},

				"ImageLoader": {
					"url": "api/en/loaders/ImageLoader",
					"methods": [
						"load"
					],
					"properties": []
				},

				"Loader": {
					"url": "api/en/loaders/Loader",
					"methods": [
						"load",
						"loadAsync",
						"parse",
						"setCrossOrigin",
						"setWithCredentials",
						"setPath",
						"setResourcePath",
						"setRequestHeader"
					],
					"properties": [
						"crossOrigin",
						"withCredentials",
						"manager",
						"path",
						"resourcePath",
						"requestHeader"
					]
				},

				"LoaderUtils": {
					"url": "api/en/loaders/LoaderUtils",
					"methods": [
						"decodeText",
						"extractUrlBase"
					],
					"properties": []
				},

				"MaterialLoader": {
					"url": "api/en/loaders/MaterialLoader",
					"methods": [
						"load",
						"parse",
						"setTextures"
					],
					"properties": [
						"textures"
					]
				},

				"ObjectLoader": {
					"url": "api/en/loaders/ObjectLoader",
					"methods": [
						"load",
						"parse",
						"parseGeometries",
						"parseMaterials",
						"parseAnimations",
						"parseImages",
						"parseTextures",
						"parseObject"
					],
					"properties": []
				},

				"TextureLoader": {
					"url": "api/en/loaders/TextureLoader",
					"methods": [
						"load"
					],
					"properties": []
				}
			},

			"Loaders / Managers": {
				"DefaultLoadingManager": {
					"url": "api/en/loaders/managers/DefaultLoadingManager"
				},

				"LoadingManager": {
					"url": "api/en/loaders/managers/LoadingManager",
					"methods": [
						"addHandler",
						"getHandler",
						"removeHandler",
						"resolveURL",
						"setURLModifier",
						"itemStart",
						"itemEnd",
						"itemError"
					],
					"properties": [
						"onStart",
						"onLoad",
						"onProgress",
						"onError"
					]
				}
			},

			"Materials": {
				"LineBasicMaterial": {
					"url": "api/en/materials/LineBasicMaterial",
					"methods": [],
					"properties": [
						"color",
						"linewidth",
						"linecap",
						"linejoin",
						"morphTargets"
					]
				},

				"LineDashedMaterial": {
					"url": "api/en/materials/LineDashedMaterial",
					"methods": [],
					"properties": [
						"dashSize",
						"gapSize",
						"scale"
					]
				},

				"Material": {
					"url": "api/en/materials/Material",
					"methods": [
						"clone",
						"copy",
						"dispose",
						"onBeforeCompile",
						"customProgramCacheKey",
						"setValues",
						"toJSON"
					],
					"properties": [
						"alphaTest",
						"alphaToCoverage",
						"blendDst",
						"blendDstAlpha",
						"blendEquation",
						"blendEquationAlpha",
						"blending",
						"blendSrc",
						"blendSrcAlpha",
						"clipIntersection",
						"clippingPlanes",
						"clipShadows",
						"colorWrite",
						"defines",
						"depthFunc",
						"depthTest",
						"depthWrite",
						"stencilWrite",
						"stencilWriteMask",
						"stencilFunc",
						"stencilRef",
						"stencilFuncMask",
						"stencilFail",
						"stencilZFail",
						"stencilZPass",
						"fog",
						"id",
						"name",
						"needsUpdate",
						"opacity",
						"polygonOffset",
						"polygonOffsetFactor",
						"polygonOffsetUnits",
						"precision",
						"premultipliedAlpha",
						"dithering",
						"shadowSide",
						"side",
						"toneMapped",
						"transparent",
						"type",
						"uuid",
						"version",
						"needsUpdate",
						"vertexColors",
						"visible",
						"userData"
					]
				},

				"MeshBasicMaterial": {
					"url": "api/en/materials/MeshBasicMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"aoMap",
						"aoMapIntensity",
						"color",
						"combine",
						"envMap",
						"lightMap",
						"lightMapIntensity",
						"map",
						"morphTargets",
						"reflectivity",
						"refractionRatio",
						"specularMap",
						"wireframe",
						"wireframeLinecap",
						"wireframeLinejoin",
						"wireframeLinewidth"
					]
				},

				"MeshDepthMaterial": {
					"url": "api/en/materials/MeshDepthMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"depthPacking",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"fog",
						"map",
						"morphTargets",
						"wireframe",
						"wireframeLinewidth"
					]
				},

				"MeshDistanceMaterial": {
					"url": "api/en/materials/MeshDistanceMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"farDistance",
						"fog",
						"map",
						"morphTargets",
						"nearDistance",
						"referencePosition"
					]
				},

				"MeshLambertMaterial": {
					"url": "api/en/materials/MeshLambertMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"aoMap",
						"aoMapIntensity",
						"color",
						"combine",
						"emissive",
						"emissiveMap",
						"emissiveIntensity",
						"envMap",
						"lightMap",
						"lightMapIntensity",
						"map",
						"morphNormals",
						"morphTargets",
						"reflectivity",
						"refractionRatio",
						"specularMap",
						"wireframe",
						"wireframeLinecap",
						"wireframeLinejoin",
						"wireframeLinewidth"
					]
				},

				"MeshMatcapMaterial": {
					"url": "api/en/materials/MeshMatcapMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"bumpMap",
						"bumpScale",
						"color",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"flatShading",
						"map",
						"matcap",
						"morphNormals",
						"morphTargets",
						"normalMap",
						"normalMapType",
						"normalScale"
					]
				},

				"MeshNormalMaterial": {
					"url": "api/en/materials/MeshNormalMaterial",
					"methods": [],
					"properties": [
						"bumpMap",
						"bumpScale",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"flatShading",
						"fog",
						"morphNormals",
						"morphTargets",
						"normalMap",
						"normalMapType",
						"normalScale",
						"wireframe",
						"wireframeLinewidth"
					]
				},

				"MeshPhongMaterial": {
					"url": "api/en/materials/MeshPhongMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"aoMap",
						"aoMapIntensity",
						"bumpMap",
						"bumpScale",
						"color",
						"combine",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"emissive",
						"emissiveMap",
						"emissiveIntensity",
						"envMap",
						"flatShading",
						"lightMap",
						"lightMapIntensity",
						"map",
						"morphNormals",
						"morphTargets",
						"normalMap",
						"normalMapType",
						"normalScale",
						"reflectivity",
						"refractionRatio",
						"shininess",
						"specular",
						"specularMap",
						"wireframe",
						"wireframeLinecap",
						"wireframeLinejoin",
						"wireframeLinewidth"
					]
				},

				"MeshPhysicalMaterial": {
					"url": "api/en/materials/MeshPhysicalMaterial",
					"methods": [],
					"properties": [
						"clearcoat",
						"clearcoatMap",
						"clearcoatNormalMap",
						"clearcoatNormalScale",
						"clearcoatRoughness",
						"clearcoatRoughnessMap",
						"defines",
						"ior",
						"reflectivity",
						"sheen",
						"transmission",
						"transmissionMap"
					]
				},

				"MeshStandardMaterial": {
					"url": "api/en/materials/MeshStandardMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"aoMap",
						"aoMapIntensity",
						"bumpMap",
						"bumpScale",
						"color",
						"defines",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"emissive",
						"emissiveMap",
						"emissiveIntensity",
						"envMap",
						"envMapIntensity",
						"flatShading",
						"lightMap",
						"lightMapIntensity",
						"map",
						"metalness",
						"metalnessMap",
						"morphNormals",
						"morphTargets",
						"normalMap",
						"normalMapType",
						"normalScale",
						"refractionRatio",
						"roughness",
						"roughnessMap",
						"vertexTangents",
						"wireframe",
						"wireframeLinecap",
						"wireframeLinejoin",
						"wireframeLinewidth"
					]
				},

				"MeshToonMaterial": {
					"url": "api/en/materials/MeshToonMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"aoMap",
						"aoMapIntensity",
						"bumpMap",
						"bumpScale",
						"color",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"emissive",
						"emissiveMap",
						"emissiveIntensity",
						"gradientMap",
						"lightMap",
						"lightMapIntensity",
						"map",
						"morphNormals",
						"morphTargets",
						"normalMap",
						"normalMapType",
						"normalScale",
						"wireframe",
						"wireframeLinecap",
						"wireframeLinejoin",
						"wireframeLinewidth"
					]
				},

				"PointsMaterial": {
					"url": "api/en/materials/PointsMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"color",
						"map",
						"morphTargets",
						"size",
						"sizeAttenuation"
					]
				},

				"RawShaderMaterial": {
					"url": "api/en/materials/RawShaderMaterial"
				},

				"ShaderMaterial": {
					"url": "api/en/materials/ShaderMaterial",
					"methods": [
						"clone"
					],
					"properties": [
						"clipping",
						"defaultAttributeValues",
						"defines",
						"extensions",
						"fog",
						"fragmentShader",
						"glslVersion",
						"index0AttributeName",
						"lights",
						"linewidth",
						"morphTargets",
						"morphNormals",
						"flatShading",
						"uniforms",
						"uniformsNeedUpdate",
						"vertexColors",
						"vertexShader",
						"wireframe",
						"wireframeLinewidth"
					]
				},

				"ShadowMaterial": {
					"url": "api/en/materials/ShadowMaterial",
					"methods": [],
					"properties": [
						"transparent"
					]
				},

				"SpriteMaterial": {
					"url": "api/en/materials/SpriteMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"color",
						"map",
						"rotation",
						"sizeAttenuation"
					]
				}
			},

			"Math": {
				"Box2": {
					"url": "api/en/math/Box2",
					"methods": [
						"clampPoint",
						"clone",
						"containsBox",
						"containsPoint",
						"copy",
						"distanceToPoint",
						"equals",
						"expandByPoint",
						"expandByScalar",
						"expandByVector",
						"getCenter",
						"getParameter",
						"getSize",
						"intersect",
						"intersectsBox",
						"isEmpty",
						"makeEmpty",
						"set",
						"setFromCenterAndSize",
						"setFromPoints",
						"translate",
						"union"
					],
					"properties": [
						"min",
						"max"
					]
				},

				"Box3": {
					"url": "api/en/math/Box3",
					"methods": [
						"applyMatrix4",
						"clampPoint",
						"clone",
						"containsBox",
						"containsPoint",
						"copy",
						"distanceToPoint",
						"equals",
						"expandByObject",
						"expandByPoint",
						"expandByScalar",
						"expandByVector",
						"getBoundingSphere",
						"getCenter",
						"getParameter",
						"getSize",
						"intersect",
						"intersectsBox",
						"intersectsPlane",
						"intersectsSphere",
						"intersectsTriangle",
						"isEmpty",
						"makeEmpty",
						"set",
						"setFromArray",
						"setFromBufferAttribute",
						"setFromCenterAndSize",
						"setFromObject",
						"setFromPoints",
						"translate",
						"union"
					],
					"properties": [
						"min",
						"max"
					]
				},

				"Color": {
					"url": "api/en/math/Color",
					"methods": [
						"add",
						"addColors",
						"addScalar",
						"clone",
						"copy",
						"convertGammaToLinear",
						"convertLinearToGamma",
						"convertLinearToSRGB",
						"convertSRGBToLinear",
						"copyGammaToLinear",
						"copyLinearToGamma",
						"copyLinearToSRGB",
						"copySRGBToLinear",
						"equals",
						"fromArray",
						"fromBufferAttribute",
						"getHex",
						"getHexString",
						"getHSL",
						"getStyle",
						"lerp",
						"lerpColors",
						"lerpHSL",
						"multiply",
						"multiplyScalar",
						"offsetHSL",
						"set",
						"setHex",
						"setHSL",
						"setRGB",
						"setScalar",
						"setStyle",
						"setColorName",
						"sub",
						"toArray"
					],
					"properties": [
						"r",
						"g",
						"b"
					]
				},

				"Cylindrical": {
					"url": "api/en/math/Cylindrical",
					"methods": [
						"clone",
						"copy",
						"set",
						"setFromVector3",
						"setFromCartesianCoords"
					],
					"properties": [
						"radius",
						"theta",
						"y"
					]
				},

				"Euler": {
					"url": "api/en/math/Euler",
					"methods": [
						"copy",
						"clone",
						"equals",
						"fromArray",
						"reorder",
						"set",
						"setFromRotationMatrix",
						"setFromQuaternion",
						"setFromVector3",
						"toArray",
						"toVector3"
					],
					"properties": [
						"order",
						"x",
						"y",
						"z"
					]
				},

				"Frustum": {
					"url": "api/en/math/Frustum",
					"methods": [
						"clone",
						"containsPoint",
						"copy",
						"intersectsBox",
						"intersectsObject",
						"intersectsSphere",
						"intersectsSprite",
						"set",
						"setFromProjectionMatrix"
					],
					"properties": [
						"planes"
					]
				},

				"Interpolant": {
					"url": "api/en/math/Interpolant",
					"methods": [
						"evaluate"
					],
					"properties": [
						"parameterPositions",
						"resultBuffer",
						"sampleValues",
						"settings",
						"valueSize"
					]
				},

				"Line3": {
					"url": "api/en/math/Line3",
					"methods": [
						"applyMatrix4",
						"at",
						"clone",
						"closestPointToPoint",
						"closestPointToPointParameter",
						"copy",
						"delta",
						"distance",
						"distanceSq",
						"equals",
						"getCenter",
						"set"
					],
					"properties": [
						"start",
						"end"
					]
				},

				"MathUtils": {
					"url": "api/en/math/MathUtils",
					"methods": [
						"clamp",
						"degToRad",
						"euclideanModulo",
						"generateUUID",
						"isPowerOfTwo",
						"inverseLerp",
						"lerp",
						"damp",
						"mapLinear",
						"pingpong",
						"ceilPowerOfTwo",
						"floorPowerOfTwo",
						"radToDeg",
						"randFloat",
						"randFloatSpread",
						"randInt",
						"seededRandom",
						"smoothstep",
						"smootherstep",
						"setQuaternionFromProperEuler"
					],
					"properties": []
				},

				"Matrix3": {
					"url": "api/en/math/Matrix3",
					"methods": [
						"clone",
						"copy",
						"determinant",
						"equals",
						"extractBasis",
						"fromArray",
						"invert",
						"getNormalMatrix",
						"identity",
						"multiply",
						"multiplyMatrices",
						"multiplyScalar",
						"set",
						"premultiply",
						"setFromMatrix4",
						"setUvTransform",
						"toArray",
						"transpose",
						"transposeIntoArray"
					],
					"properties": [
						"elements"
					]
				},

				"Matrix4": {
					"url": "api/en/math/Matrix4",
					"methods": [
						"clone",
						"compose",
						"copy",
						"copyPosition",
						"decompose",
						"determinant",
						"equals",
						"extractBasis",
						"extractRotation",
						"fromArray",
						"invert",
						"getMaxScaleOnAxis",
						"identity",
						"lookAt",
						"makeRotationAxis",
						"makeBasis",
						"makePerspective",
						"makeOrthographic",
						"makeRotationFromEuler",
						"makeRotationFromQuaternion",
						"makeRotationX",
						"makeRotationY",
						"makeRotationZ",
						"makeScale",
						"makeShear",
						"makeTranslation",
						"multiply",
						"multiplyMatrices",
						"multiplyScalar",
						"premultiply",
						"scale",
						"set",
						"setFromMatrix3",
						"setPosition",
						"setPosition",
						"toArray",
						"transpose"
					],
					"properties": [
						"elements"
					]
				},

				"Plane": {
					"url": "api/en/math/Plane",
					"methods": [
						"applyMatrix4",
						"clone",
						"coplanarPoint",
						"copy",
						"distanceToPoint",
						"distanceToSphere",
						"equals",
						"intersectLine",
						"intersectsBox",
						"intersectsLine",
						"intersectsSphere",
						"negate",
						"normalize",
						"projectPoint",
						"set",
						"setComponents",
						"setFromCoplanarPoints",
						"setFromNormalAndCoplanarPoint",
						"translate"
					],
					"properties": [
						"normal",
						"constant"
					]
				},

				"Quaternion": {
					"url": "api/en/math/Quaternion",
					"methods": [
						"angleTo",
						"clone",
						"conjugate",
						"copy",
						"equals",
						"dot",
						"fromArray",
						"identity",
						"invert",
						"length",
						"lengthSq",
						"normalize",
						"multiply",
						"multiplyQuaternions",
						"premultiply",
						"rotateTowards",
						"slerp",
						"slerpQuaternions",
						"set",
						"setFromAxisAngle",
						"setFromEuler",
						"setFromRotationMatrix",
						"setFromUnitVectors",
						"toArray",
						"fromBufferAttribute",
						"slerpFlat"
					],
					"properties": [
						"x",
						"y",
						"z",
						"w"
					]
				},

				"Ray": {
					"url": "api/en/math/Ray",
					"methods": [
						"applyMatrix4",
						"at",
						"clone",
						"closestPointToPoint",
						"copy",
						"distanceSqToPoint",
						"distanceSqToSegment",
						"distanceToPlane",
						"distanceToPoint",
						"equals",
						"intersectBox",
						"intersectPlane",
						"intersectSphere",
						"intersectTriangle",
						"intersectsBox",
						"intersectsPlane",
						"intersectsSphere",
						"lookAt",
						"recast",
						"set"
					],
					"properties": [
						"origin",
						"direction"
					]
				},

				"Sphere": {
					"url": "api/en/math/Sphere",
					"methods": [
						"applyMatrix4",
						"clampPoint",
						"clone",
						"containsPoint",
						"copy",
						"distanceToPoint",
						"expandByPoint",
						"isEmpty",
						"makeEmpty",
						"equals",
						"getBoundingBox",
						"intersectsBox",
						"intersectsPlane",
						"intersectsSphere",
						"set",
						"setFromPoints",
						"translate",
						"union"
					],
					"properties": [
						"center",
						"radius"
					]
				},

				"Spherical": {
					"url": "api/en/math/Spherical",
					"methods": [
						"clone",
						"copy",
						"makeSafe",
						"set",
						"setFromVector3",
						"setFromCartesianCoords"
					],
					"properties": [
						"radius",
						"phi",
						"theta"
					]
				},

				"SphericalHarmonics3": {
					"url": "api/en/math/SphericalHarmonics3",
					"methods": [
						"add",
						"addScaledSH",
						"clone",
						"copy",
						"equals",
						"fromArray",
						"getAt",
						"getIrradianceAt",
						"lerp",
						"scale",
						"set",
						"toArray",
						"zero",
						"getBasisAt"
					],
					"properties": [
						"coefficients"
					]
				},

				"Triangle": {
					"url": "api/en/math/Triangle",
					"methods": [
						"clone",
						"closestPointToPoint",
						"containsPoint",
						"copy",
						"equals",
						"getArea",
						"getBarycoord",
						"getMidpoint",
						"getNormal",
						"getPlane",
						"intersectsBox",
						"set",
						"setFromPointsAndIndices"
					],
					"properties": [
						"a",
						"b",
						"c"
					]
				},

				"Vector2": {
					"url": "api/en/math/Vector2",
					"methods": [
						"add",
						"addScalar",
						"addScaledVector",
						"addVectors",
						"angle",
						"applyMatrix3",
						"ceil",
						"clamp",
						"clampLength",
						"clampScalar",
						"clone",
						"copy",
						"distanceTo",
						"manhattanDistanceTo",
						"distanceToSquared",
						"divide",
						"divideScalar",
						"dot",
						"cross",
						"equals",
						"floor",
						"fromArray",
						"fromBufferAttribute",
						"getComponent",
						"length",
						"manhattanLength",
						"lengthSq",
						"lerp",
						"lerpVectors",
						"negate",
						"normalize",
						"max",
						"min",
						"multiply",
						"multiplyScalar",
						"rotateAround",
						"round",
						"roundToZero",
						"set",
						"setComponent",
						"setLength",
						"setScalar",
						"setX",
						"setY",
						"sub",
						"subScalar",
						"subVectors",
						"toArray",
						"random"
					],
					"properties": [
						"height",
						"width",
						"x",
						"y"
					]
				},

				"Vector3": {
					"url": "api/en/math/Vector3",
					"methods": [
						"add",
						"addScalar",
						"addScaledVector",
						"addVectors",
						"applyAxisAngle",
						"applyEuler",
						"applyMatrix3",
						"applyMatrix4",
						"applyNormalMatrix",
						"applyQuaternion",
						"angleTo",
						"ceil",
						"clamp",
						"clampLength",
						"clampScalar",
						"clone",
						"copy",
						"cross",
						"crossVectors",
						"distanceTo",
						"manhattanDistanceTo",
						"distanceToSquared",
						"divide",
						"divideScalar",
						"dot",
						"equals",
						"floor",
						"fromArray",
						"fromBufferAttribute",
						"getComponent",
						"length",
						"manhattanLength",
						"lengthSq",
						"lerp",
						"lerpVectors",
						"max",
						"min",
						"multiply",
						"multiplyScalar",
						"multiplyVectors",
						"negate",
						"normalize",
						"project",
						"projectOnPlane",
						"projectOnVector",
						"reflect",
						"round",
						"roundToZero",
						"set",
						"setComponent",
						"setFromCylindrical",
						"setFromCylindricalCoords",
						"setFromMatrixColumn",
						"setFromMatrix3Column",
						"setFromMatrixPosition",
						"setFromMatrixScale",
						"setFromSpherical",
						"setFromSphericalCoords",
						"setLength",
						"setScalar",
						"setX",
						"setY",
						"setZ",
						"sub",
						"subScalar",
						"subVectors",
						"toArray",
						"transformDirection",
						"unproject",
						"random"
					],
					"properties": [
						"x",
						"y",
						"z"
					]
				},

				"Vector4": {
					"url": "api/en/math/Vector4",
					"methods": [
						"add",
						"addScalar",
						"addScaledVector",
						"addVectors",
						"applyMatrix4",
						"ceil",
						"clamp",
						"clampLength",
						"clampScalar",
						"clone",
						"copy",
						"divideScalar",
						"dot",
						"equals",
						"floor",
						"fromArray",
						"fromBufferAttribute",
						"getComponent",
						"length",
						"manhattanLength",
						"lengthSq",
						"lerp",
						"lerpVectors",
						"negate",
						"normalize",
						"max",
						"min",
						"multiply",
						"multiplyScalar",
						"round",
						"roundToZero",
						"set",
						"setAxisAngleFromQuaternion",
						"setAxisAngleFromRotationMatrix",
						"setComponent",
						"setLength",
						"setScalar",
						"setX",
						"setY",
						"setZ",
						"setW",
						"sub",
						"subScalar",
						"subVectors",
						"toArray",
						"random"
					],
					"properties": [
						"x",
						"y",
						"z",
						"w",
						"width",
						"height"
					]
				}
			},

			"Math / Interpolants": {
				"CubicInterpolant": {
					"url": "api/en/math/interpolants/CubicInterpolant",
					"methods": [
						"evaluate"
					],
					"properties": [
						"parameterPositions",
						"resultBuffer",
						"sampleValues",
						"settings",
						"valueSize"
					]
				},

				"DiscreteInterpolant": {
					"url": "api/en/math/interpolants/DiscreteInterpolant",
					"methods": [
						"evaluate"
					],
					"properties": [
						"parameterPositions",
						"resultBuffer",
						"sampleValues",
						"settings",
						"valueSize"
					]
				},

				"LinearInterpolant": {
					"url": "api/en/math/interpolants/LinearInterpolant",
					"methods": [
						"evaluate"
					],
					"properties": [
						"parameterPositions",
						"resultBuffer",
						"sampleValues",
						"settings",
						"valueSize"
					]
				},

				"QuaternionLinearInterpolant": {
					"url": "api/en/math/interpolants/QuaternionLinearInterpolant",
					"methods": [
						"evaluate"
					],
					"properties": [
						"parameterPositions",
						"resultBuffer",
						"sampleValues",
						"settings",
						"valueSize"
					]
				}
			},

			"Objects": {
				"Bone": {
					"url": "api/en/objects/Bone",
					"methods": [],
					"properties": [
						"type"
					]
				},

				"Group": {
					"url": "api/en/objects/Group",
					"methods": [],
					"properties": [
						"type"
					]
				},

				"InstancedMesh": {
					"url": "api/en/objects/InstancedMesh",
					"methods": [
						"dispose",
						"getColorAt",
						"getMatrixAt",
						"setColorAt",
						"setMatrixAt"
					],
					"properties": [
						"count",
						"instanceColor",
						"instanceMatrix"
					]
				},

				"Line": {
					"url": "api/en/objects/Line",
					"methods": [
						"computeLineDistances",
						"raycast",
						"clone",
						"updateMorphTargets"
					],
					"properties": [
						"geometry",
						"material",
						"morphTargetInfluences",
						"morphTargetDictionary"
					]
				},

				"LineLoop": {
					"url": "api/en/objects/LineLoop"
				},

				"LineSegments": {
					"url": "api/en/objects/LineSegments"
				},

				"LOD": {
					"url": "api/en/objects/LOD",
					"methods": [
						"addLevel",
						"clone",
						"getCurrentLevel",
						"getObjectForDistance",
						"raycast",
						"toJSON",
						"update"
					],
					"properties": [
						"autoUpdate",
						"levels"
					]
				},

				"Mesh": {
					"url": "api/en/objects/Mesh",
					"methods": [
						"clone",
						"raycast",
						"updateMorphTargets"
					],
					"properties": [
						"geometry",
						"material",
						"morphTargetInfluences",
						"morphTargetDictionary"
					]
				},

				"Points": {
					"url": "api/en/objects/Points",
					"methods": [
						"raycast",
						"clone",
						"updateMorphTargets"
					],
					"properties": [
						"geometry",
						"material",
						"morphTargetInfluences",
						"morphTargetDictionary"
					]
				},

				"Skeleton": {
					"url": "api/en/objects/Skeleton",
					"methods": [
						"clone",
						"calculateInverses",
						"computeBoneTexture",
						"pose",
						"update",
						"getBoneByName",
						"dispose"
					],
					"properties": [
						"bones",
						"boneInverses",
						"boneMatrices",
						"boneTexture",
						"boneTextureSize"
					]
				},

				"SkinnedMesh": {
					"url": "api/en/objects/SkinnedMesh",
					"methods": [
						"bind",
						"clone",
						"normalizeSkinWeights",
						"pose",
						"updateMatrixWorld",
						"boneTransform"
					],
					"properties": [
						"bindMode",
						"bindMatrix",
						"bindMatrixInverse",
						"skeleton"
					]
				},

				"Sprite": {
					"url": "api/en/objects/Sprite",
					"methods": [
						"clone",
						"copy",
						"raycast"
					],
					"properties": [
						"material",
						"center"
					]
				}
			},

			"Renderers": {
				"WebGLMultipleRenderTargets": {
					"url": "api/en/renderers/WebGLMultipleRenderTargets",
					"methods": [],
					"properties": [
						"texture"
					]
				},

				"WebGLMultisampleRenderTarget": {
					"url": "api/en/renderers/WebGLMultisampleRenderTarget",
					"methods": [],
					"properties": [
						"samples"
					]
				},

				"WebGLRenderer": {
					"url": "api/en/renderers/WebGLRenderer",
					"methods": [
						"clear",
						"clearColor",
						"clearDepth",
						"clearStencil",
						"compile",
						"copyFramebufferToTexture",
						"copyTextureToTexture",
						"copyTextureToTexture3D",
						"dispose",
						"forceContextLoss",
						"getClearAlpha",
						"getClearColor",
						"getContext",
						"getContextAttributes",
						"getActiveCubeFace",
						"getActiveMipmapLevel",
						"getRenderTarget",
						"getCurrentViewport",
						"getDrawingBufferSize",
						"getPixelRatio",
						"getScissor",
						"getScissorTest",
						"getSize",
						"getViewport",
						"initTexture",
						"resetGLState",
						"readRenderTargetPixels",
						"render",
						"renderBufferDirect",
						"renderBufferImmediate",
						"resetState",
						"setAnimationLoop",
						"setClearAlpha",
						"setClearColor",
						"setPixelRatio",
						"setRenderTarget",
						"setScissor",
						"setScissor",
						"setScissorTest",
						"setOpaqueSort",
						"setTransparentSort",
						"setSize",
						"setViewport",
						"setViewport"
					],
					"properties": [
						"autoClear",
						"autoClearColor",
						"autoClearDepth",
						"autoClearStencil",
						"capabilities",
						"maxVertexTextures",
						"clippingPlanes",
						"domElement",
						"extensions",
						"gammaFactor",
						"outputEncoding",
						"info",
						"localClippingEnabled",
						"physicallyCorrectLights",
						"properties",
						"renderLists",
						"shadowMap",
						"sortObjects",
						"state",
						"toneMapping",
						"toneMappingExposure",
						"xr"
					]
				},

				"WebGL1Renderer": {
					"url": "api/en/renderers/WebGL1Renderer"
				},

				"WebGLRenderTarget": {
					"url": "api/en/renderers/WebGLRenderTarget",
					"methods": [
						"setSize",
						"clone",
						"copy",
						"dispose"
					],
					"properties": [
						"width",
						"height",
						"scissor",
						"scissorTest",
						"viewport",
						"texture",
						"depthBuffer",
						"stencilBuffer",
						"depthTexture"
					]
				},

				"WebGLCubeRenderTarget": {
					"url": "api/en/renderers/WebGLCubeRenderTarget",
					"methods": [
						"fromEquirectangularTexture",
						"clear"
					],
					"properties": []
				}
			},

			"Renderers / Shaders": {
				"ShaderChunk": {
					"url": "api/en/renderers/shaders/ShaderChunk"
				},

				"ShaderLib": {
					"url": "api/en/renderers/shaders/ShaderLib"
				},

				"UniformsLib": {
					"url": "api/en/renderers/shaders/UniformsLib"
				},

				"UniformsUtils": {
					"url": "api/en/renderers/shaders/UniformsUtils",
					"methods": [
						"clone",
						"merge"
					],
					"properties": []
				}
			},

			"Renderers / WebXR": {
				"WebXRManager": {
					"url": "api/en/renderers/webxr/WebXRManager",
					"methods": [
						"getController",
						"getControllerGrip",
						"setFramebufferScaleFactor",
						"setReferenceSpaceType"
					],
					"properties": [
						"enabled",
						"isPresenting"
					]
				}
			},

			"Scenes": {
				"Fog": {
					"url": "api/en/scenes/Fog",
					"methods": [
						"clone",
						"toJSON"
					],
					"properties": [
						"name",
						"color",
						"near",
						"far"
					]
				},

				"FogExp2": {
					"url": "api/en/scenes/FogExp2",
					"methods": [
						"clone",
						"toJSON"
					],
					"properties": [
						"name",
						"color",
						"density"
					]
				},

				"Scene": {
					"url": "api/en/scenes/Scene",
					"methods": [
						"toJSON"
					],
					"properties": [
						"autoUpdate",
						"background",
						"environment",
						"fog",
						"overrideMaterial"
					]
				}
			},

			"Textures": {
				"CanvasTexture": {
					"url": "api/en/textures/CanvasTexture",
					"methods": [],
					"properties": [
						"needsUpdate"
					]
				},

				"CompressedTexture": {
					"url": "api/en/textures/CompressedTexture",
					"methods": [],
					"properties": [
						"flipY",
						"generateMipmaps"
					]
				},

				"CubeTexture": {
					"url": "api/en/textures/CubeTexture"
				},

				"DataTexture": {
					"url": "api/en/textures/DataTexture",
					"methods": [],
					"properties": [
						"image"
					]
				},

				"DataTexture2DArray": {
					"url": "api/en/textures/DataTexture2DArray",
					"methods": [],
					"properties": [
						"image"
					]
				},

				"DataTexture3D": {
					"url": "api/en/textures/DataTexture3D",
					"methods": [],
					"properties": [
						"wrapR"
					]
				},

				"DepthTexture": {
					"url": "api/en/textures/DepthTexture"
				},

				"Texture": {
					"url": "api/en/textures/Texture",
					"methods": [
						"updateMatrix",
						"clone",
						"toJSON",
						"dispose",
						"transformUv"
					],
					"properties": [
						"id",
						"uuid",
						"name",
						"image",
						"mipmaps",
						"mapping",
						"wrapS",
						"wrapT",
						"wrapS",
						"magFilter",
						"minFilter",
						"anisotropy",
						"format",
						"internalFormat",
						"type",
						"offset",
						"repeat",
						"rotation",
						"center",
						"matrixAutoUpdate",
						"matrix",
						"generateMipmaps",
						"premultiplyAlpha",
						"flipY",
						"unpackAlignment",
						"encoding",
						"version",
						"needsUpdate",
						"onUpdate",
						"needsUpdate"
					]
				},

				"VideoTexture": {
					"url": "api/en/textures/VideoTexture",
					"methods": [
						"update"
					],
					"properties": [
						"needsUpdate",
						"needsUpdate"
					]
				}
			}
		},

		"Examples": {
			"Animations": {
				"CCDIKSolver": {
					"url": "examples/en/animations/CCDIKSolver",
					"methods": [
						"createHelper",
						"update",
						"updateOne"
					],
					"properties": [
						"iks",
						"mesh"
					]
				},

				"MMDAnimationHelper": {
					"url": "examples/en/animations/MMDAnimationHelper",
					"methods": [
						"add",
						"enable",
						"pose",
						"remove",
						"update"
					],
					"properties": [
						"audio",
						"camera",
						"meshes",
						"objects",
						"onBeforePhysics"
					]
				},

				"MMDPhysics": {
					"url": "examples/en/animations/MMDPhysics",
					"methods": [
						"createHelper",
						"reset",
						"setGravity",
						"update",
						"warmup"
					],
					"properties": [
						"mesh"
					]
				}
			},

			"Controls": {
				"DeviceOrientationControls": {
					"url": "examples/en/controls/DeviceOrientationControls",
					"methods": [
						"connect",
						"disconnect",
						"dispose",
						"update"
					],
					"properties": [
						"alphaOffset",
						"deviceOrientation",
						"enabled",
						"object",
						"screenOrientation"
					]
				},

				"DragControls": {
					"url": "examples/en/controls/DragControls",
					"methods": [
						"activate",
						"deactivate",
						"dispose",
						"getObjects"
					],
					"properties": [
						"enabled",
						"transformGroup"
					]
				},

				"FirstPersonControls": {
					"url": "examples/en/controls/FirstPersonControls",
					"methods": [
						"dispose",
						"handleResize",
						"lookAt",
						"lookAt",
						"update"
					],
					"properties": [
						"activeLook",
						"autoForward",
						"constrainVertical",
						"domElement",
						"enabled",
						"heightCoef",
						"heightMax",
						"heightMin",
						"heightSpeed",
						"lookVertical",
						"lookSpeed",
						"mouseDragOn",
						"movementSpeed",
						"object",
						"verticalMax",
						"verticalMin"
					]
				},

				"FlyControls": {
					"url": "examples/en/controls/FlyControls",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"autoForward",
						"domElement",
						"dragToLook",
						"movementSpeed",
						"object",
						"rollSpeed"
					]
				},

				"OrbitControls": {
					"url": "examples/en/controls/OrbitControls",
					"methods": [
						"dispose",
						"getAzimuthalAngle",
						"getPolarAngle",
						"listenToKeyEvents",
						"reset",
						"saveState",
						"update"
					],
					"properties": [
						"autoRotate",
						"autoRotateSpeed",
						"dampingFactor",
						"domElement",
						"enabled",
						"enableDamping",
						"enablePan",
						"enableRotate",
						"enableZoom",
						"keyPanSpeed",
						"keys",
						"maxAzimuthAngle",
						"maxDistance",
						"maxPolarAngle",
						"maxZoom",
						"minAzimuthAngle",
						"minDistance",
						"minPolarAngle",
						"minZoom",
						"mouseButtons",
						"object",
						"panSpeed",
						"position0",
						"rotateSpeed",
						"screenSpacePanning",
						"target0",
						"target",
						"touches",
						"zoom0",
						"zoomSpeed"
					]
				},

				"PointerLockControls": {
					"url": "examples/en/controls/PointerLockControls",
					"methods": [
						"connect",
						"disconnect",
						"getDirection",
						"lock",
						"moveForward",
						"moveRight",
						"unlock"
					],
					"properties": [
						"domElement",
						"isLocked",
						"maxPolarAngle",
						"minPolarAngle"
					]
				},

				"TrackballControls": {
					"url": "examples/en/controls/TrackballControls",
					"methods": [
						"checkDistances",
						"dispose",
						"handleResize",
						"panCamera",
						"reset",
						"rotateCamera",
						"update",
						"zoomCamera"
					],
					"properties": [
						"domElement",
						"dynamicDampingFactor",
						"enabled",
						"keys",
						"maxDistance",
						"minDistance",
						"mouseButtons",
						"noPan",
						"noRotate",
						"noZoom",
						"object",
						"panSpeed",
						"rotateSpeed",
						"screen",
						"staticMoving",
						"zoomSpeed"
					]
				},

				"TransformControls": {
					"url": "examples/en/controls/TransformControls",
					"methods": [
						"attach",
						"detach",
						"dispose",
						"getMode",
						"setMode",
						"setRotationSnap",
						"setSize",
						"setSpace",
						"setTranslationSnap"
					],
					"properties": [
						"axis",
						"camera",
						"domElement",
						"dragging",
						"enabled",
						"mode",
						"object",
						"rotationSnap",
						"showX",
						"showY",
						"showZ",
						"size",
						"space",
						"translationSnap"
					]
				}
			},

			"Geometries": {
				"ConvexGeometry": {
					"url": "examples/en/geometries/ConvexGeometry"
				},

				"DecalGeometry": {
					"url": "examples/en/geometries/DecalGeometry"
				}
			},

			"Helpers": {
				"LightProbeHelper": {
					"url": "examples/en/helpers/LightProbeHelper",
					"methods": [
						"dispose"
					],
					"properties": [
						"lightProbe",
						"size"
					]
				},

				"PositionalAudioHelper": {
					"url": "examples/en/helpers/PositionalAudioHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"audio",
						"range",
						"divisionsInnerAngle",
						"divisionsOuterAngle"
					]
				},

				"RectAreaLightHelper": {
					"url": "examples/en/helpers/RectAreaLightHelper",
					"methods": [
						"dispose"
					],
					"properties": [
						"light",
						"color"
					]
				},

				"VertexNormalsHelper": {
					"url": "examples/en/helpers/VertexNormalsHelper",
					"methods": [
						"update"
					],
					"properties": [
						"matrixAutoUpdate",
						"object",
						"size"
					]
				},

				"VertexTangentsHelper": {
					"url": "examples/en/helpers/VertexTangentsHelper",
					"methods": [
						"update"
					],
					"properties": [
						"matrixAutoUpdate",
						"object",
						"size"
					]
				}
			},

			"Lights": {
				"LightProbeGenerator": {
					"url": "examples/en/lights/LightProbeGenerator",
					"methods": [
						"fromCubeTexture",
						"fromCubeRenderTarget"
					],
					"properties": []
				}
			},

			"Loaders": {
				"3DMLoader": {
					"url": "examples/en/loaders/3DMLoader",
					"methods": [
						"load",
						"parse",
						"setLibraryPath",
						"setWorkerLimit",
						"dispose"
					],
					"properties": []
				},

				"BasisTextureLoader": {
					"url": "examples/en/loaders/BasisTextureLoader",
					"methods": [
						"load",
						"detectSupport",
						"setTranscoderPath",
						"setWorkerLimit",
						"dispose"
					],
					"properties": []
				},

				"DRACOLoader": {
					"url": "examples/en/loaders/DRACOLoader",
					"methods": [
						"load",
						"setDecoderPath",
						"setDecoderConfig",
						"setWorkerLimit",
						"preload",
						"dispose"
					],
					"properties": []
				},

				"GLTFLoader": {
					"url": "examples/en/loaders/GLTFLoader",
					"methods": [
						"load",
						"setDRACOLoader",
						"setKTX2Loader",
						"parse"
					],
					"properties": []
				},

				"KTX2Loader": {
					"url": "examples/en/loaders/KTX2Loader",
					"methods": [
						"load",
						"detectSupport",
						"setTranscoderPath",
						"setWorkerLimit",
						"dispose"
					],
					"properties": []
				},

				"MMDLoader": {
					"url": "examples/en/loaders/MMDLoader",
					"methods": [
						"load",
						"loadAnimation",
						"loadWithAnimation",
						"setAnimationPath"
					],
					"properties": []
				},

				"MTLLoader": {
					"url": "examples/en/loaders/MTLLoader",
					"methods": [
						"load",
						"setMaterialOptions",
						"parse"
					],
					"properties": []
				},

				"OBJLoader": {
					"url": "examples/en/loaders/OBJLoader",
					"methods": [
						"load",
						"parse",
						"setMaterials"
					],
					"properties": []
				},

				"PCDLoader": {
					"url": "examples/en/loaders/PCDLoader",
					"methods": [
						"load",
						"parse"
					],
					"properties": []
				},

				"PDBLoader": {
					"url": "examples/en/loaders/PDBLoader",
					"methods": [
						"load",
						"parse"
					],
					"properties": []
				},

				"PRWMLoader": {
					"url": "examples/en/loaders/PRWMLoader",
					"methods": [
						"load",
						"parse"
					],
					"properties": []
				},

				"SVGLoader": {
					"url": "examples/en/loaders/SVGLoader",
					"methods": [
						"load",
						"createShapes"
					],
					"properties": []
				},

				"TGALoader": {
					"url": "examples/en/loaders/TGALoader",
					"methods": [
						"load"
					],
					"properties": []
				}
			},

			"Objects": {
				"Lensflare": {
					"url": "examples/en/objects/Lensflare"
				}
			},

			"Post-Processing": {
				"EffectComposer": {
					"url": "examples/en/postprocessing/EffectComposer",
					"methods": [
						"addPass",
						"insertPass",
						"isLastEnabledPass",
						"removePass",
						"render",
						"reset",
						"setPixelRatio",
						"setSize",
						"swapBuffers"
					],
					"properties": [
						"passes",
						"readBuffer",
						"renderer",
						"renderToScreen",
						"writeBuffer"
					]
				}
			},

			"Exporters": {
				"GLTFExporter": {
					"url": "examples/en/exporters/GLTFExporter",
					"methods": [
						"parse"
					],
					"properties": []
				},

				"PLYExporter": {
					"url": "examples/en/exporters/PLYExporter",
					"methods": [
						"parse"
					],
					"properties": []
				},

				"ColladaExporter": {
					"url": "examples/en/exporters/ColladaExporter",
					"methods": [
						"parse"
					],
					"properties": []
				}
			},

			"Math": {
				"LookupTable": {
					"url": "examples/en/math/Lut",
					"methods": [
						"copy",
						"setMin",
						"setMax",
						"changeNumberOfColors",
						"changeColorMap",
						"addColorMap",
						"getColor"
					],
					"properties": [
						"minV",
						"maxV"
					]
				},

				"MeshSurfaceSampler": {
					"url": "examples/en/math/MeshSurfaceSampler",
					"methods": [
						"setWeightAttribute",
						"build",
						"sample"
					],
					"properties": []
				},

				"OBB": {
					"url": "examples/en/math/OBB",
					"methods": [
						"applyMatrix4",
						"clampPoint",
						"clone",
						"containsPoint",
						"copy",
						"equals",
						"fromBox3",
						"getSize",
						"intersectsBox3",
						"intersectsSphere",
						"intersectsOBB",
						"intersectsRay",
						"intersectRay",
						"set"
					],
					"properties": [
						"center",
						"halfSize",
						"rotation"
					]
				}
			},

			"ConvexHull": {
				"Face": {
					"url": "examples/en/math/convexhull/Face",
					"methods": [
						"create",
						"getEdge",
						"compute",
						"distanceToPoint"
					],
					"properties": [
						"normal",
						"midpoint",
						"area",
						"constant",
						"outside",
						"mark",
						"edge"
					]
				},

				"HalfEdge": {
					"url": "examples/en/math/convexhull/HalfEdge",
					"methods": [
						"head",
						"tail",
						"length",
						"lengthSquared",
						"setTwin"
					],
					"properties": [
						"vertex",
						"prev",
						"next",
						"twin",
						"face"
					]
				},

				"ConvexHull": {
					"url": "examples/en/math/convexhull/ConvexHull",
					"methods": [
						"addAdjoiningFace",
						"addNewFaces",
						"addVertexToFace",
						"addVertexToHull",
						"cleanup",
						"compute",
						"computeExtremes",
						"computeHorizon",
						"computeInitialHull",
						"containsPoint",
						"deleteFaceVertices",
						"intersectRay",
						"intersectsRay",
						"makeEmpty",
						"nextVertexToAdd",
						"reindexFaces",
						"removeAllVerticesFromFace",
						"removeVertexFromFace",
						"resolveUnassignedPoints",
						"setFromObject",
						"setFromPoints"
					],
					"properties": [
						"assigned",
						"faces",
						"newFaces",
						"tolerance",
						"unassigned",
						"vertices"
					]
				},

				"VertexNode": {
					"url": "examples/en/math/convexhull/VertexNode",
					"methods": [],
					"properties": [
						"point",
						"prev",
						"next",
						"face"
					]
				},

				"VertexList": {
					"url": "examples/en/math/convexhull/VertexList",
					"methods": [
						"first",
						"last",
						"clear",
						"insertBefore",
						"insertAfter",
						"append",
						"appendChain",
						"remove",
						"removeSubList",
						"isEmpty"
					],
					"properties": [
						"head",
						"tail"
					]
				}
			},

			"Renderers": {
				"CSS2DRenderer": {
					"url": "examples/en/renderers/CSS2DRenderer",
					"methods": [
						"getSize",
						"render",
						"setSize"
					],
					"properties": []
				},

				"CSS3DRenderer": {
					"url": "examples/en/renderers/CSS3DRenderer",
					"methods": [
						"getSize",
						"render",
						"setSize"
					],
					"properties": []
				},

				"SVGRenderer": {
					"url": "examples/en/renderers/SVGRenderer",
					"methods": [
						"clear",
						"getSize",
						"render",
						"setClearColor",
						"setPrecision",
						"setQuality",
						"setSize"
					],
					"properties": [
						"overdraw"
					]
				}
			},

			"Utils": {
				"BufferGeometryUtils": {
					"url": "examples/en/utils/BufferGeometryUtils",
					"methods": [
						"mergeBufferGeometries",
						"mergeBufferAttributes",
						"interleaveAttributes",
						"estimateBytesUsed",
						"mergeVertices",
						"toTrianglesDrawMode",
						"computeMorphedAttributes"
					],
					"properties": []
				},

				"CameraUtils": {
					"url": "examples/en/utils/CameraUtils"
				},

				"SceneUtils": {
					"url": "examples/en/utils/SceneUtils",
					"methods": [
						"createMeshesFromInstancedMesh",
						"createMultiMaterialObject"
					],
					"properties": []
				},

				"SkeletonUtils": {
					"url": "examples/en/utils/SkeletonUtils",
					"methods": [
						"clone",
						"findBoneTrackData",
						"getBoneByName",
						"getBones",
						"getEqualsBonesNames",
						"getHelperFromSkeleton",
						"getNearestBone",
						"getSkeletonOffsets",
						"renameBones",
						"retarget",
						"retargetClip"
					],
					"properties": []
				}
			}
		},

		"Developer Reference": {
			"Polyfills": {
				"Polyfills": {
					"url": "api/en/Polyfills"
				}
			},

			"WebGLRenderer": {
				"WebGLProgram": {
					"url": "api/en/renderers/webgl/WebGLProgram",
					"methods": [
						"getUniforms",
						"getAttributes",
						"destroy"
					],
					"properties": [
						"name",
						"id",
						"cacheKey",
						"usedTimes",
						"program",
						"vertexShader",
						"fragmentShader"
					]
				},

				"WebGLShader": {
					"url": "api/en/renderers/webgl/WebGLShader"
				},

				"WebGLState": {
					"url": "api/en/renderers/webgl/WebGLState",
					"methods": [
						"enable",
						"disable",
						"setDepthTest",
						"setDepthWrite",
						"setBlending"
					],
					"properties": []
				}
			}
		}
	},

	"ar": {
		"الكتيب": {
			"البدء": {
				"إنشاء مشهد": {
					"url": "manual/ar/introduction/Creating-a-scene"
				},

				"التثبيت": {
					"url": "manual/ar/introduction/Installation"
				},

				"فحص توافق WebGL": {
					"url": "manual/ar/introduction/WebGL-compatibility-check"
				},

				"كيف تدير الأشياء محليًا": {
					"url": "manual/ar/introduction/How-to-run-things-locally"
				},

				"رسم خطوط": {
					"url": "manual/ar/introduction/Drawing-lines"
				},

				"إنشاء نص": {
					"url": "manual/ar/introduction/Creating-text"
				},

				"تحميل نماذج ثلاثية الأبعاد": {
					"url": "manual/ar/introduction/Loading-3D-models"
				},

				"الأسئلة الشائعة": {
					"url": "manual/ar/introduction/FAQ"
				},

				"روابط مفيدة": {
					"url": "manual/ar/introduction/Useful-links"
				}
			},

			"الخطوات التالية": {
				"كيفية تحديث الأشياء": {
					"url": "manual/ar/introduction/How-to-update-things"
				},

				"كيفية التخلص من الأشياء": {
					"url": "manual/ar/introduction/How-to-dispose-of-objects"
				},

				"كيفية إنشاء محتوى VR": {
					"url": "manual/ar/introduction/How-to-create-VR-content"
				},

				"كيفية استخدام المعالجة اللاحقة (post-processing)": {
					"url": "manual/ar/introduction/How-to-use-post-processing"
				},

				"تحولات المصفوفة (Matrix transformations)": {
					"url": "manual/ar/introduction/Matrix-transformations"
				},

				"نظام الحركات": {
					"url": "manual/ar/introduction/Animation-system"
				}
			},

			"أدوات البناء": {
				"الاختبار مع NPM": {
					"url": "manual/ar/buildTools/Testing-with-NPM"
				}
			}
		},

		"المرجع": {
			"الحركات": {
				"AnimationAction": {
					"url": "api/ar/animation/AnimationAction",
					"methods": [
						"crossFadeFrom",
						"crossFadeTo",
						"fadeIn",
						"fadeOut",
						"getEffectiveTimeScale",
						"getEffectiveWeight",
						"getClip",
						"getMixer",
						"getRoot",
						"halt",
						"isRunning",
						"isScheduled",
						"play",
						"reset",
						"setDuration",
						"setEffectiveTimeScale",
						"setEffectiveWeight",
						"setLoop",
						"startAt",
						"stop",
						"stopFading",
						"stopWarping",
						"syncWith",
						"warp"
					],
					"properties": [
						"clampWhenFinished",
						"enabled",
						"loop",
						"paused",
						"repetitions",
						"time",
						"timeScale",
						"weight",
						"zeroSlopeAtEnd",
						"zeroSlopeAtStart"
					]
				},

				"AnimationClip": {
					"url": "api/ar/animation/AnimationClip",
					"methods": [
						"clone",
						"optimize",
						"resetDuration",
						"toJSON",
						"trim",
						"validate",
						"CreateClipsFromMorphTargetSequences",
						"CreateFromMorphTargetSequence",
						"findByName",
						"parse",
						"parseAnimation",
						"toJSON"
					],
					"properties": [
						"duration",
						"name",
						"tracks",
						"uuid"
					]
				},

				"AnimationMixer": {
					"url": "api/ar/animation/AnimationMixer",
					"methods": [
						"clipAction",
						"existingAction",
						"getRoot",
						"stopAllAction",
						"update",
						"setTime",
						"uncacheClip",
						"uncacheRoot",
						"uncacheAction"
					],
					"properties": [
						"time",
						"timeScale"
					]
				},

				"AnimationObjectGroup": {
					"url": "api/ar/animation/AnimationObjectGroup",
					"methods": [
						"add",
						"remove",
						"uncache"
					],
					"properties": [
						"stats",
						"uuid"
					]
				},

				"AnimationUtils": {
					"url": "api/ar/animation/AnimationUtils",
					"methods": [
						"arraySlice",
						"convertArray",
						"flattenJSON",
						"getKeyframeOrder",
						"isTypedArray",
						"sortedArray",
						"subclip"
					],
					"properties": []
				},

				"KeyframeTrack": {
					"url": "api/ar/animation/KeyframeTrack",
					"methods": [
						"clone",
						"createInterpolant",
						"getInterpolation",
						"getValueSize",
						"InterpolantFactoryMethodDiscrete",
						"InterpolantFactoryMethodLinear",
						"InterpolantFactoryMethodSmooth",
						"optimize",
						"scale",
						"setInterpolation",
						"shift",
						"trim",
						"validate",
						"toJSON"
					],
					"properties": [
						"name",
						"times",
						"values",
						"DefaultInterpolation",
						"TimeBufferType ",
						"ValueBufferType "
					]
				},

				"PropertyBinding": {
					"url": "api/ar/animation/PropertyBinding",
					"methods": [
						"getValue",
						"setValue",
						"bind",
						"unbind",
						"Composite",
						"create",
						"parseTrackName",
						"findNode"
					],
					"properties": [
						"path",
						"parsedPath",
						"node",
						"rootNode",
						"BindingType",
						"Versioning",
						"GetterByBindingType",
						"SetterByBindingTypeAndVersioning"
					]
				},

				"PropertyMixer": {
					"url": "api/ar/animation/PropertyMixer",
					"methods": [
						"accumulate",
						"apply",
						"saveOriginalState",
						"restoreOriginalState"
					],
					"properties": [
						"binding",
						"buffer",
						"cumulativeWeight",
						"valueSize",
						"referenceCount",
						"useCount"
					]
				}
			},

			"الحركات / Tracks": {
				"BooleanKeyframeTrack": {
					"url": "api/ar/animation/tracks/BooleanKeyframeTrack",
					"methods": [
						"InterpolantFactoryMethodLinear ",
						"InterpolantFactoryMethodSmooth "
					],
					"properties": [
						"DefaultInterpolation",
						"ValueBufferType",
						"ValueTypeName"
					]
				},

				"ColorKeyframeTrack": {
					"url": "api/ar/animation/tracks/ColorKeyframeTrack",
					"methods": [],
					"properties": [
						"ValueTypeName"
					]
				},

				"NumberKeyframeTrack": {
					"url": "api/ar/animation/tracks/NumberKeyframeTrack",
					"methods": [],
					"properties": [
						"ValueTypeName"
					]
				},

				"QuaternionKeyframeTrack": {
					"url": "api/ar/animation/tracks/QuaternionKeyframeTrack",
					"methods": [
						"InterpolantFactoryMethodLinear"
					],
					"properties": [
						"DefaultInterpolation",
						"ValueTypeName"
					]
				},

				"StringKeyframeTrack": {
					"url": "api/ar/animation/tracks/StringKeyframeTrack",
					"methods": [
						"InterpolantFactoryMethodLinear",
						"InterpolantFactoryMethodSmooth"
					],
					"properties": [
						"DefaultInterpolation",
						"ValueBufferType",
						"ValueTypeName"
					]
				},

				"VectorKeyframeTrack": {
					"url": "api/ar/animation/tracks/VectorKeyframeTrack",
					"methods": [],
					"properties": [
						"ValueTypeName"
					]
				}
			},

			"Audio": {
				"Audio": {
					"url": "api/ar/audio/Audio",
					"methods": [
						"connect",
						"disconnect",
						"getFilter",
						"getFilters",
						"getLoop",
						"getOutput",
						"getPlaybackRate",
						"getVolume",
						"play",
						"pause",
						"onEnded",
						"setBuffer",
						"setFilter",
						"setFilters",
						"setLoop",
						"setLoopStart",
						"setLoopEnd",
						"setMediaElementSource",
						"setMediaStreamSource",
						"setNodeSource",
						"setPlaybackRate",
						"setVolume",
						"stop"
					],
					"properties": [
						"autoplay",
						"context",
						"detune",
						"filters",
						"gain",
						"hasPlaybackControl",
						"isPlaying",
						"listener",
						"playbackRate",
						"offset",
						"duration",
						"source",
						"sourceType",
						"type"
					]
				},

				"AudioAnalyser": {
					"url": "api/ar/audio/AudioAnalyser",
					"methods": [
						"getFrequencyData",
						"getAverageFrequency"
					],
					"properties": [
						"analyser",
						"fftSize",
						"data"
					]
				},

				"AudioContext": {
					"url": "api/ar/audio/AudioContext",
					"methods": [
						"getContext",
						"setContext"
					],
					"properties": []
				},

				"AudioListener": {
					"url": "api/ar/audio/AudioListener",
					"methods": [
						"getInput",
						"removeFilter",
						"getFilter",
						"setFilter",
						"getMasterVolume",
						"setMasterVolume"
					],
					"properties": [
						"context",
						"gain",
						"filter",
						"timeDelta"
					]
				},

				"PositionalAudio": {
					"url": "api/ar/audio/PositionalAudio",
					"methods": [
						"getOutput",
						"getRefDistance",
						"setRefDistance",
						"getRolloffFactor",
						"setRolloffFactor",
						"getDistanceModel",
						"setDistanceModel",
						"getMaxDistance",
						"setMaxDistance",
						"setDirectionalCone"
					],
					"properties": [
						"panner"
					]
				}
			},

			"Cameras": {
				"ArrayCamera": {
					"url": "api/ar/cameras/ArrayCamera",
					"methods": [],
					"properties": [
						"cameras"
					]
				},

				"Camera": {
					"url": "api/ar/cameras/Camera",
					"methods": [
						"clone",
						"copy",
						"getWorldDirection"
					],
					"properties": [
						"layers",
						"matrixWorldInverse",
						"projectionMatrix",
						"projectionMatrixInverse"
					]
				},

				"CubeCamera": {
					"url": "api/ar/cameras/CubeCamera",
					"methods": [
						"update",
						"clear"
					],
					"properties": [
						"renderTarget"
					]
				}
			}
		}
	},

	"zh": {
		"手册": {
			"起步": {
				"创建一个场景": {
					"url": "manual/zh/introduction/Creating-a-scene"
				},

				"安装": {
					"url": "manual/zh/introduction/Installation"
				},

				"WebGL兼容性检查": {
					"url": "manual/zh/introduction/WebGL-compatibility-check"
				},

				"如何在本地运行Three.js": {
					"url": "manual/zh/introduction/How-to-run-things-locally"
				},

				"画线": {
					"url": "manual/zh/introduction/Drawing-lines"
				},

				"创建文字": {
					"url": "manual/zh/introduction/Creating-text"
				},

				"载入3D模型": {
					"url": "manual/zh/introduction/Loading-3D-models"
				},

				"常见问题": {
					"url": "manual/zh/introduction/FAQ"
				},

				"一些有用的链接": {
					"url": "manual/zh/introduction/Useful-links"
				}
			},

			"进阶": {
				"如何更新场景": {
					"url": "manual/zh/introduction/How-to-update-things"
				},

				"如何废置对象": {
					"url": "manual/zh/introduction/How-to-dispose-of-objects"
				},

				"如何创建VR内容": {
					"url": "manual/zh/introduction/How-to-create-VR-content"
				},

				"如何使用后期处理": {
					"url": "manual/zh/introduction/How-to-use-post-processing"
				},

				"矩阵变换": {
					"url": "manual/zh/introduction/Matrix-transformations"
				},

				"动画系统": {
					"url": "manual/zh/introduction/Animation-system"
				}
			},

			"构建工具": {
				"使用NPM进行测试": {
					"url": "manual/zh/buildTools/Testing-with-NPM"
				}
			}
		},

		"参考": {
			"动画": {
				"AnimationAction": {
					"url": "api/zh/animation/AnimationAction",
					"methods": [
						"crossFadeFrom",
						"crossFadeTo",
						"fadeIn",
						"fadeOut",
						"getEffectiveTimeScale",
						"getEffectiveWeight",
						"getClip",
						"getMixer",
						"getRoot",
						"halt",
						"isRunning",
						"isScheduled",
						"play",
						"reset",
						"setDuration",
						"setEffectiveTimeScale",
						"setEffectiveWeight",
						"setLoop",
						"startAt",
						"stop",
						"stopFading",
						"stopWarping",
						"syncWith",
						"warp"
					],
					"properties": [
						"clampWhenFinished",
						"enabled",
						"loop",
						"paused",
						"repetitions",
						"time",
						"timeScale",
						"weight",
						"zeroSlopeAtEnd",
						"zeroSlopeAtStart"
					]
				},

				"AnimationClip": {
					"url": "api/zh/animation/AnimationClip",
					"methods": [
						"clone",
						"optimize",
						"resetDuration",
						"toJSON",
						"trim",
						"validate",
						"CreateClipsFromMorphTargetSequences",
						"CreateFromMorphTargetSequence",
						"findByName",
						"parse",
						"parseAnimation",
						"toJSON"
					],
					"properties": [
						"duration",
						"name",
						"tracks",
						"uuid"
					]
				},

				"AnimationMixer": {
					"url": "api/zh/animation/AnimationMixer",
					"methods": [
						"setTime",
						"clipAction",
						"existingAction",
						"getRoot",
						"stopAllAction",
						"update",
						"uncacheClip",
						"uncacheRoot",
						"uncacheAction"
					],
					"properties": [
						"time",
						"timeScale"
					]
				},

				"AnimationObjectGroup": {
					"url": "api/zh/animation/AnimationObjectGroup",
					"methods": [
						"add",
						"remove",
						"uncache"
					],
					"properties": [
						"stats",
						"uuid"
					]
				},

				"AnimationUtils": {
					"url": "api/zh/animation/AnimationUtils",
					"methods": [
						"arraySlice",
						"convertArray",
						"flattenJSON",
						"getKeyframeOrder",
						"insertKeyframe",
						"isTypedArray",
						"mergeMorphTargetTracks",
						"sortedArray",
						"subclip"
					],
					"properties": []
				},

				"KeyframeTrack": {
					"url": "api/zh/animation/KeyframeTrack",
					"methods": [
						"clone",
						"createInterpolant",
						"getInterpolation",
						"getValueSize",
						"InterpolantFactoryMethodDiscrete",
						"InterpolantFactoryMethodLinear",
						"InterpolantFactoryMethodSmooth",
						"optimize",
						"scale",
						"setInterpolation",
						"shift",
						"trim",
						"validate",
						"toJSON"
					],
					"properties": [
						"name",
						"times",
						"values",
						"DefaultInterpolation",
						"TimeBufferType ",
						"ValueBufferType "
					]
				},

				"PropertyBinding": {
					"url": "api/zh/animation/PropertyBinding",
					"methods": [
						"getValue",
						"setValue",
						"bind",
						"unbind",
						"Composite",
						"create",
						"parseTrackName",
						"findNode"
					],
					"properties": [
						"path",
						"parsedPath",
						"node",
						"rootNode",
						"BindingType",
						"Versioning",
						"GetterByBindingType",
						"SetterByBindingTypeAndVersioning"
					]
				},

				"PropertyMixer": {
					"url": "api/zh/animation/PropertyMixer",
					"methods": [
						"accumulate",
						"apply",
						"saveOriginalState",
						"restoreOriginalState"
					],
					"properties": [
						"binding",
						"buffer",
						"cumulativeWeight",
						"valueSize",
						"referenceCount",
						"useCount"
					]
				}
			},

			"动画 / 轨道": {
				"BooleanKeyframeTrack": {
					"url": "api/zh/animation/tracks/BooleanKeyframeTrack",
					"methods": [
						"InterpolantFactoryMethodLinear ",
						"InterpolantFactoryMethodSmooth "
					],
					"properties": [
						"DefaultInterpolation",
						"ValueBufferType",
						"ValueTypeName"
					]
				},

				"ColorKeyframeTrack": {
					"url": "api/zh/animation/tracks/ColorKeyframeTrack",
					"methods": [],
					"properties": [
						"ValueTypeName"
					]
				},

				"NumberKeyframeTrack": {
					"url": "api/zh/animation/tracks/NumberKeyframeTrack",
					"methods": [],
					"properties": [
						"ValueTypeName"
					]
				},

				"QuaternionKeyframeTrack": {
					"url": "api/zh/animation/tracks/QuaternionKeyframeTrack",
					"methods": [
						"InterpolantFactoryMethodLinear"
					],
					"properties": [
						"DefaultInterpolation",
						"ValueTypeName"
					]
				},

				"StringKeyframeTrack": {
					"url": "api/zh/animation/tracks/StringKeyframeTrack",
					"methods": [
						"InterpolantFactoryMethodLinear",
						"InterpolantFactoryMethodSmooth"
					],
					"properties": [
						"DefaultInterpolation",
						"ValueBufferType",
						"ValueTypeName"
					]
				},

				"VectorKeyframeTrack": {
					"url": "api/zh/animation/tracks/VectorKeyframeTrack",
					"methods": [],
					"properties": [
						"ValueTypeName"
					]
				}
			},

			"音频": {
				"Audio": {
					"url": "api/zh/audio/Audio",
					"methods": [
						"connect",
						"disconnect",
						"getFilter",
						"getFilters",
						"getLoop",
						"getOutput",
						"getPlaybackRate",
						"getVolume",
						"play",
						"pause",
						"onEnded",
						"setBuffer",
						"setFilter",
						"setFilters",
						"setLoop",
						"setLoopStart",
						"setLoopEnd",
						"setMediaElementSource",
						"setMediaStreamSource",
						"setNodeSource",
						"setPlaybackRate",
						"setVolume",
						"stop"
					],
					"properties": [
						"autoplay",
						"context",
						"detune",
						"filters",
						"gain",
						"hasPlaybackControl",
						"isPlaying",
						"listener",
						"playbackRate",
						"offset",
						"duration",
						"source",
						"sourceType",
						"type"
					]
				},

				"AudioAnalyser": {
					"url": "api/zh/audio/AudioAnalyser",
					"methods": [
						"getFrequencyData",
						"getAverageFrequency"
					],
					"properties": [
						"analyser",
						"fftSize",
						"data"
					]
				},

				"AudioContext": {
					"url": "api/zh/audio/AudioContext",
					"methods": [
						"getContext",
						"setContext"
					],
					"properties": []
				},

				"AudioListener": {
					"url": "api/zh/audio/AudioListener",
					"methods": [
						"getInput",
						"removeFilter",
						"getFilter",
						"setFilter",
						"getMasterVolume",
						"setMasterVolume"
					],
					"properties": [
						"context",
						"gain",
						"filter",
						"timeDelta"
					]
				},

				"PositionalAudio": {
					"url": "api/zh/audio/PositionalAudio",
					"methods": [
						"getOutput",
						"getRefDistance",
						"setRefDistance",
						"getRolloffFactor",
						"setRolloffFactor",
						"getDistanceModel",
						"setDistanceModel",
						"getMaxDistance",
						"setMaxDistance",
						"setDirectionalCone"
					],
					"properties": [
						"panner"
					]
				}
			},

			"摄像机": {
				"ArrayCamera": {
					"url": "api/zh/cameras/ArrayCamera",
					"methods": [],
					"properties": [
						"cameras"
					]
				},

				"Camera": {
					"url": "api/zh/cameras/Camera",
					"methods": [
						"clone",
						"copy",
						"getWorldDirection"
					],
					"properties": [
						"layers",
						"matrixWorldInverse",
						"projectionMatrix",
						"projectionMatrixInverse"
					]
				},

				"CubeCamera": {
					"url": "api/zh/cameras/CubeCamera",
					"methods": [
						"update"
					],
					"properties": [
						"renderTarget"
					]
				},

				"OrthographicCamera": {
					"url": "api/zh/cameras/OrthographicCamera",
					"methods": [
						"setViewOffset",
						"clearViewOffset",
						"updateProjectionMatrix",
						"toJSON"
					],
					"properties": [
						"bottom",
						"far",
						"left",
						"near",
						"right",
						"top",
						"view",
						"zoom"
					]
				},

				"PerspectiveCamera": {
					"url": "api/zh/cameras/PerspectiveCamera",
					"methods": [
						"clearViewOffset",
						"getEffectiveFOV",
						"getFilmHeight",
						"getFilmWidth",
						"getFocalLength",
						"setFocalLength",
						"setViewOffset",
						"updateProjectionMatrix",
						"toJSON"
					],
					"properties": [
						"aspect",
						"far",
						"filmGauge",
						"filmOffset",
						"focus",
						"fov",
						"near",
						"view",
						"zoom"
					]
				},

				"StereoCamera": {
					"url": "api/zh/cameras/StereoCamera",
					"methods": [
						"update"
					],
					"properties": [
						"aspect",
						"eyeSep",
						"cameraL",
						"cameraR"
					]
				}
			},

			"常量": {
				"Animation": {
					"url": "api/zh/constants/Animation"
				},

				"Core": {
					"url": "api/zh/constants/Core"
				},

				"CustomBlendingEquation": {
					"url": "api/zh/constants/CustomBlendingEquations"
				},

				"Materials": {
					"url": "api/zh/constants/Materials"
				},

				"Renderer": {
					"url": "api/zh/constants/Renderer"
				},

				"Textures": {
					"url": "api/zh/constants/Textures"
				}
			},

			"核心": {
				"BufferAttribute": {
					"url": "api/zh/core/BufferAttribute",
					"methods": [
						"applyMatrix3",
						"applyMatrix4",
						"applyNormalMatrix",
						"transformDirection",
						"clone",
						"copyArray",
						"copyAt",
						"copyColorsArray",
						"copyVector2sArray",
						"copyVector3sArray",
						"copyVector4sArray",
						"getX",
						"getY",
						"getZ",
						"getW",
						"onUpload",
						"set",
						"setUsage",
						"setX",
						"setY",
						"setZ",
						"setW",
						"setXY",
						"setXYZ",
						"setXYZW"
					],
					"properties": [
						"array",
						"count",
						"itemSize",
						"name",
						"needsUpdate",
						"normalized",
						"onUploadCallback",
						"updateRange",
						"usage",
						"version"
					]
				},

				"BufferGeometry": {
					"url": "api/zh/core/BufferGeometry",
					"methods": [
						"setAttribute",
						"addGroup",
						"applyMatrix4",
						"center",
						"clone",
						"copy",
						"clearGroups",
						"computeBoundingBox",
						"computeBoundingSphere",
						"computeTangents",
						"computeVertexNormals",
						"dispose",
						"getAttribute",
						"getIndex",
						"hasAttribute",
						"lookAt",
						"merge",
						"normalizeNormals",
						"deleteAttribute",
						"rotateX",
						"rotateY",
						"rotateZ",
						"scale",
						"setIndex",
						"setDrawRange",
						"setFromPoints",
						"toJSON",
						"toNonIndexed",
						"translate"
					],
					"properties": [
						"attributes",
						"boundingBox",
						"boundingSphere",
						"drawRange",
						"groups",
						"drawcalls",
						"id",
						"index",
						"morphAttributes",
						"morphTargetsRelative",
						"name",
						"userData",
						"uuid"
					]
				},

				"Clock": {
					"url": "api/zh/core/Clock",
					"methods": [
						"start",
						"stop",
						"getElapsedTime",
						"getDelta"
					],
					"properties": [
						"autoStart",
						"startTime",
						"oldTime",
						"elapsedTime",
						"running"
					]
				},

				"EventDispatcher": {
					"url": "api/zh/core/EventDispatcher",
					"methods": [
						"addEventListener",
						"hasEventListener",
						"removeEventListener",
						"dispatchEvent"
					],
					"properties": []
				},

				"GLBufferAttribute": {
					"url": "api/zh/core/GLBufferAttribute",
					"methods": [
						"setBuffer",
						"setType",
						"setItemSize",
						"setCount"
					],
					"properties": [
						"buffer",
						"count",
						"itemSize",
						"elementSize",
						"type",
						"isGLBufferAttribute",
						"version",
						"needsUpdate"
					]
				},

				"InstancedBufferAttribute": {
					"url": "api/zh/core/InstancedBufferAttribute",
					"methods": [],
					"properties": [
						"meshPerAttribute"
					]
				},

				"InstancedBufferGeometry": {
					"url": "api/zh/core/InstancedBufferGeometry",
					"methods": [],
					"properties": [
						"instanceCount"
					]
				},

				"InstancedInterleavedBuffer": {
					"url": "api/zh/core/InstancedInterleavedBuffer",
					"methods": [],
					"properties": [
						"meshPerAttribute"
					]
				},

				"InterleavedBuffer": {
					"url": "api/zh/core/InterleavedBuffer",
					"methods": [
						"copy",
						"copyAt",
						"set",
						"clone",
						"setUsage",
						"toJSON"
					],
					"properties": [
						"array",
						"stride",
						"count",
						"updateRange",
						"uuid",
						"version",
						"needsUpdate",
						"usage"
					]
				},

				"InterleavedBufferAttribute": {
					"url": "api/zh/core/InterleavedBufferAttribute",
					"methods": [
						"applyMatrix4",
						"applyNormalMatrix",
						"transformDirection",
						"getX",
						"getY",
						"getZ",
						"getW",
						"setX",
						"setY",
						"setZ",
						"setW",
						"setXY",
						"setXYZ",
						"setXYZW"
					],
					"properties": [
						"data",
						"array",
						"count",
						"itemSize",
						"name",
						"needsUpdate",
						"normalized",
						"offset"
					]
				},

				"Layers": {
					"url": "api/zh/core/Layers",
					"methods": [
						"disable",
						"enable",
						"set",
						"test",
						"toggle",
						"enableAll",
						"disableAll"
					],
					"properties": [
						"mask"
					]
				},

				"Object3D": {
					"url": "api/zh/core/Object3D",
					"methods": [
						"add",
						"applyMatrix4",
						"applyQuaternion",
						"attach",
						"clone",
						"copy",
						"getObjectById",
						"getObjectByName",
						"getObjectByProperty",
						"getWorldPosition",
						"getWorldQuaternion",
						"getWorldScale",
						"getWorldDirection",
						"localToWorld",
						"lookAt",
						"lookAt",
						"raycast",
						"remove",
						"removeFromParent",
						"rotateOnAxis",
						"rotateOnWorldAxis",
						"rotateX",
						"rotateY",
						"rotateZ",
						"setRotationFromAxisAngle",
						"setRotationFromEuler",
						"setRotationFromMatrix",
						"setRotationFromQuaternion",
						"toJSON",
						"translateOnAxis",
						"translateX",
						"translateY",
						"translateZ",
						"traverse",
						"traverseVisible",
						"traverseAncestors",
						"updateMatrix",
						"updateMatrixWorld",
						"updateWorldMatrix",
						"worldToLocal"
					],
					"properties": [
						"animations",
						"castShadow",
						"children",
						"customDepthMaterial",
						"customDistanceMaterial",
						"frustumCulled",
						"id",
						"layers",
						"matrix",
						"matrixAutoUpdate",
						"matrixWorld",
						"matrixWorldNeedsUpdate",
						"modelViewMatrix",
						"name",
						"normalMatrix",
						"onAfterRender",
						"onBeforeRender",
						"parent",
						"position",
						"quaternion",
						"receiveShadow",
						"renderOrder",
						"rotation",
						"scale",
						"up",
						"userData",
						"uuid",
						"visible",
						"DefaultUp",
						"DefaultMatrixAutoUpdate"
					]
				},

				"Raycaster": {
					"url": "api/zh/core/Raycaster",
					"methods": [
						"set",
						"setFromCamera",
						"intersectObject",
						"intersectObjects"
					],
					"properties": [
						"far",
						"near",
						"camera",
						"layers",
						"params",
						"ray"
					]
				},

				"Uniform": {
					"url": "api/zh/core/Uniform",
					"methods": [
						"clone"
					],
					"properties": [
						"value"
					]
				}
			},

			"核心 / BufferAttributes": {
				"BufferAttribute Types": {
					"url": "api/zh/core/bufferAttributeTypes/BufferAttributeTypes"
				}
			},

			"附件": {
				"Earcut": {
					"url": "api/zh/extras/Earcut",
					"methods": [
						"triangulate"
					],
					"properties": []
				},

				"ImageUtils": {
					"url": "api/zh/extras/ImageUtils",
					"methods": [
						"getDataURL"
					],
					"properties": []
				},

				"PMREMGenerator": {
					"url": "api/zh/extras/PMREMGenerator",
					"methods": [
						"fromScene",
						"fromEquirectangular",
						"fromCubemap",
						"compileCubemapShader",
						"compileEquirectangularShader",
						"dispose"
					],
					"properties": []
				},

				"ShapeUtils": {
					"url": "api/zh/extras/ShapeUtils",
					"methods": [
						"area",
						"isClockWise",
						"triangulateShape"
					],
					"properties": []
				}
			},

			"附件 / 核心": {
				"Curve": {
					"url": "api/zh/extras/core/Curve",
					"methods": [
						"getPoint",
						"getPointAt",
						"getPoints",
						"getSpacedPoints",
						"getLength",
						"getLengths",
						"updateArcLengths",
						"getUtoTmapping",
						"getTangent",
						"getTangentAt",
						"computeFrenetFrames",
						"clone",
						"copy",
						"toJSON",
						"fromJSON"
					],
					"properties": [
						"arcLengthDivisions"
					]
				},

				"CurvePath": {
					"url": "api/zh/extras/core/CurvePath",
					"methods": [
						"add",
						"closePath",
						"getCurveLengths",
						"getPoint",
						"getPoints",
						"getSpacedPoints"
					],
					"properties": [
						"curves",
						"autoClose"
					]
				},

				"Font": {
					"url": "api/zh/extras/core/Font",
					"methods": [
						"generateShapes"
					],
					"properties": [
						"data"
					]
				},

				"Interpolations": {
					"url": "api/zh/extras/core/Interpolations",
					"methods": [
						"CatmullRom",
						"QuadraticBezier",
						"CubicBezier"
					],
					"properties": []
				},

				"Path": {
					"url": "api/zh/extras/core/Path",
					"methods": [
						"absarc",
						"absellipse",
						"arc",
						"bezierCurveTo",
						"ellipse",
						"lineTo",
						"moveTo",
						"quadraticCurveTo",
						"setFromPoints",
						"splineThru"
					],
					"properties": [
						"currentPoint"
					]
				},

				"Shape": {
					"url": "api/zh/extras/core/Shape",
					"methods": [
						"extractPoints",
						"getPointsHoles"
					],
					"properties": [
						"uuid",
						"holes"
					]
				},

				"ShapePath": {
					"url": "api/zh/extras/core/ShapePath",
					"methods": [
						"moveTo",
						"lineTo",
						"quadraticCurveTo",
						"bezierCurveTo",
						"splineThru",
						"toShapes"
					],
					"properties": [
						"subPaths",
						"currentPath"
					]
				}
			},

			"附件 / 曲线": {
				"ArcCurve": {
					"url": "api/zh/extras/curves/ArcCurve"
				},

				"CatmullRomCurve3": {
					"url": "api/zh/extras/curves/CatmullRomCurve3",
					"methods": [],
					"properties": [
						"points",
						"closed",
						"curveType",
						"tension"
					]
				},

				"CubicBezierCurve": {
					"url": "api/zh/extras/curves/CubicBezierCurve",
					"methods": [],
					"properties": [
						"v0",
						"v1",
						"v2",
						"v3"
					]
				},

				"CubicBezierCurve3": {
					"url": "api/zh/extras/curves/CubicBezierCurve3",
					"methods": [],
					"properties": [
						"v0",
						"v1",
						"v2",
						"v3"
					]
				},

				"EllipseCurve": {
					"url": "api/zh/extras/curves/EllipseCurve",
					"methods": [],
					"properties": [
						"aX",
						"aY",
						"xRadius",
						"yRadius",
						"aStartAngle",
						"aEndAngle",
						"aClockwise",
						"aRotation"
					]
				},

				"LineCurve": {
					"url": "api/zh/extras/curves/LineCurve",
					"methods": [],
					"properties": [
						"v1",
						"v2"
					]
				},

				"LineCurve3": {
					"url": "api/zh/extras/curves/LineCurve3",
					"methods": [],
					"properties": [
						"v1",
						"v2"
					]
				},

				"QuadraticBezierCurve": {
					"url": "api/zh/extras/curves/QuadraticBezierCurve",
					"methods": [],
					"properties": [
						"v0",
						"v1",
						"v2"
					]
				},

				"QuadraticBezierCurve3": {
					"url": "api/zh/extras/curves/QuadraticBezierCurve3",
					"methods": [],
					"properties": [
						"v0",
						"v1",
						"v2"
					]
				},

				"SplineCurve": {
					"url": "api/zh/extras/curves/SplineCurve",
					"methods": [],
					"properties": [
						"points"
					]
				}
			},

			"附件 / 物体": {
				"ImmediateRenderObject": {
					"url": "api/zh/extras/objects/ImmediateRenderObject",
					"methods": [
						"render"
					],
					"properties": [
						"material",
						"hasPositions",
						"hasNormals",
						"hasColors",
						"hasUvs",
						"positionArray",
						"normalArray",
						"colorArray",
						"uvArray",
						"count"
					]
				}
			},

			"几何体": {
				"BoxGeometry": {
					"url": "api/zh/geometries/BoxGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"CircleGeometry": {
					"url": "api/zh/geometries/CircleGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"ConeGeometry": {
					"url": "api/zh/geometries/ConeGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"CylinderGeometry": {
					"url": "api/zh/geometries/CylinderGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"DodecahedronGeometry": {
					"url": "api/zh/geometries/DodecahedronGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"EdgesGeometry": {
					"url": "api/zh/geometries/EdgesGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"ExtrudeGeometry": {
					"url": "api/zh/geometries/ExtrudeGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"IcosahedronGeometry": {
					"url": "api/zh/geometries/IcosahedronGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"LatheGeometry": {
					"url": "api/zh/geometries/LatheGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"OctahedronGeometry": {
					"url": "api/zh/geometries/OctahedronGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"ParametricGeometry": {
					"url": "api/zh/geometries/ParametricGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"PlaneGeometry": {
					"url": "api/zh/geometries/PlaneGeometry"
				},

				"PolyhedronGeometry": {
					"url": "api/zh/geometries/PolyhedronGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"RingGeometry": {
					"url": "api/zh/geometries/RingGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"ShapeGeometry": {
					"url": "api/zh/geometries/ShapeGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"SphereGeometry": {
					"url": "api/zh/geometries/SphereGeometry"
				},

				"TetrahedronGeometry": {
					"url": "api/zh/geometries/TetrahedronGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"TextGeometry": {
					"url": "api/zh/geometries/TextGeometry",
					"methods": [],
					"properties": [
						"parameters"
					]
				},

				"TorusGeometry": {
					"url": "api/zh/geometries/TorusGeometry"
				},

				"TorusKnotGeometry": {
					"url": "api/zh/geometries/TorusKnotGeometry"
				},

				"TubeGeometry": {
					"url": "api/zh/geometries/TubeGeometry",
					"methods": [],
					"properties": [
						"parameters",
						"tangents",
						"normals",
						"binormals"
					]
				},

				"WireframeGeometry": {
					"url": "api/zh/geometries/WireframeGeometry"
				}
			},

			"辅助对象": {
				"ArrowHelper": {
					"url": "api/zh/helpers/ArrowHelper",
					"methods": [
						"setColor",
						"setLength",
						"setDirection"
					],
					"properties": [
						"line",
						"cone"
					]
				},

				"AxesHelper": {
					"url": "api/zh/helpers/AxesHelper"
				},

				"BoxHelper": {
					"url": "api/zh/helpers/BoxHelper",
					"methods": [
						"update",
						"setFromObject"
					],
					"properties": []
				},

				"Box3Helper": {
					"url": "api/zh/helpers/Box3Helper",
					"methods": [
						"updateMatrixWorld"
					],
					"properties": [
						"box"
					]
				},

				"CameraHelper": {
					"url": "api/zh/helpers/CameraHelper",
					"methods": [
						"update"
					],
					"properties": [
						"camera",
						"pointMap",
						"matrix",
						"matrixAutoUpdate"
					]
				},

				"DirectionalLightHelper": {
					"url": "api/zh/helpers/DirectionalLightHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"lightPlane",
						"light",
						"matrix",
						"matrixAutoUpdate",
						"color"
					]
				},

				"GridHelper": {
					"url": "api/zh/helpers/GridHelper"
				},

				"PolarGridHelper": {
					"url": "api/zh/helpers/PolarGridHelper"
				},

				"HemisphereLightHelper": {
					"url": "api/zh/helpers/HemisphereLightHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"light",
						"matrix",
						"matrixAutoUpdate",
						"color"
					]
				},

				"PlaneHelper": {
					"url": "api/zh/helpers/PlaneHelper",
					"methods": [
						"updateMatrixWorld"
					],
					"properties": [
						"plane",
						"size"
					]
				},

				"PointLightHelper": {
					"url": "api/zh/helpers/PointLightHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"light",
						"matrix",
						"matrixAutoUpdate",
						"color"
					]
				},

				"SkeletonHelper": {
					"url": "api/zh/helpers/SkeletonHelper",
					"methods": [],
					"properties": [
						"bones",
						"root"
					]
				},

				"SpotLightHelper": {
					"url": "api/zh/helpers/SpotLightHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"cone",
						"light",
						"matrix",
						"matrixAutoUpdate",
						"color"
					]
				}
			},

			"灯光": {
				"AmbientLight": {
					"url": "api/zh/lights/AmbientLight",
					"methods": [],
					"properties": [
						"castShadow"
					]
				},

				"AmbientLightProbe": {
					"url": "api/zh/lights/AmbientLightProbe"
				},

				"DirectionalLight": {
					"url": "api/zh/lights/DirectionalLight",
					"methods": [
						"copy"
					],
					"properties": [
						"castShadow",
						"position",
						"shadow",
						"target"
					]
				},

				"HemisphereLight": {
					"url": "api/zh/lights/HemisphereLight",
					"methods": [
						"copy"
					],
					"properties": [
						"castShadow",
						"color",
						"groundColor",
						"position"
					]
				},

				"HemisphereLightProbe": {
					"url": "api/zh/lights/HemisphereLightProbe"
				},

				"Light": {
					"url": "api/zh/lights/Light",
					"methods": [
						"copy",
						"toJSON"
					],
					"properties": [
						"color",
						"intensity"
					]
				},

				"LightProbe": {
					"url": "api/zh/lights/LightProbe",
					"methods": [],
					"properties": [
						"sh"
					]
				},

				"PointLight": {
					"url": "api/zh/lights/PointLight",
					"methods": [
						"copy"
					],
					"properties": [
						"decay",
						"distance",
						"power",
						"shadow"
					]
				},

				"RectAreaLight": {
					"url": "api/zh/lights/RectAreaLight",
					"methods": [
						"copy"
					],
					"properties": []
				},

				"SpotLight": {
					"url": "api/zh/lights/SpotLight",
					"methods": [
						"copy"
					],
					"properties": [
						"angle",
						"castShadow",
						"decay",
						"distance",
						"penumbra",
						"position",
						"power",
						"shadow",
						"target"
					]
				}
			},

			"灯光 / 阴影": {
				"LightShadow": {
					"url": "api/zh/lights/shadows/LightShadow",
					"methods": [
						"getFrameExtents",
						"updateMatrices",
						"getFrustum",
						"getViewportCount",
						"copy",
						"clone",
						"toJSON"
					],
					"properties": [
						"autoUpdate",
						"camera",
						"bias",
						"map",
						"mapPass",
						"mapSize",
						"matrix",
						"needsUpdate",
						"normalBias",
						"radius"
					]
				},

				"PointLightShadow": {
					"url": "api/zh/lights/shadows/PointLightShadow",
					"methods": [
						"updateMatrices"
					],
					"properties": []
				},

				"DirectionalLightShadow": {
					"url": "api/zh/lights/shadows/DirectionalLightShadow",
					"methods": [],
					"properties": [
						"camera"
					]
				},

				"SpotLightShadow": {
					"url": "api/zh/lights/shadows/SpotLightShadow",
					"methods": [],
					"properties": [
						"camera",
						"focus"
					]
				}
			},

			"加载器": {
				"AnimationLoader": {
					"url": "api/zh/loaders/AnimationLoader",
					"methods": [
						"load",
						"parse"
					],
					"properties": []
				},

				"AudioLoader": {
					"url": "api/zh/loaders/AudioLoader",
					"methods": [
						"load"
					],
					"properties": []
				},

				"BufferGeometryLoader": {
					"url": "api/zh/loaders/BufferGeometryLoader",
					"methods": [
						"load",
						"parse"
					],
					"properties": []
				},

				"Cache": {
					"url": "api/zh/loaders/Cache",
					"methods": [
						"add",
						"get",
						"remove",
						"clear"
					],
					"properties": [
						"enabled",
						"files"
					]
				},

				"CompressedTextureLoader": {
					"url": "api/zh/loaders/CompressedTextureLoader",
					"methods": [
						"load"
					],
					"properties": []
				},

				"CubeTextureLoader": {
					"url": "api/zh/loaders/CubeTextureLoader",
					"methods": [
						"load"
					],
					"properties": []
				},

				"DataTextureLoader": {
					"url": "api/zh/loaders/DataTextureLoader",
					"methods": [
						"load"
					],
					"properties": []
				},

				"FileLoader": {
					"url": "api/zh/loaders/FileLoader",
					"methods": [
						"load",
						"setMimeType",
						"setRequestHeader",
						"setResponseType",
						"setWithCredentials"
					],
					"properties": [
						"mimeType",
						"responseType",
						"withCredentials"
					]
				},

				"FontLoader": {
					"url": "api/zh/loaders/FontLoader",
					"methods": [
						"load",
						"parse"
					],
					"properties": []
				},

				"ImageBitmapLoader": {
					"url": "api/zh/loaders/ImageBitmapLoader",
					"methods": [
						"load",
						"setOptions"
					],
					"properties": [
						"options"
					]
				},

				"ImageLoader": {
					"url": "api/zh/loaders/ImageLoader",
					"methods": [
						"load"
					],
					"properties": []
				},

				"Loader": {
					"url": "api/zh/loaders/Loader",
					"methods": [
						"load",
						"loadAsync",
						"parse",
						"setCrossOrigin",
						"setPath",
						"setResourcePath",
						"setRequestHeader"
					],
					"properties": [
						"crossOrigin",
						"manager",
						"path",
						"resourcePath",
						"requestHeader"
					]
				},

				"LoaderUtils": {
					"url": "api/zh/loaders/LoaderUtils",
					"methods": [
						"decodeText",
						"extractUrlBase"
					],
					"properties": []
				},

				"MaterialLoader": {
					"url": "api/zh/loaders/MaterialLoader",
					"methods": [
						"load",
						"parse",
						"setTextures"
					],
					"properties": [
						"textures"
					]
				},

				"ObjectLoader": {
					"url": "api/zh/loaders/ObjectLoader",
					"methods": [
						"load",
						"parse",
						"parseGeometries",
						"parseMaterials",
						"parseAnimations",
						"parseImages",
						"parseTextures",
						"parseObject"
					],
					"properties": []
				},

				"TextureLoader": {
					"url": "api/zh/loaders/TextureLoader",
					"methods": [
						"load"
					],
					"properties": []
				}
			},

			"加载器 / 管理器": {
				"DefaultLoadingManager": {
					"url": "api/zh/loaders/managers/DefaultLoadingManager"
				},

				"LoadingManager": {
					"url": "api/zh/loaders/managers/LoadingManager",
					"methods": [
						"addHandler",
						"getHandler",
						"removeHandler",
						"resolveURL",
						"setURLModifier",
						"itemStart",
						"itemEnd",
						"itemError"
					],
					"properties": [
						"onStart",
						"onLoad",
						"onProgress",
						"onError"
					]
				}
			},

			"材质": {
				"LineBasicMaterial": {
					"url": "api/zh/materials/LineBasicMaterial",
					"methods": [],
					"properties": [
						"color",
						"linewidth",
						"linecap",
						"linejoin",
						"morphTargets"
					]
				},

				"LineDashedMaterial": {
					"url": "api/zh/materials/LineDashedMaterial",
					"methods": [],
					"properties": [
						"dashSize",
						"gapSize",
						"scale"
					]
				},

				"Material": {
					"url": "api/zh/materials/Material",
					"methods": [
						"clone",
						"copy",
						"dispose",
						"onBeforeCompile",
						"customProgramCacheKey",
						"setValues",
						"toJSON"
					],
					"properties": [
						"alphaTest",
						"alphaToCoverage",
						"blendDst",
						"blendDstAlpha",
						"blendEquation",
						"blendEquationAlpha",
						"blending",
						"blendSrc",
						"blendSrcAlpha",
						"clipIntersection",
						"clippingPlanes",
						"clipShadows",
						"colorWrite",
						"defines",
						"depthFunc",
						"depthTest",
						"depthWrite",
						"stencilWrite",
						"stencilWriteMask",
						"stencilFunc",
						"stencilRef",
						"stencilFuncMask",
						"stencilFail",
						"stencilZFail",
						"stencilZPass",
						"fog",
						"id",
						"name",
						"needsUpdate",
						"opacity",
						"polygonOffset",
						"polygonOffsetFactor",
						"polygonOffsetUnits",
						"precision",
						"premultipliedAlpha",
						"dithering",
						"shadowSide",
						"side",
						"toneMapped",
						"transparent",
						"type",
						"uuid",
						"version",
						"needsUpdate",
						"vertexColors",
						"visible",
						"userData"
					]
				},

				"MeshBasicMaterial": {
					"url": "api/zh/materials/MeshBasicMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"aoMap",
						"aoMapIntensity",
						"color",
						"combine",
						"envMap",
						"lightMap",
						"lightMapIntensity",
						"map",
						"morphTargets",
						"reflectivity",
						"refractionRatio",
						"specularMap",
						"wireframe",
						"wireframeLinecap",
						"wireframeLinejoin",
						"wireframeLinewidth"
					]
				},

				"MeshDepthMaterial": {
					"url": "api/zh/materials/MeshDepthMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"depthPacking",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"fog",
						"map",
						"morphTargets",
						"wireframe",
						"wireframeLinewidth"
					]
				},

				"MeshDistanceMaterial": {
					"url": "api/zh/materials/MeshDistanceMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"farDistance",
						"fog",
						"map",
						"morphTargets",
						"nearDistance",
						"referencePosition"
					]
				},

				"MeshLambertMaterial": {
					"url": "api/zh/materials/MeshLambertMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"aoMap",
						"aoMapIntensity",
						"color",
						"combine",
						"emissive",
						"emissiveMap",
						"emissiveIntensity",
						"envMap",
						"lightMap",
						"lightMapIntensity",
						"map",
						"morphNormals",
						"morphTargets",
						"reflectivity",
						"refractionRatio",
						"specularMap",
						"wireframe",
						"wireframeLinecap",
						"wireframeLinejoin",
						"wireframeLinewidth"
					]
				},

				"MeshMatcapMaterial": {
					"url": "api/zh/materials/MeshMatcapMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"bumpMap",
						"bumpScale",
						"color",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"flatShading",
						"map",
						"matcap",
						"morphNormals",
						"morphTargets",
						"normalMap",
						"normalMapType",
						"normalScale"
					]
				},

				"MeshNormalMaterial": {
					"url": "api/zh/materials/MeshNormalMaterial",
					"methods": [],
					"properties": [
						"bumpMap",
						"bumpScale",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"flatShading",
						"fog",
						"morphNormals",
						"morphTargets",
						"normalMap",
						"normalMapType",
						"normalScale",
						"wireframe",
						"wireframeLinewidth"
					]
				},

				"MeshPhongMaterial": {
					"url": "api/zh/materials/MeshPhongMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"aoMap",
						"aoMapIntensity",
						"bumpMap",
						"bumpScale",
						"color",
						"combine",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"emissive",
						"emissiveMap",
						"emissiveIntensity",
						"envMap",
						"flatShading",
						"lightMap",
						"lightMapIntensity",
						"map",
						"morphNormals",
						"morphTargets",
						"normalMap",
						"normalMapType",
						"normalScale",
						"reflectivity",
						"refractionRatio",
						"shininess",
						"specular",
						"specularMap",
						"wireframe",
						"wireframeLinecap",
						"wireframeLinejoin",
						"wireframeLinewidth"
					]
				},

				"MeshPhysicalMaterial": {
					"url": "api/zh/materials/MeshPhysicalMaterial",
					"methods": [],
					"properties": [
						"clearcoat",
						"clearcoatMap",
						"clearcoatNormalMap",
						"clearcoatNormalScale",
						"clearcoatRoughness",
						"clearcoatRoughnessMap",
						"defines",
						"ior",
						"reflectivity",
						"sheen",
						"transmission",
						"transmissionMap"
					]
				},

				"MeshStandardMaterial": {
					"url": "api/zh/materials/MeshStandardMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"aoMap",
						"aoMapIntensity",
						"bumpMap",
						"bumpScale",
						"color",
						"defines",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"emissive",
						"emissiveMap",
						"emissiveIntensity",
						"envMap",
						"envMapIntensity",
						"flatShading",
						"lightMap",
						"lightMapIntensity",
						"map",
						"metalness",
						"metalnessMap",
						"morphNormals",
						"morphTargets",
						"normalMap",
						"normalMapType",
						"normalScale",
						"refractionRatio",
						"roughness",
						"roughnessMap",
						"vertexTangents",
						"wireframe",
						"wireframeLinecap",
						"wireframeLinejoin",
						"wireframeLinewidth"
					]
				},

				"MeshToonMaterial": {
					"url": "api/zh/materials/MeshToonMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"aoMap",
						"aoMapIntensity",
						"bumpMap",
						"bumpScale",
						"color",
						"displacementMap",
						"displacementScale",
						"displacementBias",
						"emissive",
						"emissiveMap",
						"emissiveIntensity",
						"gradientMap",
						"lightMap",
						"lightMapIntensity",
						"map",
						"morphNormals",
						"morphTargets",
						"normalMap",
						"normalMapType",
						"normalScale",
						"wireframe",
						"wireframeLinecap",
						"wireframeLinejoin",
						"wireframeLinewidth"
					]
				},

				"PointsMaterial": {
					"url": "api/zh/materials/PointsMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"color",
						"map",
						"morphTargets",
						"size",
						"sizeAttenuation"
					]
				},

				"RawShaderMaterial": {
					"url": "api/zh/materials/RawShaderMaterial"
				},

				"ShaderMaterial": {
					"url": "api/zh/materials/ShaderMaterial",
					"methods": [
						"clone"
					],
					"properties": [
						"clipping",
						"defaultAttributeValues",
						"defines",
						"extensions",
						"fog",
						"fragmentShader",
						"glslVersion",
						"index0AttributeName",
						"lights",
						"linewidth",
						"morphTargets",
						"morphNormals",
						"flatShading",
						"uniforms",
						"uniformsNeedUpdate",
						"vertexColors",
						"vertexShader",
						"wireframe",
						"wireframeLinewidth"
					]
				},

				"ShadowMaterial": {
					"url": "api/zh/materials/ShadowMaterial",
					"methods": [],
					"properties": [
						"transparent"
					]
				},

				"SpriteMaterial": {
					"url": "api/zh/materials/SpriteMaterial",
					"methods": [],
					"properties": [
						"alphaMap",
						"color",
						"map",
						"rotation",
						"sizeAttenuation"
					]
				}
			},

			"数学库": {
				"Box2": {
					"url": "api/zh/math/Box2",
					"methods": [
						"clampPoint",
						"clone",
						"containsBox",
						"containsPoint",
						"copy",
						"distanceToPoint",
						"equals",
						"expandByPoint",
						"expandByScalar",
						"expandByVector",
						"getCenter",
						"getParameter",
						"getSize",
						"intersect",
						"intersectsBox",
						"isEmpty",
						"makeEmpty",
						"set",
						"setFromCenterAndSize",
						"setFromPoints",
						"translate",
						"union"
					],
					"properties": [
						"min",
						"max"
					]
				},

				"Box3": {
					"url": "api/zh/math/Box3",
					"methods": [
						"applyMatrix4",
						"clampPoint",
						"clone",
						"containsBox",
						"containsPoint",
						"copy",
						"distanceToPoint",
						"equals",
						"expandByObject",
						"expandByPoint",
						"expandByScalar",
						"expandByVector",
						"getBoundingSphere",
						"getCenter",
						"getParameter",
						"getSize",
						"intersect",
						"intersectsBox",
						"intersectsPlane",
						"intersectsSphere",
						"intersectsTriangle",
						"isEmpty",
						"makeEmpty",
						"set",
						"setFromArray",
						"setFromBufferAttribute",
						"setFromCenterAndSize",
						"setFromObject",
						"setFromPoints",
						"translate",
						"union"
					],
					"properties": [
						"min",
						"max"
					]
				},

				"Color": {
					"url": "api/zh/math/Color",
					"methods": [
						"add",
						"addColors",
						"addScalar",
						"clone",
						"copy",
						"convertGammaToLinear",
						"convertLinearToGamma",
						"convertLinearToSRGB",
						"convertSRGBToLinear",
						"copyGammaToLinear",
						"copyLinearToGamma",
						"copyLinearToSRGB",
						"copySRGBToLinear",
						"equals",
						"fromArray",
						"fromBufferAttribute",
						"getHex",
						"getHexString",
						"getHSL",
						"getStyle",
						"lerp",
						"lerpColors",
						"lerpHSL",
						"multiply",
						"multiplyScalar",
						"offsetHSL",
						"set",
						"setHex",
						"setHSL",
						"setRGB",
						"setScalar",
						"setStyle",
						"setColorName",
						"sub",
						"toArray"
					],
					"properties": [
						"r",
						"g",
						"b"
					]
				},

				"Cylindrical": {
					"url": "api/zh/math/Cylindrical",
					"methods": [
						"clone",
						"copy",
						"set",
						"setFromVector3",
						"setFromCartesianCoords"
					],
					"properties": [
						"radius",
						"theta",
						"y"
					]
				},

				"Euler": {
					"url": "api/zh/math/Euler",
					"methods": [
						"copy",
						"clone",
						"equals",
						"fromArray",
						"reorder",
						"set",
						"setFromRotationMatrix",
						"setFromQuaternion",
						"setFromVector3",
						"toArray",
						"toVector3"
					],
					"properties": [
						"order",
						"x",
						"y",
						"z"
					]
				},

				"Frustum": {
					"url": "api/zh/math/Frustum",
					"methods": [
						"clone",
						"containsPoint",
						"copy",
						"intersectsBox",
						"intersectsObject",
						"intersectsSphere",
						"intersectsSprite",
						"set",
						"setFromProjectionMatrix"
					],
					"properties": [
						"planes"
					]
				},

				"Interpolant": {
					"url": "api/zh/math/Interpolant",
					"methods": [
						"evaluate"
					],
					"properties": [
						"parameterPositions",
						"resultBuffer",
						"sampleValues",
						"settings",
						"valueSize"
					]
				},

				"Line3": {
					"url": "api/zh/math/Line3",
					"methods": [
						"applyMatrix4",
						"at",
						"clone",
						"closestPointToPoint",
						"closestPointToPointParameter",
						"copy",
						"delta",
						"distance",
						"distanceSq",
						"equals",
						"getCenter",
						"set"
					],
					"properties": [
						"start",
						"end"
					]
				},

				"MathUtils": {
					"url": "api/zh/math/MathUtils",
					"methods": [
						"clamp",
						"degToRad",
						"euclideanModulo",
						"generateUUID",
						"isPowerOfTwo",
						"inverseLerp",
						"lerp",
						"damp",
						"mapLinear",
						"pingpong",
						"ceilPowerOfTwo",
						"floorPowerOfTwo",
						"radToDeg",
						"randFloat",
						"randFloatSpread",
						"randInt",
						"seededRandom",
						"smoothstep",
						"smootherstep",
						"setQuaternionFromProperEuler"
					],
					"properties": []
				},

				"Matrix3": {
					"url": "api/zh/math/Matrix3",
					"methods": [
						"clone",
						"copy",
						"determinant",
						"equals",
						"extractBasis",
						"fromArray",
						"invert",
						"getNormalMatrix",
						"identity",
						"multiply",
						"multiplyMatrices",
						"multiplyScalar",
						"set",
						"premultiply",
						"setFromMatrix4",
						"setUvTransform",
						"toArray",
						"transpose",
						"transposeIntoArray"
					],
					"properties": [
						"elements"
					]
				},

				"Matrix4": {
					"url": "api/zh/math/Matrix4",
					"methods": [
						"clone",
						"compose",
						"copy",
						"copyPosition",
						"decompose",
						"determinant",
						"equals",
						"extractBasis",
						"extractRotation",
						"fromArray",
						"invert",
						"getMaxScaleOnAxis",
						"identity",
						"lookAt",
						"makeRotationAxis",
						"makeBasis",
						"makePerspective",
						"makeOrthographic",
						"makeRotationFromEuler",
						"makeRotationFromQuaternion",
						"makeRotationX",
						"makeRotationY",
						"makeRotationZ",
						"makeScale",
						"makeShear",
						"makeTranslation",
						"multiply",
						"multiplyMatrices",
						"multiplyScalar",
						"premultiply",
						"scale",
						"set",
						"setFromMatrix3",
						"setPosition",
						"setPosition",
						"toArray",
						"transpose"
					],
					"properties": [
						"elements"
					]
				},

				"Plane": {
					"url": "api/zh/math/Plane",
					"methods": [
						"applyMatrix4",
						"clone",
						"coplanarPoint",
						"copy",
						"distanceToPoint",
						"distanceToSphere",
						"equals",
						"intersectLine",
						"intersectsBox",
						"intersectsLine",
						"intersectsSphere",
						"negate",
						"normalize",
						"projectPoint",
						"set",
						"setComponents",
						"setFromCoplanarPoints",
						"setFromNormalAndCoplanarPoint",
						"translate"
					],
					"properties": [
						"normal",
						"constant"
					]
				},

				"Quaternion": {
					"url": "api/zh/math/Quaternion",
					"methods": [
						"angleTo",
						"clone",
						"conjugate",
						"copy",
						"equals",
						"dot",
						"fromArray",
						"identity",
						"invert",
						"length",
						"lengthSq",
						"normalize",
						"multiply",
						"multiplyQuaternions",
						"premultiply",
						"rotateTowards",
						"slerp",
						"slerpQuaternions",
						"set",
						"setFromAxisAngle",
						"setFromEuler",
						"setFromRotationMatrix",
						"setFromUnitVectors",
						"toArray",
						"fromBufferAttribute",
						"slerpFlat"
					],
					"properties": [
						"x",
						"y",
						"z",
						"w"
					]
				},

				"Ray": {
					"url": "api/zh/math/Ray",
					"methods": [
						"applyMatrix4",
						"at",
						"clone",
						"closestPointToPoint",
						"copy",
						"distanceSqToPoint",
						"distanceSqToSegment",
						"distanceToPlane",
						"distanceToPoint",
						"equals",
						"intersectBox",
						"intersectPlane",
						"intersectSphere",
						"intersectTriangle",
						"intersectsBox",
						"intersectsPlane",
						"intersectsSphere",
						"lookAt",
						"recast",
						"set"
					],
					"properties": [
						"origin",
						"direction"
					]
				},

				"Sphere": {
					"url": "api/zh/math/Sphere",
					"methods": [
						"applyMatrix4",
						"clampPoint",
						"clone",
						"containsPoint",
						"copy",
						"distanceToPoint",
						"expandByPoint",
						"isEmpty",
						"makeEmpty",
						"equals",
						"getBoundingBox",
						"intersectsBox",
						"intersectsPlane",
						"intersectsSphere",
						"set",
						"setFromPoints",
						"translate",
						"union"
					],
					"properties": [
						"center",
						"radius"
					]
				},

				"Spherical": {
					"url": "api/zh/math/Spherical",
					"methods": [
						"clone",
						"copy",
						"makeSafe",
						"set",
						"setFromVector3",
						"setFromCartesianCoords"
					],
					"properties": [
						"radius",
						"phi",
						"theta"
					]
				},

				"SphericalHarmonics3": {
					"url": "api/zh/math/SphericalHarmonics3",
					"methods": [
						"add",
						"addScaledSH",
						"clone",
						"copy",
						"equals",
						"fromArray",
						"getAt",
						"getIrradianceAt",
						"lerp",
						"scale",
						"set",
						"toArray",
						"zero",
						"getBasisAt"
					],
					"properties": [
						"coefficients"
					]
				},

				"Triangle": {
					"url": "api/zh/math/Triangle",
					"methods": [
						"clone",
						"closestPointToPoint",
						"containsPoint",
						"copy",
						"equals",
						"getArea",
						"getBarycoord",
						"getMidpoint",
						"getNormal",
						"getPlane",
						"intersectsBox",
						"set",
						"setFromPointsAndIndices"
					],
					"properties": [
						"a",
						"b",
						"c"
					]
				},

				"Vector2": {
					"url": "api/zh/math/Vector2",
					"methods": [
						"add",
						"addScalar",
						"addScaledVector",
						"addVectors",
						"angle",
						"applyMatrix3",
						"ceil",
						"clamp",
						"clampLength",
						"clampScalar",
						"clone",
						"copy",
						"distanceTo",
						"manhattanDistanceTo",
						"distanceToSquared",
						"divide",
						"divideScalar",
						"dot",
						"cross",
						"equals",
						"floor",
						"fromArray",
						"fromBufferAttribute",
						"getComponent",
						"length",
						"manhattanLength",
						"lengthSq",
						"lerp",
						"lerpVectors",
						"negate",
						"normalize",
						"max",
						"min",
						"multiply",
						"multiplyScalar",
						"rotateAround",
						"round",
						"roundToZero",
						"set",
						"setComponent",
						"setLength",
						"setScalar",
						"setX",
						"setY",
						"sub",
						"subScalar",
						"subVectors",
						"toArray",
						"random"
					],
					"properties": [
						"height",
						"width",
						"x",
						"y"
					]
				},

				"Vector3": {
					"url": "api/zh/math/Vector3",
					"methods": [
						"add",
						"addScalar",
						"addScaledVector",
						"addVectors",
						"applyAxisAngle",
						"applyEuler",
						"applyMatrix3",
						"applyMatrix4",
						"applyNormalMatrix",
						"applyQuaternion",
						"angleTo",
						"ceil",
						"clamp",
						"clampLength",
						"clampScalar",
						"clone",
						"copy",
						"cross",
						"crossVectors",
						"distanceTo",
						"manhattanDistanceTo",
						"distanceToSquared",
						"divide",
						"divideScalar",
						"dot",
						"equals",
						"floor",
						"fromArray",
						"fromBufferAttribute",
						"getComponent",
						"length",
						"manhattanLength",
						"lengthSq",
						"lerp",
						"lerpVectors",
						"max",
						"min",
						"multiply",
						"multiplyScalar",
						"multiplyVectors",
						"negate",
						"normalize",
						"project",
						"projectOnPlane",
						"projectOnVector",
						"reflect",
						"round",
						"roundToZero",
						"set",
						"setComponent",
						"setFromCylindrical",
						"setFromCylindricalCoords",
						"setFromMatrixColumn",
						"setFromMatrix3Column",
						"setFromMatrixPosition",
						"setFromMatrixScale",
						"setFromSpherical",
						"setFromSphericalCoords",
						"setLength",
						"setScalar",
						"setX",
						"setY",
						"setZ",
						"sub",
						"subScalar",
						"subVectors",
						"toArray",
						"transformDirection",
						"unproject",
						"random"
					],
					"properties": [
						"x",
						"y",
						"z"
					]
				},

				"Vector4": {
					"url": "api/zh/math/Vector4",
					"methods": [
						"add",
						"addScalar",
						"addScaledVector",
						"addVectors",
						"applyMatrix4",
						"ceil",
						"clamp",
						"clampLength",
						"clampScalar",
						"clone",
						"copy",
						"divideScalar",
						"dot",
						"equals",
						"floor",
						"fromArray",
						"fromBufferAttribute",
						"getComponent",
						"length",
						"manhattanLength",
						"lengthSq",
						"lerp",
						"lerpVectors",
						"negate",
						"normalize",
						"max",
						"min",
						"multiply",
						"multiplyScalar",
						"round",
						"roundToZero",
						"set",
						"setAxisAngleFromQuaternion",
						"setAxisAngleFromRotationMatrix",
						"setComponent",
						"setLength",
						"setScalar",
						"setX",
						"setY",
						"setZ",
						"setW",
						"sub",
						"subScalar",
						"subVectors",
						"toArray",
						"random"
					],
					"properties": [
						"x",
						"y",
						"z",
						"w",
						"width",
						"height"
					]
				}
			},

			"数学库 / 插值": {
				"CubicInterpolant": {
					"url": "api/zh/math/interpolants/CubicInterpolant",
					"methods": [
						"evaluate"
					],
					"properties": [
						"parameterPositions",
						"resultBuffer",
						"sampleValues",
						"settings",
						"valueSize"
					]
				},

				"DiscreteInterpolant": {
					"url": "api/zh/math/interpolants/DiscreteInterpolant",
					"methods": [
						"evaluate"
					],
					"properties": [
						"parameterPositions",
						"resultBuffer",
						"sampleValues",
						"settings",
						"valueSize"
					]
				},

				"LinearInterpolant": {
					"url": "api/zh/math/interpolants/LinearInterpolant",
					"methods": [
						"evaluate"
					],
					"properties": [
						"parameterPositions",
						"resultBuffer",
						"sampleValues",
						"settings",
						"valueSize"
					]
				},

				"QuaternionLinearInterpolant": {
					"url": "api/zh/math/interpolants/QuaternionLinearInterpolant",
					"methods": [
						"evaluate"
					],
					"properties": [
						"parameterPositions",
						"resultBuffer",
						"sampleValues",
						"settings",
						"valueSize"
					]
				}
			},

			"物体": {
				"Bone": {
					"url": "api/zh/objects/Bone",
					"methods": [],
					"properties": [
						"type"
					]
				},

				"Group": {
					"url": "api/zh/objects/Group",
					"methods": [],
					"properties": [
						"type"
					]
				},

				"InstancedMesh": {
					"url": "api/zh/objects/InstancedMesh",
					"methods": [
						"dispose",
						"getColorAt",
						"getMatrixAt",
						"setColorAt",
						"setMatrixAt"
					],
					"properties": [
						"count",
						"instanceColor",
						"instanceMatrix"
					]
				},

				"Line": {
					"url": "api/zh/objects/Line",
					"methods": [
						"computeLineDistances",
						"raycast",
						"clone",
						"updateMorphTargets"
					],
					"properties": [
						"geometry",
						"material",
						"morphTargetInfluences",
						"morphTargetDictionary"
					]
				},

				"LineLoop": {
					"url": "api/zh/objects/LineLoop"
				},

				"LineSegments": {
					"url": "api/zh/objects/LineSegments"
				},

				"LOD": {
					"url": "api/zh/objects/LOD",
					"methods": [
						"addLevel",
						"clone",
						"getCurrentLevel",
						"getObjectForDistance",
						"raycast",
						"toJSON",
						"update"
					],
					"properties": [
						"autoUpdate",
						"levels"
					]
				},

				"Mesh": {
					"url": "api/zh/objects/Mesh",
					"methods": [
						"clone",
						"raycast",
						"updateMorphTargets"
					],
					"properties": [
						"geometry",
						"material",
						"morphTargetInfluences",
						"morphTargetDictionary"
					]
				},

				"Points": {
					"url": "api/zh/objects/Points",
					"methods": [
						"raycast",
						"clone",
						"updateMorphTargets"
					],
					"properties": [
						"geometry",
						"material",
						"morphTargetInfluences",
						"morphTargetDictionary"
					]
				},

				"Skeleton": {
					"url": "api/zh/objects/Skeleton",
					"methods": [
						"clone",
						"calculateInverses",
						"computeBoneTexture",
						"pose",
						"update",
						"getBoneByName",
						"dispose"
					],
					"properties": [
						"bones",
						"boneInverses",
						"boneMatrices",
						"boneTexture",
						"boneTextureSize"
					]
				},

				"SkinnedMesh": {
					"url": "api/zh/objects/SkinnedMesh",
					"methods": [
						"bind",
						"clone",
						"normalizeSkinWeights",
						"pose",
						"updateMatrixWorld"
					],
					"properties": [
						"bindMode",
						"bindMatrix",
						"bindMatrixInverse",
						"skeleton"
					]
				},

				"Sprite": {
					"url": "api/zh/objects/Sprite",
					"methods": [
						"clone",
						"copy",
						"raycast"
					],
					"properties": [
						"material",
						"center"
					]
				}
			},

			"渲染器": {
				"WebGLMultipleRenderTargets": {
					"url": "api/zh/renderers/WebGLMultipleRenderTargets",
					"methods": [],
					"properties": [
						"texture"
					]
				},

				"WebGLMultisampleRenderTarget": {
					"url": "api/zh/renderers/WebGLMultisampleRenderTarget",
					"methods": [],
					"properties": [
						"samples"
					]
				},

				"WebGLRenderer": {
					"url": "api/zh/renderers/WebGLRenderer",
					"methods": [
						"clear",
						"clearColor",
						"clearDepth",
						"clearStencil",
						"clearTarget",
						"compile",
						"copyFramebufferToTexture",
						"copyTextureToTexture",
						"dispose",
						"forceContextLoss",
						"getClearAlpha",
						"getClearColor",
						"getContext",
						"getContextAttributes",
						"getActiveCubeFace",
						"getActiveMipmapLevel",
						"getRenderTarget",
						"getCurrentViewport",
						"getDrawingBufferSize",
						"getPixelRatio",
						"getSize",
						"initTexture",
						"resetGLState",
						"readRenderTargetPixels",
						"render",
						"renderBufferDirect",
						"renderBufferImmediate",
						"resetState",
						"setAnimationLoop",
						"setClearAlpha",
						"setClearColor",
						"setPixelRatio",
						"setRenderTarget",
						"setScissor",
						"setScissorTest",
						"setSize",
						"setViewport"
					],
					"properties": [
						"autoClear",
						"autoClearColor",
						"autoClearDepth",
						"autoClearStencil",
						"capabilities",
						"maxVertexTextures",
						"clippingPlanes",
						"domElement",
						"extensions",
						"gammaFactor",
						"outputEncoding",
						"info",
						"localClippingEnabled",
						"physicallyCorrectLights",
						"properties",
						"renderLists",
						"shadowMap",
						"sortObjects",
						"state",
						"toneMapping",
						"toneMappingExposure",
						"xr"
					]
				},

				"WebGL1Renderer": {
					"url": "api/zh/renderers/WebGL1Renderer"
				},

				"WebGLRenderTarget": {
					"url": "api/zh/renderers/WebGLRenderTarget",
					"methods": [
						"setSize",
						"clone",
						"copy",
						"dispose"
					],
					"properties": [
						"width",
						"height",
						"scissor",
						"scissorTest",
						"viewport",
						"texture",
						"depthBuffer",
						"stencilBuffer",
						"depthTexture"
					]
				},

				"WebGLCubeRenderTarget": {
					"url": "api/zh/renderers/WebGLCubeRenderTarget",
					"methods": [
						"fromEquirectangularTexture",
						"clear"
					],
					"properties": []
				}
			},

			"渲染器 / 着色器": {
				"ShaderChunk": {
					"url": "api/zh/renderers/shaders/ShaderChunk"
				},

				"ShaderLib": {
					"url": "api/zh/renderers/shaders/ShaderLib"
				},

				"UniformsLib": {
					"url": "api/zh/renderers/shaders/UniformsLib"
				},

				"UniformsUtils": {
					"url": "api/zh/renderers/shaders/UniformsUtils",
					"methods": [
						"clone",
						"merge"
					],
					"properties": []
				}
			},

			"渲染器 / WebXR": {
				"WebXRManager": {
					"url": "api/zh/renderers/webxr/WebXRManager",
					"methods": [
						"getController",
						"getControllerGrip",
						"setFramebufferScaleFactor",
						"setReferenceSpaceType"
					],
					"properties": [
						"enabled",
						"isPresenting"
					]
				}
			},

			"场景": {
				"Fog": {
					"url": "api/zh/scenes/Fog",
					"methods": [
						"clone",
						"toJSON"
					],
					"properties": [
						"name",
						"color",
						"near",
						"far"
					]
				},

				"FogExp2": {
					"url": "api/zh/scenes/FogExp2",
					"methods": [
						"clone",
						"toJSON"
					],
					"properties": [
						"name",
						"color",
						"density"
					]
				},

				"Scene": {
					"url": "api/zh/scenes/Scene",
					"methods": [
						"toJSON"
					],
					"properties": [
						"autoUpdate",
						"background",
						"environment",
						"fog",
						"overrideMaterial"
					]
				}
			},

			"纹理贴图": {
				"CanvasTexture": {
					"url": "api/zh/textures/CanvasTexture",
					"methods": [],
					"properties": [
						"needsUpdate"
					]
				},

				"CompressedTexture": {
					"url": "api/zh/textures/CompressedTexture",
					"methods": [],
					"properties": [
						"flipY",
						"generateMipmaps"
					]
				},

				"CubeTexture": {
					"url": "api/zh/textures/CubeTexture"
				},

				"DataTexture": {
					"url": "api/zh/textures/DataTexture",
					"methods": [],
					"properties": [
						"image"
					]
				},

				"DataTexture2DArray": {
					"url": "api/zh/textures/DataTexture2DArray",
					"methods": [],
					"properties": [
						"image"
					]
				},

				"DataTexture3D": {
					"url": "api/zh/textures/DataTexture3D",
					"methods": [],
					"properties": [
						"wrapR"
					]
				},

				"DepthTexture": {
					"url": "api/zh/textures/DepthTexture"
				},

				"Texture": {
					"url": "api/zh/textures/Texture",
					"methods": [
						"updateMatrix",
						"clone",
						"toJSON",
						"dispose",
						"transformUv"
					],
					"properties": [
						"id",
						"uuid",
						"name",
						"image",
						"mipmaps",
						"mapping",
						"wrapS",
						"wrapT",
						"wrapS",
						"magFilter",
						"minFilter",
						"anisotropy",
						"format",
						"internalFormat",
						"type",
						"offset",
						"repeat",
						"rotation",
						"center",
						"matrixAutoUpdate",
						"matrix",
						"generateMipmaps",
						"premultiplyAlpha",
						"flipY",
						"unpackAlignment",
						"encoding",
						"version",
						"needsUpdate",
						"onUpdate",
						"needsUpdate"
					]
				},

				"VideoTexture": {
					"url": "api/zh/textures/VideoTexture",
					"methods": [
						"update"
					],
					"properties": [
						"needsUpdate",
						"needsUpdate"
					]
				}
			}
		},

		"示例": {
			"动画": {
				"CCDIKSolver": {
					"url": "examples/zh/animations/CCDIKSolver",
					"methods": [
						"createHelper",
						"update",
						"updateOne"
					],
					"properties": [
						"iks",
						"mesh"
					]
				},

				"MMDAnimationHelper": {
					"url": "examples/zh/animations/MMDAnimationHelper",
					"methods": [
						"add",
						"enable",
						"pose",
						"remove",
						"update"
					],
					"properties": [
						"audio",
						"camera",
						"meshes",
						"objects",
						"onBeforePhysics"
					]
				},

				"MMDPhysics": {
					"url": "examples/zh/animations/MMDPhysics",
					"methods": [
						"createHelper",
						"reset",
						"setGravity",
						"update",
						"warmup"
					],
					"properties": [
						"mesh"
					]
				}
			},

			"控制": {
				"DeviceOrientationControls": {
					"url": "examples/zh/controls/DeviceOrientationControls",
					"methods": [
						"connect",
						"disconnect",
						"dispose",
						"update"
					],
					"properties": [
						"alphaOffset",
						"deviceOrientation",
						"enabled",
						"object",
						"screenOrientation"
					]
				},

				"DragControls": {
					"url": "examples/zh/controls/DragControls",
					"methods": [
						"activate",
						"deactivate",
						"dispose",
						"getObjects"
					],
					"properties": [
						"enabled",
						"transformGroup"
					]
				},

				"FirstPersonControls": {
					"url": "examples/zh/controls/FirstPersonControls",
					"methods": [
						"dispose",
						"handleResize",
						"lookAt",
						"lookAt",
						"update"
					],
					"properties": [
						"activeLook",
						"autoForward",
						"constrainVertical",
						"domElement",
						"enabled",
						"heightCoef",
						"heightMax",
						"heightMin",
						"heightSpeed",
						"lookVertical",
						"lookSpeed",
						"mouseDragOn",
						"movementSpeed",
						"object",
						"verticalMax",
						"verticalMin"
					]
				},

				"FlyControls": {
					"url": "examples/zh/controls/FlyControls",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"autoForward",
						"domElement",
						"dragToLook",
						"movementSpeed",
						"object",
						"rollSpeed"
					]
				},

				"OrbitControls": {
					"url": "examples/zh/controls/OrbitControls",
					"methods": [
						"dispose",
						"getAzimuthalAngle",
						"getPolarAngle",
						"listenToKeyEvents",
						"reset",
						"saveState",
						"update"
					],
					"properties": [
						"autoRotate",
						"autoRotateSpeed",
						"dampingFactor",
						"domElement",
						"enabled",
						"enableDamping",
						"enablePan",
						"enableRotate",
						"enableZoom",
						"keyPanSpeed",
						"keys",
						"maxAzimuthAngle",
						"maxDistance",
						"maxPolarAngle",
						"maxZoom",
						"minAzimuthAngle",
						"minDistance",
						"minPolarAngle",
						"minZoom",
						"mouseButtons",
						"object",
						"panSpeed",
						"position0",
						"rotateSpeed",
						"screenSpacePanning",
						"target0",
						"target",
						"touches",
						"zoom0",
						"zoomSpeed"
					]
				},

				"PointerLockControls": {
					"url": "examples/zh/controls/PointerLockControls",
					"methods": [
						"connect",
						"disconnect",
						"getDirection",
						"lock",
						"moveForward",
						"moveRight",
						"unlock"
					],
					"properties": [
						"domElement",
						"isLocked",
						"maxPolarAngle",
						"minPolarAngle"
					]
				},

				"TrackballControls": {
					"url": "examples/zh/controls/TrackballControls",
					"methods": [
						"checkDistances",
						"dispose",
						"handleResize",
						"panCamera",
						"reset",
						"rotateCamera",
						"update",
						"zoomCamera"
					],
					"properties": [
						"domElement",
						"dynamicDampingFactor",
						"enabled",
						"keys",
						"maxDistance",
						"minDistance",
						"mouseButtons",
						"noPan",
						"noRotate",
						"noZoom",
						"object",
						"panSpeed",
						"rotateSpeed",
						"screen",
						"staticMoving",
						"zoomSpeed"
					]
				},

				"TransformControls": {
					"url": "examples/zh/controls/TransformControls",
					"methods": [
						"attach",
						"detach",
						"dispose",
						"getMode",
						"setMode",
						"setRotationSnap",
						"setSize",
						"setSpace",
						"setTranslationSnap"
					],
					"properties": [
						"axis",
						"camera",
						"domElement",
						"dragging",
						"enabled",
						"mode",
						"object",
						"rotationSnap",
						"showX",
						"showY",
						"showZ",
						"size",
						"space",
						"translationSnap"
					]
				}
			},

			"几何体": {
				"ConvexGeometry": {
					"url": "examples/zh/geometries/ConvexGeometry"
				},

				"DecalGeometry": {
					"url": "examples/zh/geometries/DecalGeometry"
				}
			},

			"辅助对象": {
				"LightProbeHelper": {
					"url": "examples/zh/helpers/LightProbeHelper",
					"methods": [
						"dispose"
					],
					"properties": [
						"lightProbe",
						"size"
					]
				},

				"PositionalAudioHelper": {
					"url": "examples/zh/helpers/PositionalAudioHelper",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"audio",
						"range",
						"divisionsInnerAngle",
						"divisionsOuterAngle"
					]
				},

				"RectAreaLightHelper": {
					"url": "examples/zh/helpers/RectAreaLightHelper",
					"methods": [
						"dispose"
					],
					"properties": [
						"light",
						"color"
					]
				},

				"VertexNormalsHelper": {
					"url": "examples/zh/helpers/VertexNormalsHelper",
					"methods": [
						"update"
					],
					"properties": [
						"matrixAutoUpdate",
						"object",
						"size"
					]
				},

				"VertexTangentsHelper": {
					"url": "examples/zh/helpers/VertexTangentsHelper",
					"methods": [
						"update"
					],
					"properties": [
						"matrixAutoUpdate",
						"object",
						"size"
					]
				}
			},

			"灯光": {
				"LightProbeGenerator": {
					"url": "examples/zh/lights/LightProbeGenerator",
					"methods": [
						"fromCubeTexture",
						"fromCubeRenderTarget"
					],
					"properties": []
				}
			},

			"加载器": {
				"BasisTextureLoader": {
					"url": "examples/zh/loaders/BasisTextureLoader",
					"methods": [
						"load",
						"detectSupport",
						"setTranscoderPath",
						"setWorkerLimit",
						"dispose"
					],
					"properties": []
				},

				"DRACOLoader": {
					"url": "examples/zh/loaders/DRACOLoader",
					"methods": [
						"load",
						"setDecoderPath",
						"setDecoderConfig",
						"setWorkerLimit",
						"preload",
						"dispose"
					],
					"properties": []
				},

				"GLTFLoader": {
					"url": "examples/zh/loaders/GLTFLoader",
					"methods": [
						"load",
						"setDRACOLoader",
						"parse"
					],
					"properties": []
				},

				"MMDLoader": {
					"url": "examples/zh/loaders/MMDLoader",
					"methods": [
						"load",
						"loadAnimation",
						"loadWithAnimation",
						"setAnimationPath"
					],
					"properties": []
				},

				"MTLLoader": {
					"url": "examples/zh/loaders/MTLLoader",
					"methods": [
						"load",
						"setMaterialOptions",
						"parse"
					],
					"properties": []
				},

				"OBJLoader": {
					"url": "examples/zh/loaders/OBJLoader",
					"methods": [
						"load",
						"parse",
						"setMaterials"
					],
					"properties": []
				},

				"PCDLoader": {
					"url": "examples/zh/loaders/PCDLoader",
					"methods": [
						"load",
						"parse"
					],
					"properties": []
				},

				"PDBLoader": {
					"url": "examples/zh/loaders/PDBLoader",
					"methods": [
						"load",
						"parse"
					],
					"properties": []
				},

				"PRWMLoader": {
					"url": "examples/zh/loaders/PRWMLoader",
					"methods": [
						"load",
						"parse"
					],
					"properties": []
				},

				"SVGLoader": {
					"url": "examples/zh/loaders/SVGLoader",
					"methods": [
						"load",
						"createShapes"
					],
					"properties": []
				},

				"TGALoader": {
					"url": "examples/zh/loaders/TGALoader",
					"methods": [
						"load"
					],
					"properties": []
				}
			},

			"物体": {
				"Lensflare": {
					"url": "examples/zh/objects/Lensflare"
				}
			},

			"后期处理": {
				"EffectComposer": {
					"url": "examples/zh/postprocessing/EffectComposer",
					"methods": [
						"addPass",
						"insertPass",
						"isLastEnabledPass",
						"removePass",
						"render",
						"reset",
						"setPixelRatio",
						"setSize",
						"swapBuffers"
					],
					"properties": [
						"passes",
						"readBuffer",
						"renderer",
						"renderToScreen",
						"writeBuffer"
					]
				}
			},

			"导出器": {
				"GLTFExporter": {
					"url": "examples/zh/exporters/GLTFExporter",
					"methods": [
						"parse"
					],
					"properties": []
				},

				"PLYExporter": {
					"url": "examples/zh/exporters/PLYExporter",
					"methods": [
						"parse"
					],
					"properties": []
				},

				"ColladaExporter": {
					"url": "examples/zh/exporters/ColladaExporter",
					"methods": [
						"parse"
					],
					"properties": []
				}
			},

			"数学库": {
				"LookupTable": {
					"url": "examples/zh/math/Lut",
					"methods": [
						"copy",
						"setMin",
						"setMax",
						"changeNumberOfColors",
						"changeColorMap",
						"addColorMap",
						"getColor"
					],
					"properties": [
						"minV",
						"maxV"
					]
				},

				"MeshSurfaceSampler": {
					"url": "examples/zh/math/MeshSurfaceSampler",
					"methods": [
						"setWeightAttribute",
						"build",
						"sample"
					],
					"properties": []
				},

				"OBB": {
					"url": "examples/en/math/OBB",
					"methods": [
						"applyMatrix4",
						"clampPoint",
						"clone",
						"containsPoint",
						"copy",
						"equals",
						"fromBox3",
						"getSize",
						"intersectsBox3",
						"intersectsSphere",
						"intersectsOBB",
						"intersectsRay",
						"intersectRay",
						"set"
					],
					"properties": [
						"center",
						"halfSize",
						"rotation"
					]
				}
			},

			"QuickHull": {
				"Face": {
					"url": "examples/zh/math/convexhull/Face",
					"methods": [
						"create",
						"getEdge",
						"compute",
						"distanceToPoint"
					],
					"properties": [
						"normal",
						"midpoint",
						"area",
						"constant",
						"outside",
						"mark",
						"edge"
					]
				},

				"HalfEdge": {
					"url": "examples/zh/math/convexhull/HalfEdge",
					"methods": [
						"head",
						"tail",
						"length",
						"lengthSquared",
						"setTwin"
					],
					"properties": [
						"vertex",
						"prev",
						"next",
						"twin",
						"face"
					]
				},

				"ConvexHull": {
					"url": "examples/zh/math/convexhull/ConvexHull",
					"methods": [
						"addAdjoiningFace",
						"addNewFaces",
						"addVertexToFace",
						"addVertexToHull",
						"cleanup",
						"compute",
						"computeExtremes",
						"computeHorizon",
						"computeInitialHull",
						"containsPoint",
						"deleteFaceVertices",
						"intersectRay",
						"intersectsRay",
						"makeEmpty",
						"nextVertexToAdd",
						"reindexFaces",
						"removeAllVerticesFromFace",
						"removeVertexFromFace",
						"resolveUnassignedPoints",
						"setFromObject",
						"setFromPoints"
					],
					"properties": [
						"assigned",
						"faces",
						"newFaces",
						"tolerance",
						"unassigned",
						"vertices"
					]
				},

				"VertexNode": {
					"url": "examples/zh/math/convexhull/VertexNode",
					"methods": [],
					"properties": [
						"point",
						"prev",
						"next",
						"face"
					]
				},

				"VertexList": {
					"url": "examples/zh/math/convexhull/VertexList",
					"methods": [
						"first",
						"last",
						"clear",
						"insertBefore",
						"insertAfter",
						"append",
						"appendChain",
						"remove",
						"removeSubList",
						"isEmpty"
					],
					"properties": [
						"head",
						"tail"
					]
				}
			},

			"渲染器": {
				"CSS2DRenderer": {
					"url": "examples/zh/renderers/CSS2DRenderer",
					"methods": [
						"getSize",
						"render",
						"setSize"
					],
					"properties": []
				},

				"CSS3DRenderer": {
					"url": "examples/zh/renderers/CSS3DRenderer",
					"methods": [
						"getSize",
						"render",
						"setSize"
					],
					"properties": []
				},

				"SVGRenderer": {
					"url": "examples/zh/renderers/SVGRenderer",
					"methods": [
						"clear",
						"getSize",
						"render",
						"setClearColor",
						"setPrecision",
						"setQuality",
						"setSize"
					],
					"properties": []
				}
			},

			"实用工具": {
				"BufferGeometryUtils": {
					"url": "examples/zh/utils/BufferGeometryUtils",
					"methods": [
						"mergeBufferGeometries",
						"mergeBufferAttributes",
						"interleaveAttributes",
						"estimateBytesUsed",
						"mergeVertices",
						"toTrianglesDrawMode"
					],
					"properties": []
				},

				"SceneUtils": {
					"url": "examples/zh/utils/SceneUtils",
					"methods": [
						"createMeshesFromInstancedMesh",
						"createMultiMaterialObject"
					],
					"properties": []
				},

				"SkeletonUtils": {
					"url": "examples/zh/utils/SkeletonUtils",
					"methods": [
						"clone",
						"findBoneTrackData",
						"getBoneByName",
						"getBones",
						"getEqualsBonesNames",
						"getHelperFromSkeleton",
						"getNearestBone",
						"getSkeletonOffsets",
						"renameBones",
						"retarget",
						"retargetClip"
					],
					"properties": []
				}
			}
		},

		"开发者参考": {
			"差异化支持": {
				"Polyfills": {
					"url": "api/zh/Polyfills"
				}
			},

			"WebGL渲染器": {
				"WebGLProgram": {
					"url": "api/zh/renderers/webgl/WebGLProgram",
					"methods": [
						"getUniforms",
						"getAttributes",
						"destroy"
					],
					"properties": [
						"name",
						"id",
						"cacheKey",
						"usedTimes",
						"program",
						"vertexShader",
						"fragmentShader"
					]
				},

				"WebGLShader": {
					"url": "api/zh/renderers/webgl/WebGLShader"
				},

				"WebGLState": {
					"url": "api/zh/renderers/webgl/WebGLState",
					"methods": [
						"enable",
						"disable",
						"setDepthTest",
						"setDepthWrite",
						"setBlending"
					],
					"properties": []
				}
			}
		}
	},

	"ko": {
		"매뉴얼": {
			"시작하기": {
				"장면 만들기": {
					"url": "manual/ko/introduction/Creating-a-scene"
				},

				"설치": {
					"url": "manual/ko/introduction/Installation"
				},

				"WebGL 호환성 검사": {
					"url": "manual/ko/introduction/WebGL-compatibility-check"
				},

				"로컬 환경에서 구동 방법": {
					"url": "manual/ko/introduction/How-to-run-things-locally"
				},

				"선 그리기": {
					"url": "manual/ko/introduction/Drawing-lines"
				},

				"텍스트 만들기": {
					"url": "manual/ko/introduction/Creating-text"
				},

				"3D 모델 불러오기": {
					"url": "manual/ko/introduction/Loading-3D-models"
				},

				"FAQ": {
					"url": "manual/ko/introduction/FAQ"
				},

				"참고 링크": {
					"url": "manual/ko/introduction/Useful-links"
				}
			},

			"심화 과정": {
				"오브젝트를 업데이트하는 방법": {
					"url": "manual/ko/introduction/How-to-update-things"
				},

				"오브젝트를 폐기하는 방법": {
					"url": "manual/ko/introduction/How-to-dispose-of-objects"
				},

				"VR 컨텐츠를 만드는 방법": {
					"url": "manual/ko/introduction/How-to-create-VR-content"
				},

				"후처리 사용 방법": {
					"url": "manual/ko/introduction/How-to-use-post-processing"
				},

				"행렬 변환": {
					"url": "manual/ko/introduction/Matrix-transformations"
				},

				"애니메이션 시스템": {
					"url": "manual/ko/introduction/Animation-system"
				}
			},

			"빌드 도구": {
				"NPM 테스트": {
					"url": "manual/ko/buildTools/Testing-with-NPM"
				}
			}
		},

		"레퍼런스": {
			"애니메이션": {
				"AnimationAction": {
					"url": "api/ko/animation/AnimationAction",
					"methods": [
						"crossFadeFrom",
						"crossFadeTo",
						"fadeIn",
						"fadeOut",
						"getEffectiveTimeScale",
						"getEffectiveWeight",
						"getClip",
						"getMixer",
						"getRoot",
						"halt",
						"isRunning",
						"isScheduled",
						"play",
						"reset",
						"setDuration",
						"setEffectiveTimeScale",
						"setEffectiveWeight",
						"setLoop",
						"startAt",
						"stop",
						"stopFading",
						"stopWarping",
						"syncWith",
						"warp"
					],
					"properties": [
						"clampWhenFinished",
						"enabled",
						"loop",
						"time",
						"timeScale",
						"weight",
						"zeroSlopeAtEnd",
						"zeroSlopeAtStart"
					]
				},

				"AnimationClip": {
					"url": "api/ko/animation/AnimationClip",
					"methods": [
						"clone",
						"optimize",
						"resetDuration",
						"toJSON",
						"trim",
						"validate",
						"CreateClipsFromMorphTargetSequences",
						"CreateFromMorphTargetSequence",
						"findByName",
						"parse",
						"parseAnimation",
						"toJSON"
					],
					"properties": [
						"duration",
						"name",
						"tracks",
						"uuid"
					]
				},

				"AnimationMixer": {
					"url": "api/ko/animation/AnimationMixer",
					"methods": [
						"clipAction",
						"existingAction",
						"getRoot",
						"stopAllAction",
						"update",
						"setTime",
						"uncacheClip",
						"uncacheRoot",
						"uncacheAction"
					],
					"properties": [
						"time",
						"timeScale"
					]
				},

				"AnimationObjectGroup": {
					"url": "api/ko/animation/AnimationObjectGroup",
					"methods": [
						"add",
						"remove",
						"uncache"
					],
					"properties": [
						"stats",
						"uuid"
					]
				},

				"AnimationUtils": {
					"url": "api/ko/animation/AnimationUtils",
					"methods": [
						"arraySlice",
						"convertArray",
						"flattenJSON",
						"getKeyframeOrder",
						"isTypedArray",
						"sortedArray",
						"subclip"
					],
					"properties": []
				},

				"KeyframeTrack": {
					"url": "api/ko/animation/KeyframeTrack",
					"methods": [
						"clone",
						"createInterpolant",
						"getInterpolation",
						"getValueSize",
						"InterpolantFactoryMethodDiscrete",
						"InterpolantFactoryMethodLinear",
						"InterpolantFactoryMethodSmooth",
						"optimize",
						"scale",
						"setInterpolation",
						"shift",
						"trim",
						"validate",
						"toJSON"
					],
					"properties": [
						"name",
						"times",
						"values",
						"DefaultInterpolation",
						"TimeBufferType ",
						"ValueBufferType "
					]
				},

				"PropertyBinding": {
					"url": "api/ko/animation/PropertyBinding",
					"methods": [
						"getValue",
						"setValue",
						"bind",
						"unbind",
						"Composite",
						"create",
						"parseTrackName",
						"findNode"
					],
					"properties": [
						"path",
						"parsedPath",
						"node",
						"rootNode",
						"BindingType",
						"Versioning",
						"GetterByBindingType",
						"SetterByBindingTypeAndVersioning"
					]
				},

				"PropertyMixer": {
					"url": "api/ko/animation/PropertyMixer",
					"methods": [
						"accumulate",
						"apply",
						"saveOriginalState",
						"restoreOriginalState"
					],
					"properties": [
						"binding",
						"buffer",
						"cumulativeWeight",
						"valueSize",
						"referenceCount",
						"useCount"
					]
				}
			},

			"애니메이션 / 트랙": {
				"BooleanKeyframeTrack": {
					"url": "api/ko/animation/tracks/BooleanKeyframeTrack",
					"methods": [
						"InterpolantFactoryMethodLinear ",
						"InterpolantFactoryMethodSmooth "
					],
					"properties": [
						"DefaultInterpolation",
						"ValueBufferType",
						"ValueTypeName"
					]
				},

				"ColorKeyframeTrack": {
					"url": "api/ko/animation/tracks/ColorKeyframeTrack",
					"methods": [],
					"properties": [
						"ValueTypeName"
					]
				},

				"NumberKeyframeTrack": {
					"url": "api/ko/animation/tracks/NumberKeyframeTrack",
					"methods": [],
					"properties": [
						"ValueTypeName"
					]
				},

				"QuaternionKeyframeTrack": {
					"url": "api/ko/animation/tracks/QuaternionKeyframeTrack",
					"methods": [
						"InterpolantFactoryMethodLinear"
					],
					"properties": [
						"DefaultInterpolation",
						"ValueTypeName"
					]
				},

				"StringKeyframeTrack": {
					"url": "api/ko/animation/tracks/StringKeyframeTrack",
					"methods": [
						"InterpolantFactoryMethodLinear",
						"InterpolantFactoryMethodSmooth"
					],
					"properties": [
						"DefaultInterpolation",
						"ValueTypeName"
					]
				},

				"VectorKeyframeTrack": {
					"url": "api/ko/animation/tracks/VectorKeyframeTrack",
					"methods": [],
					"properties": [
						"ValueTypeName"
					]
				}
			},

			"오디오": {
				"Audio": {
					"url": "api/ko/audio/Audio",
					"methods": [
						"connect",
						"disconnect",
						"getFilter",
						"getFilters",
						"getLoop",
						"getOutput",
						"getPlaybackRate",
						"getVolume",
						"play",
						"pause",
						"onEnded",
						"setBuffer",
						"setFilter",
						"setFilters",
						"setLoop",
						"setLoopStart",
						"setLoopEnd",
						"setMediaElementSource",
						"setMediaStreamSource",
						"setNodeSource",
						"setPlaybackRate",
						"setVolume",
						"stop"
					],
					"properties": [
						"autoplay",
						"context",
						"detune",
						"filters",
						"gain",
						"hasPlaybackControl",
						"isPlaying",
						"listener",
						"playbackRate",
						"offset",
						"duration",
						"source",
						"sourceType",
						"type"
					]
				},

				"AudioAnalyser": {
					"url": "api/ko/audio/AudioAnalyser",
					"methods": [
						"getFrequencyData",
						"getAverageFrequency"
					],
					"properties": [
						"analyser",
						"fftSize",
						"data"
					]
				},

				"AudioContext": {
					"url": "api/ko/audio/AudioContext",
					"methods": [
						"getContext",
						"setContext"
					],
					"properties": []
				},

				"AudioListener": {
					"url": "api/ko/audio/AudioListener",
					"methods": [
						"getInput",
						"removeFilter",
						"getFilter",
						"setFilter",
						"getMasterVolume",
						"setMasterVolume"
					],
					"properties": [
						"context",
						"gain",
						"filter",
						"timeDelta"
					]
				},

				"PositionalAudio": {
					"url": "api/ko/audio/PositionalAudio",
					"methods": [
						"getOutput",
						"getRefDistance",
						"setRefDistance",
						"getRolloffFactor",
						"setRolloffFactor",
						"getDistanceModel",
						"setDistanceModel",
						"getMaxDistance",
						"setMaxDistance",
						"setDirectionalCone"
					],
					"properties": [
						"panner"
					]
				}
			},

			"카메라": {
				"ArrayCamera": {
					"url": "api/ko/cameras/ArrayCamera",
					"methods": [],
					"properties": [
						"cameras"
					]
				},

				"Camera": {
					"url": "api/ko/cameras/Camera",
					"methods": [
						"clone",
						"copy",
						"getWorldDirection"
					],
					"properties": [
						"layers",
						"matrixWorldInverse",
						"projectionMatrix",
						"projectionMatrixInverse"
					]
				},

				"CubeCamera": {
					"url": "api/ko/cameras/CubeCamera",
					"methods": [
						"update"
					],
					"properties": [
						"renderTarget"
					]
				},

				"OrthographicCamera": {
					"url": "api/ko/cameras/OrthographicCamera",
					"methods": [
						"setViewOffset",
						"clearViewOffset",
						"updateProjectionMatrix",
						"toJSON"
					],
					"properties": [
						"bottom",
						"far",
						"left",
						"near",
						"right",
						"top",
						"view",
						"zoom"
					]
				},

				"PerspectiveCamera": {
					"url": "api/ko/cameras/PerspectiveCamera",
					"methods": [
						"clearViewOffset",
						"getEffectiveFOV",
						"getFilmHeight",
						"getFilmWidth",
						"getFocalLength",
						"setFocalLength",
						"setViewOffset",
						"updateProjectionMatrix",
						"toJSON"
					],
					"properties": [
						"aspect",
						"far",
						"filmGauge",
						"filmOffset",
						"focus",
						"fov",
						"near",
						"view",
						"zoom"
					]
				},

				"StereoCamera": {
					"url": "api/ko/cameras/StereoCamera",
					"methods": [
						"update"
					],
					"properties": [
						"aspect",
						"eyeSep",
						"cameraL",
						"cameraR"
					]
				}
			},

			"상수": {
				"Animation": {
					"url": "api/ko/constants/Animation"
				},

				"Core": {
					"url": "api/ko/constants/Core"
				},

				"CustomBlendingEquation": {
					"url": "api/ko/constants/CustomBlendingEquations"
				},

				"Materials": {
					"url": "api/ko/constants/Materials"
				},

				"Renderer": {
					"url": "api/ko/constants/Renderer"
				},

				"Textures": {
					"url": "api/ko/constants/Textures"
				}
			}
		},

		"예제": {
			"컨트롤": {
				"DeviceOrientationControls": {
					"url": "examples/ko/controls/DeviceOrientationControls",
					"methods": [
						"connect",
						"disconnect",
						"dispose",
						"update"
					],
					"properties": [
						"alphaOffset",
						"deviceOrientation",
						"enabled",
						"object",
						"screenOrientation"
					]
				},

				"DragControls": {
					"url": "examples/ko/controls/DragControls",
					"methods": [
						"activate",
						"deactivate",
						"dispose",
						"getObjects"
					],
					"properties": [
						"enabled",
						"transformGroup"
					]
				},

				"FirstPersonControls": {
					"url": "examples/ko/controls/FirstPersonControls",
					"methods": [
						"dispose",
						"handleResize",
						"lookAt",
						"lookAt",
						"update"
					],
					"properties": [
						"activeLook",
						"autoForward",
						"constrainVertical",
						"domElement",
						"enabled",
						"heightCoef",
						"heightMax",
						"heightMin",
						"heightSpeed",
						"lookVertical",
						"lookSpeed",
						"mouseDragOn",
						"movementSpeed",
						"object",
						"verticalMax",
						"verticalMin"
					]
				},

				"FlyControls": {
					"url": "examples/ko/controls/FlyControls",
					"methods": [
						"dispose",
						"update"
					],
					"properties": [
						"autoForward",
						"domElement",
						"dragToLook",
						"movementSpeed",
						"object",
						"rollSpeed"
					]
				},

				"OrbitControls": {
					"url": "examples/ko/controls/OrbitControls",
					"methods": [
						"dispose",
						"getAzimuthalAngle",
						"getPolarAngle",
						"listenToKeyEvents",
						"reset",
						"saveState",
						"update"
					],
					"properties": [
						"autoRotate",
						"autoRotateSpeed",
						"dampingFactor",
						"domElement",
						"enabled",
						"enableDamping",
						"enablePan",
						"enableRotate",
						"enableZoom",
						"keyPanSpeed",
						"keys",
						"maxAzimuthAngle",
						"maxDistance",
						"maxPolarAngle",
						"maxZoom",
						"minAzimuthAngle",
						"minDistance",
						"minPolarAngle",
						"minZoom",
						"mouseButtons",
						"object",
						"panSpeed",
						"position0",
						"rotateSpeed",
						"screenSpacePanning",
						"target0",
						"target",
						"touches",
						"zoom0",
						"zoomSpeed"
					]
				},

				"PointerLockControls": {
					"url": "examples/ko/controls/PointerLockControls",
					"methods": [
						"connect",
						"disconnect",
						"getDirection",
						"lock",
						"moveForward",
						"moveRight",
						"unlock"
					],
					"properties": [
						"domElement",
						"isLocked",
						"maxPolarAngle",
						"minPolarAngle"
					]
				},

				"TrackballControls": {
					"url": "examples/ko/controls/TrackballControls",
					"methods": [
						"checkDistances",
						"dispose",
						"handleResize",
						"panCamera",
						"reset",
						"rotateCamera",
						"update",
						"zoomCamera"
					],
					"properties": [
						"domElement",
						"dynamicDampingFactor",
						"enabled",
						"keys",
						"maxDistance",
						"minDistance",
						"mouseButtons",
						"noPan",
						"noRotate",
						"noZoom",
						"object",
						"panSpeed",
						"rotateSpeed",
						"screen",
						"staticMoving",
						"zoomSpeed"
					]
				},

				"TransformControls": {
					"url": "examples/ko/controls/TransformControls",
					"methods": [
						"attach",
						"detach",
						"dispose",
						"getMode",
						"setMode",
						"setRotationSnap",
						"setSize",
						"setSpace",
						"setTranslationSnap"
					],
					"properties": [
						"axis",
						"camera",
						"domElement",
						"dragging",
						"enabled",
						"mode",
						"object",
						"rotationSnap",
						"showX",
						"showY",
						"showZ",
						"size",
						"space",
						"translationSnap"
					]
				}
			}
		}
	},

	"ja": {
		"マニュアル": {
			"はじめてみましょう": {
				"シーンの作成": {
					"url": "manual/ja/introduction/Creating-a-scene"
				},

				"インストールの方法": {
					"url": "manual/ja/introduction/Installation"
				},

				"WebGLの互換性の確認": {
					"url": "manual/ja/introduction/WebGL-compatibility-check"
				},

				"localで実行する方法": {
					"url": "manual/ja/introduction/How-to-run-things-locally"
				},

				"線を引く": {
					"url": "manual/ja/introduction/Drawing-lines"
				},

				"テキストを作成する": {
					"url": "manual/ja/introduction/Creating-text"
				},

				"3Dモデルをロードする": {
					"url": "manual/ja/introduction/Loading-3D-models"
				},

				"ライブラリとプラグイン": {
					"url": "manual/ja/introduction/Libraries-and-Plugins"
				},

				"FAQ": {
					"url": "manual/ja/introduction/FAQ"
				},

				"役にたつリンク集": {
					"url": "manual/ja/introduction/Useful-links"
				}
			},

			"次の段階": {
				"更新の仕方": {
					"url": "manual/ja/introduction/How-to-update-things"
				},

				"オブジェクトを廃棄する方法": {
					"url": "manual/ja/introduction/How-to-dispose-of-objects"
				},

				"VRコンテンツの作り方": {
					"url": "manual/ja/introduction/How-to-create-VR-content"
				},

				"post-processingの使い方": {
					"url": "manual/ja/introduction/How-to-use-post-processing"
				},

				"行列の変換": {
					"url": "manual/ja/introduction/Matrix-transformations"
				},

				"アニメーションシステム": {
					"url": "manual/ja/introduction/Animation-system"
				}
			},

			"ビルドツール": {
				"NPMでテストを実行する": {
					"url": "manual/ja/buildTools/Testing-with-NPM"
				}
			}
		}
	}
}