
<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="utf-8" />
        <base href="../../../" />
        <script src="page.js"></script>
        <link type="text/css" rel="stylesheet" href="page.css" />
    </head>
    <body>
        <h1>[name]</h1>

        <p class="desc">
            Les AnimationActions programment la performance des animations qui sont stockées dans
            [page:AnimationClip AnimationClips].<br /><br />

            Note: La plupart des méthodes d'AnimationAction peuvent être chainées.<br /><br />

            Pour avoir un aperçu des différents éléments du système d'animation de three.js, consultez
            l'article "Système d'Animation" dans la section "Étapes Suivantes" du manuel.
        </p>


        <h2>Constructeur</h2>


        <h3>[name]( [param:AnimationMixer mixer], [param:AnimationClip clip], [param:Object3D localRoot] )</h3>
        <p>
            [page:AnimationMixer mixer] - l'`AnimationMixer` contrôlé par cette action.<br />
            [page:AnimationClip clip] - l`AnimationClip` qui contient les données d'animation pour cette action.<br />
            [page:Object3D localRoot] - l'objet racine sur lequel est appliqué l'action.<br /><br />

            Note: Au lieu d'appeler ce constructeur directement, vous devriez instantier un AnimationAction avec
            [page:AnimationMixer.clipAction] étant donné que cette méthode applique une mise en cache pour obtenir de meilleures performances.
        </p>


        <h2>Propriétés</h2>


        <h3>[property:Boolean clampWhenFinished]</h3>
        <p>
            Si `clampWhenFinished` est mis à true l'animation sera automatiquement [page:.paused mise en pause]
            à son dernier frame.<br /><br />

            Si `clampWhenFinished` est mis à false, [page:.enabled enabled] sera automatiquement reglé sur
            false quand la dernière boucle de l'action sera terminée, afin que cette action n'ai pas plus
            d'impact.<br /><br />

            La valeur par défaut est false.<br /><br />

            Note: `clampWhenFinished` n'a pas d'impact si l'action est interrompue (il n'a d'impact que si
            la dernière boucle de l'action s'est réellement terminée).
        </p>

        <h3>[property:Boolean enabled]</h3>
        <p>
            Régler `enabled` sur `false` désactive cette action, afin qu'elle n'ai aucun impact. La valeur par défaut est `true`.<br /><br />

            Quand l'action est réactivée, l'animation continue depuis son [page:.time time] actuel
            (Régler `enabled` sur `false` ne relance pas l'action).<br /><br />

            Note: Régler `enabled` sur `true` ne redémarre pas automatiquement l'action. Régler `enabled`
            sur `true` ne redémarrera l'action immédiatement que si la condition suivante est remplie:
            [page:.paused paused] est à `false`, l'action n'a pas été désactivée (en
            exécutant un [page:.stop stop] ou un [page:.reset reset]), et ni [page:.weight weight]
            ni [page:.timeScale timeScale] ne sont à `0`.
        </p>

        <h3>[property:Number loop]</h3>
        <p>
            Le mode répeter (peut-être changé avec [page:.setLoop setLoop]). Sa valeur par défaut est
            [page:Animation THREE.LoopRepeat] (avec un nombre infini de répétitions [page:.repetitions repetitions])<br /><br />

            Doit être une de ces constantes:<br /><br />
            [page:Animation THREE.LoopOnce] - joue le clip une fois,<br />
            [page:Animation THREE.LoopRepeat] - joue le clip le nombre choisi de `répetitions`,
            en sautant à chaque fois de la fin du clip à son début,<br />
            [page:Animation THREE.LoopPingPong] - joue le clip le nombre choisi de `répetitions`,
            alternant entre lecture du début vers la fin et lecture de la fin vers le début.
        </p>

        <h3>[property:Boolean paused]</h3>
        <p>
            Régler `paused` sur `true` met l'exécution de l'action en pause en mettant l'échelle temporelle effective
            à `0`. La valeur par défaut est `false`.<br /><br />
        </p>

        <h3>[property:Number repetitions]</h3>
        <p>
            Le nombre de répétitions de l'[page:AnimationClip] actuel réalisées durant cette action.
            Peut-être paramétré depuis [page:.setLoop setLoop]. La valeur par défaut est `Infinity`.<br /><br />
            Changer ce nombre n'a aucun effet, si le [page:.loop loop mode] est réglé sur
            [page:Animation THREE.LoopOnce].
        </p>

        <h3>[property:Number time]</h3>
        <p>
            Le temps local de cette action (en secondes, en commençant par `0`).<br /><br />

            La valeur peut-être restreinte à `0...clip.duration` (selon l'état de la boucle). Il peut être
            mis à l'échelle relativement à celui du mixer global en changeant [page:.timeScale timeScale] (en utilisant
            [page:.setEffectiveTimeScale setEffectiveTimeScale] ou [page:.setDuration setDuration]).<br />
        </p>

        <h3>[property:Number timeScale]</h3>
        <p>
            Facteur de mise à l'échelle pour le [page:.time time]. Une valeur de `0` cause la mise en pause de l'animation. Une valeur
            négative fera jouer l'animation à l'envers . La valeur par défaut est `1`.<br /><br />
            Les propriétés/méthodes concernant `timeScale` (respectivement `time`) sont:
            [page:.getEffectiveTimeScale getEffectiveTimeScale],
            [page:.halt halt],
            [page:.paused paused],
            [page:.setDuration setDuration],
            [page:.setEffectiveTimeScale setEffectiveTimeScale],
            [page:.stopWarping stopWarping],
            [page:.syncWith syncWith],
            [page:.warp warp].
        </p>

        <h3>[property:Number weight]</h3>
        <p>
            Le degré d'importance d'une action (compris dans l'intervalle `[0, 1]`). Les valeurs entre `0` (aucun impact)
            et 1 (impact total) peuvent être utilisées pour mélanger plusieurs actions. La valeur par défaut est `1`. <br /><br />
            Les propriétés/méthodes concernant `weight` sont:
            [page:.crossFadeFrom crossFadeFrom],
            [page:.crossFadeTo crossFadeTo],
            [page:.enabled enabled],
            [page:.fadeIn fadeIn],
            [page:.fadeOut fadeOut],
            [page:.getEffectiveWeight getEffectiveWeight],
            [page:.setEffectiveWeight setEffectiveWeight],
            [page:.stopFading stopFading].
        </p>

        <h3>[property:Boolean zeroSlopeAtEnd]</h3>
        <p>
            Permet une interpolation fluide sans avoir de clips séparés pour le début, les répétitions et la fin. La valeur par défaut est `true`.
        </p>

        <h3>[property:Boolean zeroSlopeAtStart]</h3>
        <p>
            Permet une interpolation fluide sans avoir de clips séparés pour le début, les répétitions et la fin. La valeur par défaut est `true`.
        </p>


        <h2>Méthodes</h2>


        <h3>[method:this crossFadeFrom]( [param:AnimationAction fadeOutAction], [param:Number durationInSeconds], [param:Boolean warpBoolean] )</h3>
        <p>
            Provoque l'[page:.fadeIn apparition] de cette action, en faisant disparaître une autre action simultanément, durant
            l'intervalle de temps passée en paramètre. Cette méthode peut être chaînée.<br /><br />

            Si warpBoolean est à true, un [page:.warp warping] additionnel (changement graduel de l'échelle temporelle)
            sera appliqué.<br /><br />

            Note: Comme avec `fadeIn`/`fadeOut`, le fading commence/termine avec un weight à 1.

        </p>

        <h3>[method:this crossFadeTo]( [param:AnimationAction fadeInAction], [param:Number durationInSeconds], [param:Boolean warpBoolean] )</h3>
        <p>
            Provoque la [page:.fadeIn disparition] de cette action, en faisant apparaître une autre action simultanément, durant
            l'intervalle de temps passée en paramètre. Cette méthode peut être chaînée.<br /><br />
            Si warpBoolean est à true, un [page:.warp warping] additionnel (changement graduel de l'échelle temporelle)
            sera appliqué.<br /><br />

            Note: Comme avec `fadeIn`/`fadeOut`, le fading commence/termine avec un weight à 1.
        </p>

        <h3>[method:this fadeIn]( [param:Number durationInSeconds] )</h3>
        <p>
            Augmente graduellement le [page:.weight weight] de cette action de `0` à `1`, durant
            l'intervalle de temps passée en paramètre. Cette méthode peut être chaînée.
        </p>

        <h3>[method:this fadeOut]( [param:Number durationInSeconds] )</h3>
        <p>
            Diminue graduellement le [page:.weight weight] de cette de `1` à `0`, durant
            l'intervalle de temps passée en paramètre. Cette méthode peut être chaînée.
        </p>

        <h3>[method:Number getEffectiveTimeScale]()</h3>
        <p>
            Returns the effective time scale (considering the current states of warping and
            [page:.paused paused]).
        </p>

        <h3>[method:Number getEffectiveWeight]()</h3>
        <p>
            Returns the effective weight (considering the current states of fading and
            [page:.enabled enabled]).
        </p>

        <h3>[method:AnimationClip getClip]()</h3>
        <p>
            Returns the clip which holds the animation data for this action.
        </p>

        <h3>[method:AnimationMixer getMixer]()</h3>
        <p>
            Returns the mixer which is responsible for playing this action.
        </p>

        <h3>[method:Object3D getRoot]()</h3>
        <p>
            Returns the root object on which this action is performed.
        </p>

        <h3>[method:this halt]( [param:Number durationInSeconds] )</h3>
        <p>
            Decelerates this animation's speed to `0` by decreasing [page:.timeScale timeScale] gradually
            (starting from its current value), durant l'intervalle de temps passée en paramètre. Cette méthode peut être chaînée.
        </p>

        <h3>[method:Boolean isRunning]()</h3>
        <p>
            Returns true if the action’s [page:.time time] is currently running.<br /><br />

            In addition to being activated in the mixer (see [page:.isScheduled isScheduled]) the following conditions must be fulfilled:
            [page:.paused paused] is equal to false, [page:.enabled enabled] is equal to true,
            [page:.timeScale timeScale] is different from `0`, and there is no scheduling for a delayed start
            ([page:.startAt startAt]).<br /><br />

            Note: `isRunning` being true doesn’t necessarily mean that the animation can actually be seen.
            This is only the case, if [page:.weight weight] is additionally set to a non-zero value.
        </p>

        <h3>[method:Boolean isScheduled]()</h3>
        <p>
            Returns true, if this action is activated in the mixer.<br /><br />
            Note: This doesn’t necessarily mean that the animation is actually running (compare the additional
            conditions for [page:.isRunning isRunning]).
        </p>

        <h3>[method:this play]()</h3>
        <p>
            Tells the mixer to activate the action. This method can be chained.<br /><br />

            Note: Activating this action doesn’t necessarily mean that the animation starts immediately:
            If the action had already finished before (by reaching the end of its last loop), or if a time
            for a delayed start has been set (via [page:.startAt startAt]), a [page:.reset reset] must be
            executed first. Some other settings ([page:.paused paused]=true, [page:.enabled enabled]=false,
            [page:.weight weight]=0, [page:.timeScale timeScale]=0) can prevent the animation from playing,
            too.
        </p>

        <h3>[method:this reset]()</h3>
        <p>
            Resets the action. This method can be chained.<br /><br />

            This method sets [page:.paused paused] to false, [page:.enabled enabled] to true,
            [page:.time time] to `0`, interrupts any scheduled fading and warping, and removes the internal
            loop count and scheduling for delayed starting.<br /><br />

            Note: .`reset` is always called by [page:.stop stop], but .`reset` doesn’t call .`stop` itself.
            This means: If you want both, resetting and stopping, don’t call .`reset`; call .`stop` instead.
        </p>

        <h3>[method:this setDuration]( [param:Number durationInSeconds] )</h3>
        <p>
            Sets the duration for a single loop of this action (by adjusting [page:.timeScale timeScale]
            and stopping any scheduled warping). This method can be chained.
        </p>

        <h3>[method:this setEffectiveTimeScale]( [param:Number timeScale] )</h3>
        <p>
            Sets the [page:.timeScale timeScale] and stops any scheduled warping. This method can be chained.<br /><br />

            If [page:.paused paused] is false, the effective time scale (an internal property) will also be set
            to this value; otherwise the effective time scale (directly affecting the animation at
            this moment) will be set to `0`.<br /><br />

            Note: .`paused` will not be switched to `true` automatically, if .`timeScale` is set to `0` by
            this method.
        </p>

        <h3>[method:this setEffectiveWeight]( [param:Number weight] )</h3>
        <p>
            Sets the [page:.weight weight] and stops any scheduled fading. This method can be chained.<br /><br />

            If [page:.enabled enabled] is true, the effective weight (an internal property) will also be set
            to this value; otherwise the effective weight (directly affecting the animation at this moment)
            will be set to `0`.<br /><br />

            Note: .`enabled` will not be switched to `false` automatically, if .`weight` is set to `0` by
            this method.
        </p>

        <h3>[method:this setLoop]( [param:Number loopMode], [param:Number repetitions] )</h3>
        <p>
            Sets the [page:.loop loop mode] and the number of [page:.repetitions repetitions]. This method
            can be chained.
        </p>

        <h3>[method:this startAt]( [param:Number startTimeInSeconds] )</h3>
        <p>
            Defines the time for a delayed start (usually passed as [page:AnimationMixer.time] +
            deltaTimeInSeconds). This method can be chained.<br /><br />

            Note: The animation will only start at the given time, if .`startAt` is chained with
            [page:.play play], or if the action has already been activated in the mixer (by a previous
            call of .`play`, without stopping or resetting it in the meantime).
        </p>

        <h3>[method:this stop]()</h3>
        <p>
            Tells the mixer to deactivate this action. This method can be chained.<br /><br />

            The action will be immediately stopped and completely [page:.reset reset].<br /><br />

            Note: You can stop all active actions on the same mixer in one go via
            [page:AnimationMixer.stopAllAction mixer.stopAllAction].
        </p>

        <h3>[method:this stopFading]()</h3>
        <p>
            Stops any scheduled [page:.fadeIn fading] which is applied to this action. This method can be
            chained.
        </p>

        <h3>[method:this stopWarping]()</h3>
        <p>
            Stops any scheduled [page:.warp warping] which is applied to this action. This method can be
            chained.
        </p>

        <h3>[method:this syncWith]( [param:AnimationAction otherAction] )</h3>
        <p>
            Synchronizes this action with the passed other action. This method can be chained.<br /><br />

            Synchronizing is done by setting this action’s [page:.time time] and [page:.timeScale timeScale] values
            to the corresponding values of the other action (stopping any scheduled warping).<br /><br />

            Note: Future changes of the other action's `time` and `timeScale` will not be detected.
        </p>

        <h3>[method:this warp]( [param:Number startTimeScale], [param:Number endTimeScale], [param:Number durationInSeconds] )</h3>
        <p>
            Changes the playback speed, within the passed time interval, by modifying
            [page:.timeScale timeScale] gradually from `startTimeScale` to `endTimeScale`. This method can
            be chained.
        </p>


        <h2>Events</h2>


        <p class="desc">
            There are two events indicating when a single loop of the action respectively the entire action has finished. You can react to them with:
        </p>
        <code>
        mixer.addEventListener( 'loop', function( e ) { …} ); // properties of e: type, action and loopDelta
        mixer.addEventListener( 'finished', function( e ) { …} ); // properties of e: type, action and direction
        </code>

        <h2>Source</h2>

        <p>
            [link:https://github.com/mrdoob/three.js/blob/master/src/[path].js src/[path].js]
        </p>
    </body>
</html>