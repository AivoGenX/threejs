// three.js - http://github.com/mrdoob/three.js
'use strict';var THREE=THREE||{REVISION:"60dev"};self.console=self.console||{info:function(){},log:function(){},debug:function(){},warn:function(){},error:function(){}};String.prototype.trim=String.prototype.trim||function(){return this.replace(/^\s+|\s+$/g,"")};THREE.extend=function(a,b){if(Object.keys)for(var c=Object.keys(b),d=0,e=c.length;d<e;d++){var f=c[d];Object.defineProperty(a,f,Object.getOwnPropertyDescriptor(b,f))}else for(f in c={}.hasOwnProperty,b)c.call(b,f)&&(a[f]=b[f]);return a};
(function(){for(var a=0,b=["ms","moz","webkit","o"],c=0;c<b.length&&!self.requestAnimationFrame;++c)self.requestAnimationFrame=self[b[c]+"RequestAnimationFrame"],self.cancelAnimationFrame=self[b[c]+"CancelAnimationFrame"]||self[b[c]+"CancelRequestAnimationFrame"];void 0===self.requestAnimationFrame&&void 0!==self.setTimeout&&(self.requestAnimationFrame=function(b){var c=Date.now(),f=Math.max(0,16-(c-a)),h=self.setTimeout(function(){b(c+f)},f);a=c+f;return h});void 0===self.cancelAnimationFrame&&void 0!==
self.clearTimeout&&(self.cancelAnimationFrame=function(a){self.clearTimeout(a)})})();THREE.CullFaceNone=0;THREE.CullFaceBack=1;THREE.CullFaceFront=2;THREE.CullFaceFrontBack=3;THREE.FrontFaceDirectionCW=0;THREE.FrontFaceDirectionCCW=1;THREE.BasicShadowMap=0;THREE.PCFShadowMap=1;THREE.PCFSoftShadowMap=2;THREE.FrontSide=0;THREE.BackSide=1;THREE.DoubleSide=2;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;THREE.NoColors=0;THREE.FaceColors=1;THREE.VertexColors=2;THREE.NoBlending=0;
THREE.NormalBlending=1;THREE.AdditiveBlending=2;THREE.SubtractiveBlending=3;THREE.MultiplyBlending=4;THREE.CustomBlending=5;THREE.AddEquation=100;THREE.SubtractEquation=101;THREE.ReverseSubtractEquation=102;THREE.ZeroFactor=200;THREE.OneFactor=201;THREE.SrcColorFactor=202;THREE.OneMinusSrcColorFactor=203;THREE.SrcAlphaFactor=204;THREE.OneMinusSrcAlphaFactor=205;THREE.DstAlphaFactor=206;THREE.OneMinusDstAlphaFactor=207;THREE.DstColorFactor=208;THREE.OneMinusDstColorFactor=209;
THREE.SrcAlphaSaturateFactor=210;THREE.MultiplyOperation=0;THREE.MixOperation=1;THREE.AddOperation=2;THREE.UVMapping=function(){};THREE.CubeReflectionMapping=function(){};THREE.CubeRefractionMapping=function(){};THREE.SphericalReflectionMapping=function(){};THREE.SphericalRefractionMapping=function(){};THREE.RepeatWrapping=1E3;THREE.ClampToEdgeWrapping=1001;THREE.MirroredRepeatWrapping=1002;THREE.NearestFilter=1003;THREE.NearestMipMapNearestFilter=1004;THREE.NearestMipMapLinearFilter=1005;
THREE.LinearFilter=1006;THREE.LinearMipMapNearestFilter=1007;THREE.LinearMipMapLinearFilter=1008;THREE.UnsignedByteType=1009;THREE.ByteType=1010;THREE.ShortType=1011;THREE.UnsignedShortType=1012;THREE.IntType=1013;THREE.UnsignedIntType=1014;THREE.FloatType=1015;THREE.UnsignedShort4444Type=1016;THREE.UnsignedShort5551Type=1017;THREE.UnsignedShort565Type=1018;THREE.AlphaFormat=1019;THREE.RGBFormat=1020;THREE.RGBAFormat=1021;THREE.LuminanceFormat=1022;THREE.LuminanceAlphaFormat=1023;
THREE.RGB_S3TC_DXT1_Format=2001;THREE.RGBA_S3TC_DXT1_Format=2002;THREE.RGBA_S3TC_DXT3_Format=2003;THREE.RGBA_S3TC_DXT5_Format=2004;THREE.RGB_PVRTC_4BPPV1_Format=2100;THREE.RGB_PVRTC_2BPPV1_Format=2101;THREE.RGBA_PVRTC_4BPPV1_Format=2102;THREE.RGBA_PVRTC_2BPPV1_Format=2103;THREE.RGB_ATC_Format=2200;THREE.RGBA_ATC_EXPLICIT_ALPHA_Format=2201;THREE.RGBA_ATC_INTERP_ALPHA_Format=2202;THREE.Color=function(a){void 0!==a&&this.set(a);return this};
THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(a){a instanceof THREE.Color?this.copy(a):"number"===typeof a?this.setHex(a):"string"===typeof a&&this.setStyle(a);return this},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSL:function(a,b,c){if(0===b)this.r=this.g=this.b=c;else{var d=function(a,b,c){0>c&&(c+=1);1<c&&(c-=1);return c<1/6?a+6*(b-a)*
c:0.5>c?b:c<2/3?a+6*(b-a)*(2/3-c):a},b=0.5>=c?c*(1+b):c+b-c*b,c=2*c-b;this.r=d(c,b,a+1/3);this.g=d(c,b,a);this.b=d(c,b,a-1/3)}return this},setStyle:function(a){if(/^rgb\((\d+),(\d+),(\d+)\)$/i.test(a))return a=/^rgb\((\d+),(\d+),(\d+)\)$/i.exec(a),this.r=Math.min(255,parseInt(a[1],10))/255,this.g=Math.min(255,parseInt(a[2],10))/255,this.b=Math.min(255,parseInt(a[3],10))/255,this;if(/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.test(a))return a=/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.exec(a),this.r=Math.min(100,
parseInt(a[1],10))/100,this.g=Math.min(100,parseInt(a[2],10))/100,this.b=Math.min(100,parseInt(a[3],10))/100,this;if(/^\#([0-9a-f]{6})$/i.test(a))return a=/^\#([0-9a-f]{6})$/i.exec(a),this.setHex(parseInt(a[1],16)),this;if(/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(a))return a=/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(a),this.setHex(parseInt(a[1]+a[1]+a[2]+a[2]+a[3]+a[3],16)),this;if(/^(\w+)$/i.test(a))return this.setHex(THREE.ColorKeywords[a]),this},copy:function(a){this.r=a.r;this.g=a.g;this.b=
a.b;return this},copyGammaToLinear:function(a){this.r=a.r*a.r;this.g=a.g*a.g;this.b=a.b*a.b;return this},copyLinearToGamma:function(a){this.r=Math.sqrt(a.r);this.g=Math.sqrt(a.g);this.b=Math.sqrt(a.b);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*
this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(){var a={h:0,s:0,l:0};return function(){var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),f=Math.min(b,c,d),h,i=(f+e)/2;if(f===e)f=h=0;else{var j=e-f,f=0.5>=i?j/(e+f):j/(2-e-f);switch(e){case b:h=(c-d)/j+(c<d?6:0);break;case c:h=(d-b)/j+2;break;case d:h=(b-c)/j+4}h/=6}a.h=h;a.s=f;a.l=i;return a}}(),getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(a,
b,c){var d=this.getHSL();d.h+=a;d.s+=b;d.l+=c;this.setHSL(d.h,d.s,d.l);return this},add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=a.b+b.b;return this},addScalar:function(a){this.r+=a;this.g+=a;this.b+=a;return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;
this.b+=(a.b-this.b)*b;return this},equals:function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a){this.r=a[0];this.g=a[1];this.b=a[2];return this},toArray:function(){return[this.r,this.g,this.b]},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}};
THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,
darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,
grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,
lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,
palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,
tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};THREE.Quaternion=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1};
THREE.Quaternion.prototype={constructor:THREE.Quaternion,_x:0,_y:0,_z:0,_w:0,_euler:void 0,_updateEuler:function(){void 0!==this._euler&&this._euler.setFromQuaternion(this,void 0,!1)},get x(){return this._x},set x(a){this._x=a;this._updateEuler()},get y(){return this._y},set y(a){this._y=a;this._updateEuler()},get z(){return this._z},set z(a){this._z=a;this._updateEuler()},get w(){return this._w},set w(a){this._w=a;this._updateEuler()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._w=d;
this._updateEuler();return this},copy:function(a){this._x=a._x;this._y=a._y;this._z=a._z;this._w=a._w;this._updateEuler();return this},setFromEuler:function(a,b){void 0===typeof a.order&&console.error("ERROR: Quaternion's .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.");var c=Math.cos(a._x/2),d=Math.cos(a._y/2),e=Math.cos(a._z/2),f=Math.sin(a._x/2),h=Math.sin(a._y/2),i=Math.sin(a._z/2);void 0===a.order||"XYZ"===a.order?(this._x=f*d*e+c*h*i,
this._y=c*h*e-f*d*i,this._z=c*d*i+f*h*e,this._w=c*d*e-f*h*i):"YXZ"===a.order?(this._x=f*d*e+c*h*i,this._y=c*h*e-f*d*i,this._z=c*d*i-f*h*e,this._w=c*d*e+f*h*i):"ZXY"===a.order?(this._x=f*d*e-c*h*i,this._y=c*h*e+f*d*i,this._z=c*d*i+f*h*e,this._w=c*d*e-f*h*i):"ZYX"===a.order?(this._x=f*d*e-c*h*i,this._y=c*h*e+f*d*i,this._z=c*d*i-f*h*e,this._w=c*d*e+f*h*i):"YZX"===a.order?(this._x=f*d*e+c*h*i,this._y=c*h*e+f*d*i,this._z=c*d*i-f*h*e,this._w=c*d*e-f*h*i):"XZY"===a.order&&(this._x=f*d*e-c*h*i,this._y=c*
h*e-f*d*i,this._z=c*d*i+f*h*e,this._w=c*d*e+f*h*i);!1!==b&&this._updateEuler();return this},setFromAxisAngle:function(a,b){var c=b/2,d=Math.sin(c);this._x=a.x*d;this._y=a.y*d;this._z=a.z*d;this._w=Math.cos(c);this._updateEuler();return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0],a=b[4],d=b[8],e=b[1],f=b[5],h=b[9],i=b[2],j=b[6],b=b[10],m=c+f+b;0<m?(c=0.5/Math.sqrt(m+1),this._w=0.25/c,this._x=(j-h)*c,this._y=(d-i)*c,this._z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this._w=(j-h)/
c,this._x=0.25*c,this._y=(a+e)/c,this._z=(d+i)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this._w=(d-i)/c,this._x=(a+e)/c,this._y=0.25*c,this._z=(h+j)/c):(c=2*Math.sqrt(1+b-c-f),this._w=(e-a)/c,this._x=(d+i)/c,this._y=(h+j)/c,this._z=0.25*c);this._updateEuler();return this},inverse:function(){this.conjugate().normalize();return this},conjugate:function(){this._x*=-1;this._y*=-1;this._z*=-1;this._updateEuler();return this},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},
length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=this.length();0===a?(this._z=this._y=this._x=0,this._w=1):(a=1/a,this._x*=a,this._y*=a,this._z*=a,this._w*=a);return this},multiply:function(a,b){return void 0!==b?(console.warn("DEPRECATED: Quaternion's .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},multiplyQuaternions:function(a,
b){var c=a._x,d=a._y,e=a._z,f=a._w,h=b._x,i=b._y,j=b._z,m=b._w;this._x=c*m+f*h+d*j-e*i;this._y=d*m+f*i+e*h-c*j;this._z=e*m+f*j+c*i-d*h;this._w=f*m-c*h-d*i-e*j;this._updateEuler();return this},multiplyVector3:function(a){console.warn("DEPRECATED: Quaternion's .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return a.applyQuaternion(this)},slerp:function(a,b){var c=this._x,d=this._y,e=this._z,f=this._w,h=f*a._w+c*a._x+d*a._y+e*a._z;0>h?(this._w=-a._w,this._x=
-a._x,this._y=-a._y,this._z=-a._z,h=-h):this.copy(a);if(1<=h)return this._w=f,this._x=c,this._y=d,this._z=e,this;var i=Math.acos(h),j=Math.sqrt(1-h*h);if(0.001>Math.abs(j))return this._w=0.5*(f+this._w),this._x=0.5*(c+this._x),this._y=0.5*(d+this._y),this._z=0.5*(e+this._z),this;h=Math.sin((1-b)*i)/j;i=Math.sin(b*i)/j;this._w=f*h+this._w*i;this._x=c*h+this._x*i;this._y=d*h+this._y*i;this._z=e*h+this._z*i;this._updateEuler();return this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===
this._z&&a._w===this._w},fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];this._w=a[3];this._updateEuler();return this},toArray:function(){return[this._x,this._y,this._z,this._w]},clone:function(){return new THREE.Quaternion(this._x,this._y,this._z,this._w)}};THREE.Quaternion.slerp=function(a,b,c,d){return c.copy(a).slerp(b,d)};THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};
THREE.Vector2.prototype={constructor:THREE.Vector2,set:function(a,b){this.x=a;this.y=b;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,
b){if(void 0!==b)return console.warn("DEPRECATED: Vector2's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector2's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=
a.y;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a):this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);
return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},normalize:function(){return this.divideScalar(this.length())},angleTo:function(a){return Math.acos(this.dot(a)/this.length()/a.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,a=this.y-a.y;return b*
b+a*a},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a){this.x=a[0];this.y=a[1];return this},toArray:function(){return[this.x,this.y]},clone:function(){return new THREE.Vector2(this.x,this.y)}};THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};
THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+
a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},multiply:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},multiplyVectors:function(a,b){this.x=a.x*
b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12];this.y=a[1]*b+a[5]*c+a[9]*d+a[13];this.z=a[2]*b+a[6]*c+a[10]*d+a[14];return this},applyProjection:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements,e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);
this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,h=a.z,a=a.w,i=a*b+f*d-h*c,j=a*c+h*b-e*d,m=a*d+e*c-f*b,b=-e*b-f*c-h*d;this.x=i*a+b*-e+j*-h-m*-f;this.y=j*a+b*-f+m*-e-i*-h;this.z=m*a+b*-h+i*-f-j*-e;return this},transformDirection:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*
b+a[6]*c+a[10]*d;this.normalize();return this},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a,this.z*=a):this.z=this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<
a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},
setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},cross:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(a,b);var c=this.x,d=this.y,e=this.z;this.x=d*a.z-e*a.y;this.y=e*a.x-c*a.z;this.z=c*a.y-d*a.x;return this},crossVectors:function(a,b){var c=
a.x,d=a.y,e=a.z,f=b.x,h=b.y,i=b.z;this.x=d*i-e*h;this.y=e*f-c*i;this.z=c*h-d*f;return this},angleTo:function(a){a=this.dot(a)/(this.length()*a.length());return Math.acos(THREE.Math.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y,a=this.z-a.z;return b*b+c*c+a*a},setEulerFromRotationMatrix:function(){console.error("REMOVED: Vector3's setEulerFromRotationMatrix has been removed in favor of Euler.setFromRotationMatrix(), please update your code.")},
setEulerFromQuaternion:function(){console.error("REMOVED: Vector3's setEulerFromQuaternion: has been removed in favor of Euler.setFromQuaternion(), please update your code.")},getPositionFromMatrix:function(a){this.x=a.elements[12];this.y=a.elements[13];this.z=a.elements[14];return this},getScaleFromMatrix:function(a){var b=this.set(a.elements[0],a.elements[1],a.elements[2]).length(),c=this.set(a.elements[4],a.elements[5],a.elements[6]).length(),a=this.set(a.elements[8],a.elements[9],a.elements[10]).length();
this.x=b;this.y=c;this.z=a;return this},getColumnFromMatrix:function(a,b){var c=4*a,d=b.elements;this.x=d[c];this.y=d[c+1];this.z=d[c+2];return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a){this.x=a[0];this.y=a[1];this.z=a[2];return this},toArray:function(){return[this.x,this.y,this.z]},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)}};
THREE.extend(THREE.Vector3.prototype,{applyEuler:function(){var a=new THREE.Quaternion;return function(b){void 0===typeof b.order&&console.error("ERROR: Vector3's .applyEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.");b=a.setFromEuler(b);this.applyQuaternion(b);return this}}(),applyAxisAngle:function(){var a=new THREE.Quaternion;return function(b,c){var d=a.setFromAxisAngle(b,c);this.applyQuaternion(d);return this}}(),projectOnVector:function(){var a=
new THREE.Vector3;return function(b){a.copy(b).normalize();b=this.dot(a);return this.copy(a).multiplyScalar(b)}}(),projectOnPlane:function(){var a=new THREE.Vector3;return function(b){a.copy(this).projectOnVector(b);return this.sub(a)}}(),reflect:function(){var a=new THREE.Vector3;return function(b){a.copy(this).projectOnVector(b).multiplyScalar(2);return this.subVectors(a,this)}}()});THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;
case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector4's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},
addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector4's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},
applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=this.w,a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a,this.z*=a,this.w*=a):(this.z=this.y=this.x=0,this.w=1);return this},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,
this.y=a.y/b,this.z=a.z/b);return this},setAxisAngleFromRotationMatrix:function(a){var b,c,d,a=a.elements,e=a[0];d=a[4];var f=a[8],h=a[1],i=a[5],j=a[9];c=a[2];b=a[6];var m=a[10];if(0.01>Math.abs(d-h)&&0.01>Math.abs(f-c)&&0.01>Math.abs(j-b)){if(0.1>Math.abs(d+h)&&0.1>Math.abs(f+c)&&0.1>Math.abs(j+b)&&0.1>Math.abs(e+i+m-3))return this.set(1,0,0,0),this;a=Math.PI;e=(e+1)/2;i=(i+1)/2;m=(m+1)/2;d=(d+h)/4;f=(f+c)/4;j=(j+b)/4;e>i&&e>m?0.01>e?(b=0,d=c=0.707106781):(b=Math.sqrt(e),c=d/b,d=f/b):i>m?0.01>i?
(b=0.707106781,c=0,d=0.707106781):(c=Math.sqrt(i),b=d/c,d=j/c):0.01>m?(c=b=0.707106781,d=0):(d=Math.sqrt(m),b=f/d,c=j/d);this.set(b,c,d,a);return this}a=Math.sqrt((b-j)*(b-j)+(f-c)*(f-c)+(h-d)*(h-d));0.001>Math.abs(a)&&(a=1);this.x=(b-j)/a;this.y=(f-c)/a;this.z=(h-d)/a;this.w=Math.acos((e+i+m-1)/2);return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);this.w>a.w&&(this.w=a.w);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=
a.y);this.z<a.z&&(this.z=a.z);this.w<a.w&&(this.w=a.w);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);this.w<a.w?this.w=a.w:this.w>b.w&&(this.w=b.w);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*
this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&
a.w===this.w},fromArray:function(a){this.x=a[0];this.y=a[1];this.z=a[2];this.w=a[3];return this},toArray:function(){return[this.x,this.y,this.z,this.w]},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)}};THREE.Euler=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._order=d||THREE.Euler.DefaultOrder};THREE.Euler.RotationOrders="XYZ YZX ZXY XZY YXZ ZYX".split(" ");THREE.Euler.DefaultOrder="XYZ";
THREE.Euler.prototype={constructor:THREE.Euler,_x:0,_y:0,_z:0,_order:THREE.Euler.DefaultOrder,_quaternion:void 0,_updateQuaternion:function(){void 0!==this._quaternion&&this._quaternion.setFromEuler(this,!1)},get x(){return this._x},set x(a){this._x=a;this._updateQuaternion()},get y(){return this._y},set y(a){this._y=a;this._updateQuaternion()},get z(){return this._z},set z(a){this._z=a;this._updateQuaternion()},get order(){return this._order},set order(a){this._order=a;this._updateQuaternion()},
set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._order=d||this._order;this._updateQuaternion();return this},copy:function(a){this._x=a._x;this._y=a._y;this._z=a._z;this._order=a._order;this._updateQuaternion();return this},setFromRotationMatrix:function(a,b){function c(a){return Math.min(Math.max(a,-1),1)}var d=a.elements,e=d[0],f=d[4],h=d[8],i=d[1],j=d[5],m=d[9],n=d[2],p=d[6],d=d[10],b=b||this._order;"XYZ"===b?(this._y=Math.asin(c(h)),0.99999>Math.abs(h)?(this._x=Math.atan2(-m,d),this._z=
Math.atan2(-f,e)):(this._x=Math.atan2(p,j),this._z=0)):"YXZ"===b?(this._x=Math.asin(-c(m)),0.99999>Math.abs(m)?(this._y=Math.atan2(h,d),this._z=Math.atan2(i,j)):(this._y=Math.atan2(-n,e),this._z=0)):"ZXY"===b?(this._x=Math.asin(c(p)),0.99999>Math.abs(p)?(this._y=Math.atan2(-n,d),this._z=Math.atan2(-f,j)):(this._y=0,this._z=Math.atan2(i,e))):"ZYX"===b?(this._y=Math.asin(-c(n)),0.99999>Math.abs(n)?(this._x=Math.atan2(p,d),this._z=Math.atan2(i,e)):(this._x=0,this._z=Math.atan2(-f,j))):"YZX"===b?(this._z=
Math.asin(c(i)),0.99999>Math.abs(i)?(this._x=Math.atan2(-m,j),this._y=Math.atan2(-n,e)):(this._x=0,this._y=Math.atan2(h,d))):"XZY"===b?(this._z=Math.asin(-c(f)),0.99999>Math.abs(f)?(this._x=Math.atan2(p,j),this._y=Math.atan2(h,e)):(this._x=Math.atan2(-m,d),this._y=0)):console.warn("WARNING: Euler.setFromRotationMatrix() given unsupported order: "+b);this._order=b;this._updateQuaternion();return this},setFromQuaternion:function(a,b,c){function d(a){return Math.min(Math.max(a,-1),1)}var e=a.x*a.x,f=
a.y*a.y,h=a.z*a.z,i=a.w*a.w,b=b||this._order;"XYZ"===b?(this._x=Math.atan2(2*(a.x*a.w-a.y*a.z),i-e-f+h),this._y=Math.asin(d(2*(a.x*a.z+a.y*a.w))),this._z=Math.atan2(2*(a.z*a.w-a.x*a.y),i+e-f-h)):"YXZ"===b?(this._x=Math.asin(d(2*(a.x*a.w-a.y*a.z))),this._y=Math.atan2(2*(a.x*a.z+a.y*a.w),i-e-f+h),this._z=Math.atan2(2*(a.x*a.y+a.z*a.w),i-e+f-h)):"ZXY"===b?(this._x=Math.asin(d(2*(a.x*a.w+a.y*a.z))),this._y=Math.atan2(2*(a.y*a.w-a.z*a.x),i-e-f+h),this._z=Math.atan2(2*(a.z*a.w-a.x*a.y),i-e+f-h)):"ZYX"===
b?(this._x=Math.atan2(2*(a.x*a.w+a.z*a.y),i-e-f+h),this._y=Math.asin(d(2*(a.y*a.w-a.x*a.z))),this._z=Math.atan2(2*(a.x*a.y+a.z*a.w),i+e-f-h)):"YZX"===b?(this._x=Math.atan2(2*(a.x*a.w-a.z*a.y),i-e+f-h),this._y=Math.atan2(2*(a.y*a.w-a.x*a.z),i+e-f-h),this._z=Math.asin(d(2*(a.x*a.y+a.z*a.w)))):"XZY"===b?(this._x=Math.atan2(2*(a.x*a.w+a.y*a.z),i-e+f-h),this._y=Math.atan2(2*(a.x*a.z+a.y*a.w),i+e-f-h),this._z=Math.asin(d(2*(a.z*a.w-a.x*a.y)))):console.warn("WARNING: Euler.setFromQuaternion() given unsupported order: "+
b);this._order=b;!1!==c&&this._updateQuaternion();return this},reorder:function(){var a=new THREE.Quaternion;return function(b){a.setFromEuler(this);this.setFromQuaternion(a,b)}}(),fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];void 0!==a[3]&&(this._order=a[3]);this._updateQuaternion();return this},toArray:function(){return[this._x,this._y,this._z,this._order]},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},clone:function(){return new THREE.Euler(this._x,
this._y,this._z,this._order)}};THREE.Matrix3=function(a,b,c,d,e,f,h,i,j){this.elements=new Float32Array(9);this.set(void 0!==a?a:1,b||0,c||0,d||0,void 0!==e?e:1,f||0,h||0,i||0,void 0!==j?j:1)};
THREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(a,b,c,d,e,f,h,i,j){var m=this.elements;m[0]=a;m[3]=b;m[6]=c;m[1]=d;m[4]=e;m[7]=f;m[2]=h;m[5]=i;m[8]=j;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]);return this},multiplyVector3:function(a){console.warn("DEPRECATED: Matrix3's .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this)},
multiplyVector3Array:function(){var a=new THREE.Vector3;return function(b){for(var c=0,d=b.length;c<d;c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyMatrix3(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],h=a[5],i=a[6],j=a[7],a=a[8];return b*f*a-b*h*j-c*e*a+c*h*i+d*e*j-d*f*i},getInverse:function(a,
b){var c=a.elements,d=this.elements;d[0]=c[10]*c[5]-c[6]*c[9];d[1]=-c[10]*c[1]+c[2]*c[9];d[2]=c[6]*c[1]-c[2]*c[5];d[3]=-c[10]*c[4]+c[6]*c[8];d[4]=c[10]*c[0]-c[2]*c[8];d[5]=-c[6]*c[0]+c[2]*c[4];d[6]=c[9]*c[4]-c[5]*c[8];d[7]=-c[9]*c[0]+c[1]*c[8];d[8]=c[5]*c[0]-c[1]*c[4];c=c[0]*d[0]+c[1]*d[3]+c[2]*d[6];if(0===c){if(b)throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");console.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/
c);return this},transpose:function(){var a,b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=b[7];b[7]=a;return this},getNormalMatrix:function(a){this.getInverse(a).transpose();return this},transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},clone:function(){var a=this.elements;return new THREE.Matrix3(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8])}};THREE.Matrix4=function(a,b,c,d,e,f,h,i,j,m,n,p,l,t,u,k){var q=this.elements=new Float32Array(16);q[0]=void 0!==a?a:1;q[4]=b||0;q[8]=c||0;q[12]=d||0;q[1]=e||0;q[5]=void 0!==f?f:1;q[9]=h||0;q[13]=i||0;q[2]=j||0;q[6]=m||0;q[10]=void 0!==n?n:1;q[14]=p||0;q[3]=l||0;q[7]=t||0;q[11]=u||0;q[15]=void 0!==k?k:1};
THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,b,c,d,e,f,h,i,j,m,n,p,l,t,u,k){var q=this.elements;q[0]=a;q[4]=b;q[8]=c;q[12]=d;q[1]=e;q[5]=f;q[9]=h;q[13]=i;q[2]=j;q[6]=m;q[10]=n;q[14]=p;q[3]=l;q[7]=t;q[11]=u;q[15]=k;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(a){this.elements.set(a.elements);return this},extractPosition:function(a){console.warn("DEPRECATED: Matrix4's .extractPosition() has been renamed to .copyPosition().");
return this.copyPosition(a)},copyPosition:function(a){var b=this.elements,a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractRotation:function(){var a=new THREE.Vector3;return function(b){var c=this.elements,b=b.elements,d=1/a.set(b[0],b[1],b[2]).length(),e=1/a.set(b[4],b[5],b[6]).length(),f=1/a.set(b[8],b[9],b[10]).length();c[0]=b[0]*d;c[1]=b[1]*d;c[2]=b[2]*d;c[4]=b[4]*e;c[5]=b[5]*e;c[6]=b[6]*e;c[8]=b[8]*f;c[9]=b[9]*f;c[10]=b[10]*f;return this}}(),makeRotationFromEuler:function(a){void 0===
typeof a.order&&console.error("ERROR: Matrix's .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.");var b=this.elements,c=a.x,d=a.y,e=a.z,f=Math.cos(c),c=Math.sin(c),h=Math.cos(d),d=Math.sin(d),i=Math.cos(e),e=Math.sin(e);if(void 0===a.order||"XYZ"===a.order){var a=f*i,j=f*e,m=c*i,n=c*e;b[0]=h*i;b[4]=-h*e;b[8]=d;b[1]=j+m*d;b[5]=a-n*d;b[9]=-c*h;b[2]=n-a*d;b[6]=m+j*d;b[10]=f*h}else"YXZ"===a.order?(a=h*i,j=h*e,m=d*i,n=d*e,b[0]=a+n*c,b[4]=
m*c-j,b[8]=f*d,b[1]=f*e,b[5]=f*i,b[9]=-c,b[2]=j*c-m,b[6]=n+a*c,b[10]=f*h):"ZXY"===a.order?(a=h*i,j=h*e,m=d*i,n=d*e,b[0]=a-n*c,b[4]=-f*e,b[8]=m+j*c,b[1]=j+m*c,b[5]=f*i,b[9]=n-a*c,b[2]=-f*d,b[6]=c,b[10]=f*h):"ZYX"===a.order?(a=f*i,j=f*e,m=c*i,n=c*e,b[0]=h*i,b[4]=m*d-j,b[8]=a*d+n,b[1]=h*e,b[5]=n*d+a,b[9]=j*d-m,b[2]=-d,b[6]=c*h,b[10]=f*h):"YZX"===a.order?(a=f*h,j=f*d,m=c*h,n=c*d,b[0]=h*i,b[4]=n-a*e,b[8]=m*e+j,b[1]=e,b[5]=f*i,b[9]=-c*i,b[2]=-d*i,b[6]=j*e+m,b[10]=a-n*e):"XZY"===a.order&&(a=f*h,j=f*d,m=
c*h,n=c*d,b[0]=h*i,b[4]=-e,b[8]=d*i,b[1]=a*e+n,b[5]=f*i,b[9]=j*e-m,b[2]=m*e-j,b[6]=c*i,b[10]=n*e+a);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},setRotationFromQuaternion:function(a){console.warn("DEPRECATED: Matrix4's .setRotationFromQuaternion() has been deprecated in favor of makeRotationFromQuaternion.  Please update your code.");return this.makeRotationFromQuaternion(a)},makeRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,h=c+c,i=d+d,j=e+e,
a=c*h,m=c*i,c=c*j,n=d*i,d=d*j,e=e*j,h=f*h,i=f*i,f=f*j;b[0]=1-(n+e);b[4]=m-f;b[8]=c+i;b[1]=m+f;b[5]=1-(a+e);b[9]=d-h;b[2]=c-i;b[6]=d+h;b[10]=1-(a+n);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},lookAt:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f){var h=this.elements;c.subVectors(d,e).normalize();0===c.length()&&(c.z=1);a.crossVectors(f,c).normalize();0===a.length()&&(c.x+=1E-4,a.crossVectors(f,c).normalize());b.crossVectors(c,
a);h[0]=a.x;h[4]=b.x;h[8]=c.x;h[1]=a.y;h[5]=b.y;h[9]=c.y;h[2]=a.z;h[6]=b.z;h[10]=c.z;return this}}(),multiply:function(a,b){return void 0!==b?(console.warn("DEPRECATED: Matrix4's .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements,e=this.elements,f=c[0],h=c[4],i=c[8],j=c[12],m=c[1],n=c[5],p=c[9],l=c[13],t=c[2],u=c[6],k=c[10],q=c[14],s=c[3],r=c[7],
x=c[11],c=c[15],y=d[0],z=d[4],D=d[8],E=d[12],B=d[1],w=d[5],M=d[9],I=d[13],L=d[2],G=d[6],v=d[10],H=d[14],A=d[3],Q=d[7],N=d[11],d=d[15];e[0]=f*y+h*B+i*L+j*A;e[4]=f*z+h*w+i*G+j*Q;e[8]=f*D+h*M+i*v+j*N;e[12]=f*E+h*I+i*H+j*d;e[1]=m*y+n*B+p*L+l*A;e[5]=m*z+n*w+p*G+l*Q;e[9]=m*D+n*M+p*v+l*N;e[13]=m*E+n*I+p*H+l*d;e[2]=t*y+u*B+k*L+q*A;e[6]=t*z+u*w+k*G+q*Q;e[10]=t*D+u*M+k*v+q*N;e[14]=t*E+u*I+k*H+q*d;e[3]=s*y+r*B+x*L+c*A;e[7]=s*z+r*w+x*G+c*Q;e[11]=s*D+r*M+x*v+c*N;e[15]=s*E+r*I+x*H+c*d;return this},multiplyToArray:function(a,
b,c){var d=this.elements;this.multiplyMatrices(a,b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},multiplyVector3:function(a){console.warn("DEPRECATED: Matrix4's .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");
return a.applyProjection(this)},multiplyVector4:function(a){console.warn("DEPRECATED: Matrix4's .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector3Array:function(){var a=new THREE.Vector3;return function(b){for(var c=0,d=b.length;c<d;c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyProjection(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),rotateAxis:function(a){console.warn("DEPRECATED: Matrix4's .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
a.transformDirection(this)},crossVector:function(a){console.warn("DEPRECATED: Matrix4's .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],h=a[5],i=a[9],j=a[13],m=a[2],n=a[6],p=a[10],l=a[14];return a[3]*(+e*i*n-d*j*n-e*h*p+c*j*p+d*h*l-c*i*l)+a[7]*(+b*i*l-b*j*p+e*f*p-d*f*l+d*j*m-e*i*m)+a[11]*(+b*j*n-b*h*l-e*f*n+c*f*l+e*h*m-c*j*m)+a[15]*(-d*h*m-b*i*n+b*h*p+d*f*n-c*f*
p+c*i*m)},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},flattenToArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[1];a[2]=b[2];a[3]=b[3];a[4]=b[4];a[5]=b[5];a[6]=b[6];a[7]=b[7];a[8]=b[8];a[9]=b[9];a[10]=b[10];a[11]=b[11];a[12]=b[12];a[13]=b[13];a[14]=b[14];a[15]=b[15];return a},flattenToArrayOffset:function(a,b){var c=this.elements;
a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a},getPosition:function(){var a=new THREE.Vector3;return function(){console.warn("DEPRECATED: Matrix4's .getPosition() has been removed. Use Vector3.getPositionFromMatrix( matrix ) instead.");var b=this.elements;return a.set(b[12],b[13],b[14])}}(),setPosition:function(a){var b=this.elements;
b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements,e=d[0],f=d[4],h=d[8],i=d[12],j=d[1],m=d[5],n=d[9],p=d[13],l=d[2],t=d[6],u=d[10],k=d[14],q=d[3],s=d[7],r=d[11],d=d[15];c[0]=n*k*s-p*u*s+p*t*r-m*k*r-n*t*d+m*u*d;c[4]=i*u*s-h*k*s-i*t*r+f*k*r+h*t*d-f*u*d;c[8]=h*p*s-i*n*s+i*m*r-f*p*r-h*m*d+f*n*d;c[12]=i*n*t-h*p*t-i*m*u+f*p*u+h*m*k-f*n*k;c[1]=p*u*q-n*k*q-p*l*r+j*k*r+n*l*d-j*u*d;c[5]=h*k*q-i*u*q+i*l*r-e*k*r-h*l*d+e*u*d;c[9]=i*n*q-h*p*q-i*j*r+e*p*r+h*j*d-
e*n*d;c[13]=h*p*l-i*n*l+i*j*u-e*p*u-h*j*k+e*n*k;c[2]=m*k*q-p*t*q+p*l*s-j*k*s-m*l*d+j*t*d;c[6]=i*t*q-f*k*q-i*l*s+e*k*s+f*l*d-e*t*d;c[10]=f*p*q-i*m*q+i*j*s-e*p*s-f*j*d+e*m*d;c[14]=i*m*l-f*p*l-i*j*t+e*p*t+f*j*k-e*m*k;c[3]=n*t*q-m*u*q-n*l*s+j*u*s+m*l*r-j*t*r;c[7]=f*u*q-h*t*q+h*l*s-e*u*s-f*l*r+e*t*r;c[11]=h*m*q-f*n*q-h*j*s+e*n*s+f*j*r-e*m*r;c[15]=f*n*l-h*m*l+h*j*t-e*n*t-f*j*u+e*m*u;c=e*c[0]+j*c[4]+l*c[8]+q*c[12];if(0==c){if(b)throw Error("Matrix4.getInverse(): can't invert matrix, determinant is 0");console.warn("Matrix4.getInverse(): can't invert matrix, determinant is 0");
this.identity();return this}this.multiplyScalar(1/c);return this},translate:function(){console.warn("DEPRECATED: Matrix4's .translate() has been removed.")},rotateX:function(){console.warn("DEPRECATED: Matrix4's .rotateX() has been removed.")},rotateY:function(){console.warn("DEPRECATED: Matrix4's .rotateY() has been removed.")},rotateZ:function(){console.warn("DEPRECATED: Matrix4's .rotateZ() has been removed.")},rotateByAxis:function(){console.warn("DEPRECATED: Matrix4's .rotateByAxis() has been removed.")},
scale:function(a){var b=this.elements,c=a.x,d=a.y,a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],Math.max(a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10])))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(1,
0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,h=a.y,i=a.z,j=e*f,m=e*h;this.set(j*f+c,j*h-d*i,j*i+d*h,0,j*h+d*i,m*h+c,m*i-d*f,0,j*i-d*h,m*i+d*f,e*i*i+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,
0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},compose:function(a,b,c){this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this},decompose:function(){var a=new THREE.Vector3,b=new THREE.Matrix4;return function(c,d,e){var f=this.elements,h=a.set(f[0],f[1],f[2]).length(),i=a.set(f[4],f[5],f[6]).length(),j=a.set(f[8],f[9],f[10]).length();c.x=f[12];c.y=f[13];c.z=f[14];b.elements.set(this.elements);var c=1/h,f=1/i,m=1/j;b.elements[0]*=c;b.elements[1]*=c;b.elements[2]*=c;b.elements[4]*=
f;b.elements[5]*=f;b.elements[6]*=f;b.elements[8]*=m;b.elements[9]*=m;b.elements[10]*=m;d.setFromRotationMatrix(b);e.x=h;e.y=i;e.z=j;return this}}(),makeFrustum:function(a,b,c,d,e,f){var h=this.elements;h[0]=2*e/(b-a);h[4]=0;h[8]=(b+a)/(b-a);h[12]=0;h[1]=0;h[5]=2*e/(d-c);h[9]=(d+c)/(d-c);h[13]=0;h[2]=0;h[6]=0;h[10]=-(f+e)/(f-e);h[14]=-2*f*e/(f-e);h[3]=0;h[7]=0;h[11]=-1;h[15]=0;return this},makePerspective:function(a,b,c,d){var a=c*Math.tan(THREE.Math.degToRad(0.5*a)),e=-a;return this.makeFrustum(e*
b,a*b,e,a,c,d)},makeOrthographic:function(a,b,c,d,e,f){var h=this.elements,i=b-a,j=c-d,m=f-e;h[0]=2/i;h[4]=0;h[8]=0;h[12]=-((b+a)/i);h[1]=0;h[5]=2/j;h[9]=0;h[13]=-((c+d)/j);h[2]=0;h[6]=0;h[10]=-2/m;h[14]=-((f+e)/m);h[3]=0;h[7]=0;h[11]=0;h[15]=1;return this},fromArray:function(a){this.elements.set(a);return this},toArray:function(){var a=this.elements;return[a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]]},clone:function(){var a=this.elements;return new THREE.Matrix4(a[0],
a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15])}};THREE.Frustum=function(a,b,c,d,e,f){this.planes=[void 0!==a?a:new THREE.Plane,void 0!==b?b:new THREE.Plane,void 0!==c?c:new THREE.Plane,void 0!==d?d:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==f?f:new THREE.Plane]};
THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(a,b,c,d,e,f){var h=this.planes;h[0].copy(a);h[1].copy(b);h[2].copy(c);h[3].copy(d);h[4].copy(e);h[5].copy(f);return this},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements,a=c[0],d=c[1],e=c[2],f=c[3],h=c[4],i=c[5],j=c[6],m=c[7],n=c[8],p=c[9],l=c[10],t=c[11],u=c[12],k=c[13],q=c[14],c=c[15];b[0].setComponents(f-a,m-h,t-n,c-u).normalize();b[1].setComponents(f+
a,m+h,t+n,c+u).normalize();b[2].setComponents(f+d,m+i,t+p,c+k).normalize();b[3].setComponents(f-d,m-i,t-p,c-k).normalize();b[4].setComponents(f-e,m-j,t-l,c-q).normalize();b[5].setComponents(f+e,m+j,t+l,c+q).normalize();return this},intersectsObject:function(){var a=new THREE.Vector3;return function(b){var c=b.geometry,b=b.matrixWorld;null===c.boundingSphere&&c.computeBoundingSphere();c=-c.boundingSphere.radius*b.getMaxScaleOnAxis();a.getPositionFromMatrix(b);for(var b=this.planes,d=0;6>d;d++)if(b[d].distanceToPoint(a)<
c)return!1;return!0}}(),intersectsSphere:function(a){for(var b=this.planes,c=a.center,a=-a.radius,d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},intersectsBox:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){for(var d=this.planes,e=0;6>e;e++){var f=d[e];a.x=0<f.normal.x?c.min.x:c.max.x;b.x=0<f.normal.x?c.max.x:c.min.x;a.y=0<f.normal.y?c.min.y:c.max.y;b.y=0<f.normal.y?c.max.y:c.min.y;a.z=0<f.normal.z?c.min.z:c.max.z;b.z=0<f.normal.z?c.max.z:c.min.z;var h=f.distanceToPoint(a),
f=f.distanceToPoint(b);if(0>h&&0>f)return!1}return!0}}(),containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0},clone:function(){return(new THREE.Frustum).copy(this)}};THREE.Math={PI2:2*Math.PI,generateUUID:function(){var a="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=Array(36),c=0,d;return function(){for(var e=0;36>e;e++)8==e||13==e||18==e||23==e?b[e]="-":14==e?b[e]="4":(2>=c&&(c=33554432+16777216*Math.random()|0),d=c&15,c>>=4,b[e]=a[19==e?d&3|8:d]);return b.join("")}}(),clamp:function(a,b,c){return a<b?b:a>c?c:a},clampBottom:function(a,b){return a<b?b:a},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},smoothstep:function(a,
b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(0.5-Math.random())},sign:function(a){return 0>a?-1:0<a?1:0},degToRad:function(){var a=Math.PI/
180;return function(b){return b*a}}(),radToDeg:function(){var a=180/Math.PI;return function(b){return b*a}}()};THREE.Vertex=function(a){console.warn("THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.");return a};THREE.UV=function(a,b){console.warn("THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.");return new THREE.Vector2(a,b)};THREE.Spline=function(a){function b(a,b,c,d,e,f,h){a=0.5*(c-a);d=0.5*(d-b);return(2*(b-c)+a+d)*h+(-3*(b-c)-2*a-d)*f+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,h,i,j,m,n,p,l;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;f=Math.floor(e);h=e-f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>this.points.length-2?this.points.length-1:f+1;c[3]=f>this.points.length-3?this.points.length-1:
f+2;m=this.points[c[0]];n=this.points[c[1]];p=this.points[c[2]];l=this.points[c[3]];i=h*h;j=h*i;d.x=b(m.x,n.x,p.x,l.x,h,i,j);d.y=b(m.y,n.y,p.y,l.y,h,i,j);d.z=b(m.z,n.z,p.z,l.z,h,i,j);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,f=new THREE.Vector3,h=new THREE.Vector3,i=[],j=0;i[0]=0;a||(a=100);c=this.points.length*a;f.copy(this.points[0]);for(a=1;a<c;a++)b=
a/c,d=this.getPoint(b),h.copy(d),j+=h.distanceTo(f),f.copy(d),b*=this.points.length-1,b=Math.floor(b),b!=e&&(i[b]=j,e=b);i[i.length]=j;return{chunks:i,total:j}};this.reparametrizeByArcLength=function(a){var b,c,d,e,f,h,i=[],j=new THREE.Vector3,m=this.getLength();i.push(j.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=m.chunks[b]-m.chunks[b-1];h=Math.ceil(a*c/m.total);e=(b-1)/(this.points.length-1);f=b/(this.points.length-1);for(c=1;c<h-1;c++)d=e+c*(1/h)*(f-e),d=this.getPoint(d),
i.push(j.copy(d).clone());i.push(j.copy(this.points[b]).clone())}this.points=i}};THREE.Box2=function(a,b){this.min=void 0!==a?a:new THREE.Vector2(Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector2(-Infinity,-Infinity)};
THREE.Box2.prototype={constructor:THREE.Box2,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){if(0<a.length){var b=a[0];this.min.copy(b);this.max.copy(b);for(var c=1,d=a.length;c<d;c++)b=a[c],b.x<this.min.x?this.min.x=b.x:b.x>this.max.x&&(this.max.x=b.x),b.y<this.min.y?this.min.y=b.y:b.y>this.max.y&&(this.max.y=b.y)}else this.makeEmpty();return this},setFromCenterAndSize:function(){var a=new THREE.Vector2;return function(b,c){var d=a.copy(c).multiplyScalar(0.5);
this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){return(a||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(0.5)},size:function(a){return(a||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);
this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y?!0:!1},getParameter:function(a){return new THREE.Vector2((a.x-this.min.x)/(this.max.x-this.min.x),
(a.y-this.min.y)/(this.max.y-this.min.y))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector2).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector2;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);
return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box2).copy(this)}};THREE.Box3=function(a,b){this.min=void 0!==a?a:new THREE.Vector3(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector3(-Infinity,-Infinity,-Infinity)};
THREE.Box3.prototype={constructor:THREE.Box3,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){if(0<a.length){var b=a[0];this.min.copy(b);this.max.copy(b);for(var c=1,d=a.length;c<d;c++)b=a[c],b.x<this.min.x?this.min.x=b.x:b.x>this.max.x&&(this.max.x=b.x),b.y<this.min.y?this.min.y=b.y:b.y>this.max.y&&(this.max.y=b.y),b.z<this.min.z?this.min.z=b.z:b.z>this.max.z&&(this.max.z=b.z)}else this.makeEmpty();return this},setFromCenterAndSize:function(){var a=new THREE.Vector3;
return function(b,c){var d=a.copy(c).multiplyScalar(0.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),setFromObject:function(){var a=new THREE.Vector3;return function(b){var c=this;b.updateMatrixWorld(!0);this.makeEmpty();b.traverse(function(b){if(void 0!==b.geometry&&void 0!==b.geometry.vertices)for(var e=b.geometry.vertices,f=0,h=e.length;f<h;f++)a.copy(e[f]),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a)});return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);
return this},makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(a){return(a||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(0.5)},size:function(a){return(a||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);
this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z?!0:!1},getParameter:function(a){return new THREE.Vector3((a.x-this.min.x)/(this.max.x-this.min.x),
(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector3).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=
new THREE.Vector3;return function(b){b=b||new THREE.Sphere;b.center=this.center();b.radius=0.5*this.size(a).length();return b}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},applyMatrix4:function(){var a=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(b){a[0].set(this.min.x,this.min.y,
this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(b);a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.makeEmpty();this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);
this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box3).copy(this)}};THREE.Triangle=function(a,b,c){this.a=void 0!==a?a:new THREE.Vector3;this.b=void 0!==b?b:new THREE.Vector3;this.c=void 0!==c?c:new THREE.Vector3};THREE.Triangle.normal=function(){var a=new THREE.Vector3;return function(b,c,d,e){e=e||new THREE.Vector3;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}();
THREE.Triangle.barycoordFromPoint=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,h,i){a.subVectors(h,e);b.subVectors(f,e);c.subVectors(d,e);var d=a.dot(a),e=a.dot(b),f=a.dot(c),j=b.dot(b),h=b.dot(c),m=d*j-e*e,i=i||new THREE.Vector3;if(0==m)return i.set(-2,-1,-1);m=1/m;j=(j*f-e*h)*m;d=(d*h-e*f)*m;return i.set(1-j-d,d,j)}}();
THREE.Triangle.containsPoint=function(){var a=new THREE.Vector3;return function(b,c,d,e){b=THREE.Triangle.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}();
THREE.Triangle.intersectionRay=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Vector3;return function(e,f,h,i,j){b.subVectors(h,f);c.subVectors(i,f);d.crossVectors(b,c);h=e.direction.dot(d);if(0<h){if(j)return null;j=1}else if(0>h)j=-1,h=-h;else return null;a.subVectors(e.origin,f);f=j*e.direction.dot(c.crossVectors(a,c));if(0>f)return null;i=j*e.direction.dot(b.cross(a));if(0>i||f+i>h)return null;f=-j*a.dot(d);return 0>f?null:e.at(f/h)}}();
THREE.Triangle.prototype={constructor:THREE.Triangle,set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,this.b);return 0.5*a.cross(b).length()}}(),midpoint:function(a){return(a||
new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return THREE.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return THREE.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,b)},containsPoint:function(a){return THREE.Triangle.containsPoint(a,this.a,this.b,this.c)},intersectionRay:function(a,b){return THREE.Triangle.intersectionRay(a,this.a,
this.b,this.c,b)},equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)},clone:function(){return(new THREE.Triangle).copy(this)}};THREE.Sphere=function(a,b){this.center=void 0!==a?a:new THREE.Vector3;this.radius=void 0!==b?b:0};
THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromPoints:function(a){for(var b,c=0,d=0,e=a.length;d<e;d++)b=a[d].lengthSq(),c=Math.max(c,b);this.center.set(0,0,0);this.radius=Math.sqrt(c);return this},copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},empty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-
this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},clampPoint:function(a,b){var c=this.center.distanceToSquared(a),d=b||new THREE.Vector3;d.copy(a);c>this.radius*this.radius&&(d.sub(this.center).normalize(),d.multiplyScalar(this.radius).add(this.center));return d},getBoundingBox:function(a){a=a||new THREE.Box3;a.set(this.center,this.center);a.expandByScalar(this.radius);return a},applyMatrix4:function(a){this.center.applyMatrix4(a);
this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius},clone:function(){return(new THREE.Sphere).copy(this)}};THREE.Plane=function(a,b){this.normal=void 0!==a?a:new THREE.Vector3(1,0,0);this.constant=void 0!==b?b:0};
THREE.Plane.prototype={constructor:THREE.Plane,set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,
c);return this}}(),copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,
b){var c=this.distanceToPoint(a);return(b||new THREE.Vector3).copy(this.normal).multiplyScalar(c)},isIntersectionLine:function(a){var b=this.distanceToPoint(a.start),a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectLine:function(){var a=new THREE.Vector3;return function(b,c){var d=c||new THREE.Vector3,e=b.delta(a),f=this.normal.dot(e);if(0==f){if(0==this.distanceToPoint(b.start))return d.copy(b.start)}else return f=-(b.start.dot(this.normal)+this.constant)/f,0>f||1<f?void 0:d.copy(e).multiplyScalar(f).add(b.start)}}(),
coplanarPoint:function(a){return(a||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d){var d=d||(new THREE.Matrix3).getNormalMatrix(c),e=a.copy(this.normal).applyMatrix3(d),f=this.coplanarPoint(b);f.applyMatrix4(c);this.setFromNormalAndCoplanarPoint(e,f);return this}}(),translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&
a.constant==this.constant},clone:function(){return(new THREE.Plane).copy(this)}};THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};
THREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.oldTime=this.startTime=void 0!==self.performance&&void 0!==self.performance.now?self.performance.now():Date.now();this.running=!0},stop:function(){this.getElapsedTime();this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=void 0!==self.performance&&void 0!==self.performance.now?self.performance.now():Date.now(),
a=0.001*(b-this.oldTime);this.oldTime=b;this.elapsedTime+=a}return a}};THREE.EventDispatcher=function(){};
THREE.EventDispatcher.prototype={constructor:THREE.EventDispatcher,apply:function(a){a.addEventListener=THREE.EventDispatcher.prototype.addEventListener;a.hasEventListener=THREE.EventDispatcher.prototype.hasEventListener;a.removeEventListener=THREE.EventDispatcher.prototype.removeEventListener;a.dispatchEvent=THREE.EventDispatcher.prototype.dispatchEvent},addEventListener:function(a,b){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]);-1===c[a].indexOf(b)&&
c[a].push(b)},hasEventListener:function(a,b){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&-1!==c[a].indexOf(b)?!0:!1},removeEventListener:function(a,b){if(void 0!==this._listeners){var c=this._listeners,d=c[a].indexOf(b);-1!==d&&c[a].splice(d,1)}},dispatchEvent:function(a){if(void 0!==this._listeners){var b=this._listeners[a.type];if(void 0!==b){a.target=this;for(var c=0,d=b.length;c<d;c++)b[c].call(this,a)}}}};(function(a){a.Raycaster=function(b,c,d,e){this.ray=new a.Ray(b,c);this.near=d||0;this.far=e||Infinity};var b=new a.Sphere,c=new a.Ray;new a.Plane;new a.Vector3;var d=new a.Vector3,e=new a.Matrix4,f=function(a,b){return a.distance-b.distance},h=function(f,i,n){if(f instanceof a.Particle){d.getPositionFromMatrix(f.matrixWorld);var p=i.ray.distanceToPoint(d);if(p>f.scale.x)return n;n.push({distance:p,point:f.position,face:null,object:f})}else if(f instanceof a.LOD)d.getPositionFromMatrix(f.matrixWorld),
p=i.ray.origin.distanceTo(d),h(f.getObjectForDistance(p),i,n);else if(f instanceof a.Mesh){var l=f.geometry;d.getPositionFromMatrix(f.matrixWorld);null===l.boundingSphere&&l.computeBoundingSphere();b.set(d,l.boundingSphere.radius*f.matrixWorld.getMaxScaleOnAxis());if(!1===i.ray.isIntersectionSphere(b))return n;var t=l.vertices;if(l instanceof a.BufferGeometry){var u=f.material;if(void 0===u||!1===l.dynamic)return n;var k,q,s=i.precision;e.getInverse(f.matrixWorld);c.copy(i.ray).applyMatrix4(e);var r,
t=!1;l.attributes.index&&(t=!0);r=new a.Vector3;for(var x=new a.Vector3,y=new a.Vector3,z=l.offsets,D=l.attributes.index.array,E=l.attributes.position.array,B=l.offsets.length,w=0;w<B;++w)for(var p=z[w].start,M=z[w].index,l=p,I=p+z[w].count;l<I;l+=3)if(t?(p=M+D[l],k=M+D[l+1],q=M+D[l+2]):(p=M,k=M+1,q=M+2),r.set(E[3*p],E[3*p+1],E[3*p+2]),x.set(E[3*k],E[3*k+1],E[3*k+2]),y.set(E[3*q],E[3*q+1],E[3*q+2]),k=a.Triangle.intersectionRay(c,r,x,y,u.side!==a.DoubleSide))k.applyMatrix4(f.matrixWorld),p=i.ray.origin.distanceTo(k),
p<s||p<i.near||p>i.far||n.push({distance:p,point:k,face:null,faceIndex:null,object:f})}else if(l instanceof a.Geometry){x=f.material instanceof a.MeshFaceMaterial;y=!0===x?f.material.materials:null;s=i.precision;e.getInverse(f.matrixWorld);c.copy(i.ray).applyMatrix4(e);z=0;for(r=l.faces.length;z<r;z++)if(D=l.faces[z],u=!0===x?y[D.materialIndex]:f.material,void 0!==u&&(p=t[D.a],k=t[D.b],q=t[D.c],k=a.Triangle.intersectionRay(c,p,k,q,u.side!==a.DoubleSide)))k.applyMatrix4(f.matrixWorld),p=i.ray.origin.distanceTo(k),
p<s||p<i.near||p>i.far||n.push({distance:p,point:k,face:D,faceIndex:z,object:f})}}else if(f instanceof a.Line){s=i.linePrecision;u=s*s;l=f.geometry;null===l.boundingSphere&&l.computeBoundingSphere();d.getPositionFromMatrix(f.matrixWorld);b.set(d,l.boundingSphere.radius*f.matrixWorld.getMaxScaleOnAxis());if(!1===i.ray.isIntersectionSphere(b))return n;e.getInverse(f.matrixWorld);c.copy(i.ray).applyMatrix4(e);t=l.vertices;s=t.length;k=new a.Vector3;q=new a.Vector3;r=f.type===a.LineStrip?1:2;for(l=0;l<
s-1;l+=r)c.distanceSqToSegment(t[l],t[l+1],q,k)<=u&&(p=c.origin.distanceTo(q),i.near<=p&&p<=i.far&&n.push({distance:p,point:k.clone().applyMatrix4(f.matrixWorld),face:null,faceIndex:null,object:f}))}},i=function(a,b,c){for(var a=a.getDescendants(),d=0,e=a.length;d<e;d++)h(a[d],b,c)};a.Raycaster.prototype.precision=1E-4;a.Raycaster.prototype.linePrecision=1;a.Raycaster.prototype.set=function(a,b){this.ray.set(a,b)};a.Raycaster.prototype.intersectObject=function(a,b){var c=[];!0===b&&i(a,this,c);h(a,
this,c);c.sort(f);return c};a.Raycaster.prototype.intersectObjects=function(a,b){for(var c=[],d=0,e=a.length;d<e;d++)h(a[d],this,c),!0===b&&i(a[d],this,c);c.sort(f);return c}})(THREE);THREE.Object3D=function(){this.id=THREE.Object3DIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.parent=void 0;this.children=[];this.up=new THREE.Vector3(0,1,0);this.position=new THREE.Vector3;this.rotation=new THREE.Euler;this.quaternion=new THREE.Quaternion;this.scale=new THREE.Vector3(1,1,1);this.rotation._quaternion=this.quaternion;this.quaternion._euler=this.rotation;this.renderDepth=null;this.rotationAutoUpdate=!0;this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;
this.visible=this.matrixWorldNeedsUpdate=this.matrixAutoUpdate=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.userData={}};
THREE.Object3D.prototype={constructor:THREE.Object3D,get eulerOrder(){console.warn("DEPRECATED: Object3D's .eulerOrder has been moved to Object3D's .rotation.order.");return this.rotation.order},set eulerOrder(a){console.warn("DEPRECATED: Object3D's .eulerOrder has been moved to Object3D's .rotation.order.");this.rotation.order=a},get useQuaternion(){console.warn("DEPRECATED: Object3D's .useQuaternion has been removed. The library now uses quaternions by default.")},set useQuaternion(a){console.warn("DEPRECATED: Object3D's .useQuaternion has been removed. The library now uses quaternions by default.")},
applyMatrix:function(){var a=new THREE.Matrix4;return function(b){this.matrix.multiplyMatrices(b,this.matrix);this.position.getPositionFromMatrix(this.matrix);this.scale.getScaleFromMatrix(this.matrix);a.extractRotation(this.matrix);this.quaternion.setFromRotationMatrix(a)}}(),setRotationFromAxisAngle:function(a,b){this.quaternion.setFromAxisAngle(a,b)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,!0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},
setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(){var a=new THREE.Quaternion;return function(b,c){a.setFromAxisAngle(b,c);this.quaternion.multiply(a);return this}}(),rotateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.rotateOnAxis(a,
b)}}(),translateOnAxis:function(){var a=new THREE.Vector3;return function(b,c){a.copy(b);a.applyQuaternion(this.quaternion);this.position.add(a.multiplyScalar(c));return this}}(),translate:function(a,b){console.warn("DEPRECATED: Object3D's .translate() has been removed. Use .translateOnAxis( axis, distance ) instead. Note args have been changed.");return this.translateOnAxis(b,a)},translateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.translateOnAxis(a,b)}}(),translateY:function(){var a=
new THREE.Vector3(0,1,0);return function(b){return this.translateOnAxis(a,b)}}(),translateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.translateOnAxis(a,b)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var a=new THREE.Matrix4;return function(b){return b.applyMatrix4(a.getInverse(this.matrixWorld))}}(),lookAt:function(){var a=new THREE.Matrix4;return function(b){a.lookAt(b,this.position,this.up);this.quaternion.setFromRotationMatrix(a)}}(),
add:function(a){if(a===this)console.warn("THREE.Object3D.add: An object can't be added as a child of itself.");else if(a instanceof THREE.Object3D){void 0!==a.parent&&a.parent.remove(a);a.parent=this;a.dispatchEvent({type:"added"});this.children.push(a);for(var b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__addObject(a)}},remove:function(a){var b=this.children.indexOf(a);if(-1!==b){a.parent=void 0;a.dispatchEvent({type:"removed"});this.children.splice(b,1);for(b=this;void 0!==
b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__removeObject(a)}},traverse:function(a){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverse(a)},getObjectById:function(a,b){for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c];if(e.id===a||!0===b&&(e=e.getObjectById(a,b),void 0!==e))return e}},getObjectByName:function(a,b){for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c];if(e.name===a||!0===b&&(e=e.getObjectByName(a,b),void 0!==
e))return e}},getChildByName:function(a,b){console.warn("DEPRECATED: Object3D's .getChildByName() has been renamed to .getObjectByName().");return this.getObjectByName(a,b)},getDescendants:function(a){void 0===a&&(a=[]);Array.prototype.push.apply(a,this.children);for(var b=0,c=this.children.length;b<c;b++)this.children[b].getDescendants(a);return a},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===
this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===a)void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},clone:function(a,b){void 0===a&&(a=new THREE.Object3D);void 0===b&&(b=!0);a.name=this.name;a.up.copy(this.up);a.position.copy(this.position);a.quaternion.copy(this.quaternion);
a.scale.copy(this.scale);a.renderDepth=this.renderDepth;a.rotationAutoUpdate=this.rotationAutoUpdate;a.matrix.copy(this.matrix);a.matrixWorld.copy(this.matrixWorld);a.matrixAutoUpdate=this.matrixAutoUpdate;a.matrixWorldNeedsUpdate=this.matrixWorldNeedsUpdate;a.visible=this.visible;a.castShadow=this.castShadow;a.receiveShadow=this.receiveShadow;a.frustumCulled=this.frustumCulled;a.userData=JSON.parse(JSON.stringify(this.userData));if(!0===b)for(var c=0;c<this.children.length;c++)a.add(this.children[c].clone());
return a}};THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype);THREE.Object3DIdCount=0;THREE.Projector=function(){function a(){if(j===n){var a=new THREE.RenderableVertex;m.push(a);n++;j++;return a}return m[j++]}function b(a,b){return a.z!==b.z?b.z-a.z:a.id!==b.id?a.id-b.id:0}function c(a,b){var c=0,d=1,e=a.z+a.w,f=b.z+b.w,h=-a.z+a.w,i=-b.z+b.w;if(0<=e&&0<=f&&0<=h&&0<=i)return!0;if(0>e&&0>f||0>h&&0>i)return!1;0>e?c=Math.max(c,e/(e-f)):0>f&&(d=Math.min(d,e/(e-f)));0>h?c=Math.max(c,h/(h-i)):0>i&&(d=Math.min(d,h/(h-i)));if(d<c)return!1;a.lerp(b,c);b.lerp(a,1-d);return!0}var d,e,f=[],h=
0,i,j,m=[],n=0,p,l,t=[],u=0,k,q,s=[],r=0,x,y,z=[],D=0,E={objects:[],sprites:[],lights:[],elements:[]},B=new THREE.Vector3,w=new THREE.Vector4,M=new THREE.Box3(new THREE.Vector3(-1,-1,-1),new THREE.Vector3(1,1,1)),I=new THREE.Box3,L=Array(3),G=new THREE.Matrix4,v=new THREE.Matrix4,H,A=new THREE.Matrix4,Q=new THREE.Matrix3,N=new THREE.Matrix3,Ca=new THREE.Vector3,ra=new THREE.Frustum,wa=new THREE.Vector4,xa=new THREE.Vector4;this.projectVector=function(a,b){b.matrixWorldInverse.getInverse(b.matrixWorld);
v.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);return a.applyProjection(v)};this.unprojectVector=function(a,b){b.projectionMatrixInverse.getInverse(b.projectionMatrix);v.multiplyMatrices(b.matrixWorld,b.projectionMatrixInverse);return a.applyProjection(v)};this.pickingRay=function(a,b){a.z=-1;var c=new THREE.Vector3(a.x,a.y,1);this.unprojectVector(a,b);this.unprojectVector(c,b);c.sub(a).normalize();return new THREE.Raycaster(a,c)};var U=function(a){if(e===h){var b=new THREE.RenderableObject;
f.push(b);h++;e++;d=b}else d=f[e++];d.id=a.id;d.object=a;null!==a.renderDepth?d.z=a.renderDepth:(B.getPositionFromMatrix(a.matrixWorld),B.applyProjection(v),d.z=B.z);return d},ea=function(a){if(!1!==a.visible){a instanceof THREE.Light?E.lights.push(a):a instanceof THREE.Mesh||a instanceof THREE.Line?(!1===a.frustumCulled||!0===ra.intersectsObject(a))&&E.objects.push(U(a)):(a instanceof THREE.Sprite||a instanceof THREE.Particle)&&E.sprites.push(U(a));for(var b=0,c=a.children.length;b<c;b++)ea(a.children[b])}};
this.projectScene=function(d,f,h,n){var Aa=!1,B,U,ma,Z,ja,sa,V,pa,Ba,ba,Sa,Ta;y=q=l=0;E.elements.length=0;!0===d.autoUpdate&&d.updateMatrixWorld();void 0===f.parent&&f.updateMatrixWorld();G.copy(f.matrixWorldInverse.getInverse(f.matrixWorld));v.multiplyMatrices(f.projectionMatrix,G);N.getNormalMatrix(G);ra.setFromMatrix(v);e=0;E.objects.length=0;E.sprites.length=0;E.lights.length=0;ea(d);!0===h&&E.objects.sort(b);d=0;for(h=E.objects.length;d<h;d++)if(V=E.objects[d].object,H=V.matrixWorld,j=0,V instanceof
THREE.Mesh){pa=V.geometry;ma=pa.vertices;Ba=pa.faces;pa=pa.faceVertexUvs;Q.getNormalMatrix(H);Sa=V.material instanceof THREE.MeshFaceMaterial;Ta=!0===Sa?V.material:null;B=0;for(U=ma.length;B<U;B++){i=a();i.positionWorld.copy(ma[B]).applyMatrix4(H);i.positionScreen.copy(i.positionWorld).applyMatrix4(v);var ka=1/i.positionScreen.w;i.positionScreen.x*=ka;i.positionScreen.y*=ka;i.positionScreen.z*=ka;i.visible=!(-1>i.positionScreen.x||1<i.positionScreen.x||-1>i.positionScreen.y||1<i.positionScreen.y||
-1>i.positionScreen.z||1<i.positionScreen.z)}ma=0;for(B=Ba.length;ma<B;ma++)if(U=Ba[ma],ka=!0===Sa?Ta.materials[U.materialIndex]:V.material,void 0!==ka&&(sa=ka.side,Z=m[U.a],ja=m[U.b],ba=m[U.c],L[0]=Z.positionScreen,L[1]=ja.positionScreen,L[2]=ba.positionScreen,!0===Z.visible||!0===ja.visible||!0===ba.visible||M.isIntersectionBox(I.setFromPoints(L))))if(Aa=0>(ba.positionScreen.x-Z.positionScreen.x)*(ja.positionScreen.y-Z.positionScreen.y)-(ba.positionScreen.y-Z.positionScreen.y)*(ja.positionScreen.x-
Z.positionScreen.x),sa===THREE.DoubleSide||Aa===(sa===THREE.FrontSide)){if(l===u){var Da=new THREE.RenderableFace3;t.push(Da);u++;l++;p=Da}else p=t[l++];p.id=V.id;p.v1.copy(Z);p.v2.copy(ja);p.v3.copy(ba);p.normalModel.copy(U.normal);!1===Aa&&(sa===THREE.BackSide||sa===THREE.DoubleSide)&&p.normalModel.negate();p.normalModel.applyMatrix3(Q).normalize();p.normalModelView.copy(p.normalModel).applyMatrix3(N);p.centroidModel.copy(U.centroid).applyMatrix4(H);ba=U.vertexNormals;Z=0;for(ja=Math.min(ba.length,
3);Z<ja;Z++)Da=p.vertexNormalsModel[Z],Da.copy(ba[Z]),!1===Aa&&(sa===THREE.BackSide||sa===THREE.DoubleSide)&&Da.negate(),Da.applyMatrix3(Q).normalize(),p.vertexNormalsModelView[Z].copy(Da).applyMatrix3(N);p.vertexNormalsLength=ba.length;Aa=0;for(Z=Math.min(pa.length,3);Aa<Z;Aa++)if(ba=pa[Aa][ma],void 0!==ba){ja=0;for(sa=ba.length;ja<sa;ja++)p.uvs[Aa][ja]=ba[ja]}p.color=U.color;p.material=ka;Ca.copy(p.centroidModel).applyProjection(v);p.z=Ca.z;E.elements.push(p)}}else if(V instanceof THREE.Line){A.multiplyMatrices(v,
H);ma=V.geometry.vertices;Z=a();Z.positionScreen.copy(ma[0]).applyMatrix4(A);Ba=V.type===THREE.LinePieces?2:1;B=1;for(U=ma.length;B<U;B++)Z=a(),Z.positionScreen.copy(ma[B]).applyMatrix4(A),0<(B+1)%Ba||(ja=m[j-2],wa.copy(Z.positionScreen),xa.copy(ja.positionScreen),!0===c(wa,xa)&&(wa.multiplyScalar(1/wa.w),xa.multiplyScalar(1/xa.w),q===r?(pa=new THREE.RenderableLine,s.push(pa),r++,q++,k=pa):k=s[q++],k.id=V.id,k.v1.positionScreen.copy(wa),k.v2.positionScreen.copy(xa),k.z=Math.max(wa.z,xa.z),k.material=
V.material,V.material.vertexColors===THREE.VertexColors&&(k.vertexColors[0].copy(V.geometry.colors[B]),k.vertexColors[1].copy(V.geometry.colors[B-1])),E.elements.push(k)))}d=0;for(h=E.sprites.length;d<h;d++)V=E.sprites[d].object,H=V.matrixWorld,V instanceof THREE.Particle&&(w.set(H.elements[12],H.elements[13],H.elements[14],1),w.applyMatrix4(v),ka=1/w.w,w.z*=ka,0<w.z&&1>w.z&&(y===D?(Ba=new THREE.RenderableParticle,z.push(Ba),D++,y++,x=Ba):x=z[y++],x.id=V.id,x.x=w.x*ka,x.y=w.y*ka,x.z=w.z,x.object=
V,x.rotation=V.rotation.z,x.scale.x=V.scale.x*Math.abs(x.x-(w.x+f.projectionMatrix.elements[0])/(w.w+f.projectionMatrix.elements[12])),x.scale.y=V.scale.y*Math.abs(x.y-(w.y+f.projectionMatrix.elements[5])/(w.w+f.projectionMatrix.elements[13])),x.material=V.material,E.elements.push(x)));!0===n&&E.elements.sort(b);return E}};THREE.Face3=function(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=d instanceof Array?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=e instanceof Array?e:[];this.vertexTangents=[];this.materialIndex=void 0!==f?f:0;this.centroid=new THREE.Vector3};
THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var a=new THREE.Face3(this.a,this.b,this.c);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.Face4=function(a,b,c,d,e,f,h){return new THREE.Face3(a,b,c,e,f,h)};THREE.Geometry=function(){this.id=THREE.GeometryIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.vertices=[];this.colors=[];this.normals=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.dynamic=!0;this.buffersNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.tangentsNeedUpdate=this.normalsNeedUpdate=
this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1};
THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){for(var b=(new THREE.Matrix3).getNormalMatrix(a),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){var e=this.faces[c];e.normal.applyMatrix3(b).normalize();for(var f=0,h=e.vertexNormals.length;f<h;f++)e.vertexNormals[f].applyMatrix3(b).normalize();e.centroid.applyMatrix4(a)}this.boundingBox instanceof THREE.Box3&&this.computeBoundingBox();this.boundingSphere instanceof
THREE.Sphere&&this.computeBoundingSphere()},computeCentroids:function(){var a,b,c;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],c.centroid.set(0,0,0),c.centroid.add(this.vertices[c.a]),c.centroid.add(this.vertices[c.b]),c.centroid.add(this.vertices[c.c]),c.centroid.divideScalar(3)},computeFaceNormals:function(){for(var a=new THREE.Vector3,b=new THREE.Vector3,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],f=this.vertices[e.a],h=this.vertices[e.b];a.subVectors(this.vertices[e.c],h);b.subVectors(f,
h);a.cross(b);a.normalize();e.normal.copy(a)}},computeVertexNormals:function(a){var b,c,d,e;if(void 0===this.__tmpVertices){e=this.__tmpVertices=Array(this.vertices.length);b=0;for(c=this.vertices.length;b<c;b++)e[b]=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3]}else{e=this.__tmpVertices;b=0;for(c=this.vertices.length;b<c;b++)e[b].set(0,0,0)}if(a){var f,h,i=new THREE.Vector3,j=new THREE.Vector3;new THREE.Vector3;
new THREE.Vector3;new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],a=this.vertices[d.a],f=this.vertices[d.b],h=this.vertices[d.c],i.subVectors(h,f),j.subVectors(a,f),i.cross(j),e[d.a].add(i),e[d.b].add(i),e[d.c].add(i)}else{b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],e[d.a].add(d.normal),e[d.b].add(d.normal),e[d.c].add(d.normal)}b=0;for(c=this.vertices.length;b<c;b++)e[b].normalize();b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d.vertexNormals[0].copy(e[d.a]),d.vertexNormals[1].copy(e[d.b]),
d.vertexNormals[2].copy(e[d.c])},computeVertexNormalsAsync:function(a,b,c,d){function e(a,b,c){a[3*b]+=c.x;a[3*b+1]+=c.y;a[3*b+2]+=c.z}function f(a,b,d,e,f){for(var h=0,i=b,j=(d-b)/s.faces.length;h<s.faces.length;)(function(b){setTimeout(function(){var h=b,k=0;do a(s.faces[h],h),h++,k++;while(k<f&&h<s.faces.length);h<s.faces.length?(i+=j*f,c&&c(i)):(c(d),e())},0)})(h),h+=f}function h(a){a instanceof THREE.Face3?(e(k,a.a,a.normal),e(k,a.b,a.normal),e(k,a.c,a.normal)):a instanceof THREE.Face4&&(e(k,
a.a,a.normal),e(k,a.b,a.normal),e(k,a.c,a.normal),e(k,a.d,a.normal))}function i(){n=0;for(p=s.vertices.length;n<p;n++)q.x=k[3*n],q.y=k[3*n+1],q.z=k[3*n+2],q.normalize(),k[3*n]=q.x,k[3*n+1]=q.y,k[3*n+2]=q.z}function j(a){a instanceof THREE.Face3?(a.vertexNormals[0].set(k[3*a.a],k[3*a.a+1],k[3*a.a+2]),a.vertexNormals[1].set(k[3*a.b],k[3*a.b+1],k[3*a.b+2]),a.vertexNormals[2].set(k[3*a.c],k[3*a.c+1],k[3*a.c+2])):a instanceof THREE.Face4&&(a.vertexNormals[0].set(k[3*a.a],k[3*a.a+1],k[3*a.a+2]),a.vertexNormals[1].set(k[3*
a.b],k[3*a.b+1],k[3*a.b+2]),a.vertexNormals[2].set(k[3*a.c],k[3*a.c+1],k[3*a.c+2]),a.vertexNormals[3].set(k[3*a.d],k[3*a.d+1],k[3*a.d+2]))}function m(a){a instanceof THREE.Face3?(r.set(s.vertices[3*a.c]-s.vertices[3*a.b],s.vertices[3*a.c+1]-s.vertices[3*a.b+1],s.vertices[3*a.c+2]-s.vertices[3*a.b+2]),x.set(s.vertices[3*a.a]-s.vertices[3*a.b],s.vertices[3*a.a+1]-s.vertices[3*a.b+1],s.vertices[3*a.a+2]-s.vertices[3*a.b+2]),r.cross(x),e(k,a.a,r),e(k,a.b,r),e(k,a.c,r)):a instanceof THREE.Face4&&(y.set(s.vertices[3*
a.d]-s.vertices[3*a.b],s.vertices[3*a.d+1]-s.vertices[3*a.b+1],s.vertices[3*a.d+2]-s.vertices[3*a.b+2]),x.set(s.vertices[3*a.a]-s.vertices[3*a.b],s.vertices[3*a.a+1]-s.vertices[3*a.b+1],s.vertices[3*a.a+2]-s.vertices[3*a.b+2]),y.cross(x),e(k,a.a,y),e(k,a.b,y),e(k,a.d,y),z.set(s.vertices[3*a.d]-s.vertices[3*a.c],s.vertices[3*a.d+1]-s.vertices[3*a.c+1],s.vertices[3*a.d+2]-s.vertices[3*a.c+2]),D.set(s.vertices[3*a.b]-s.vertices[3*a.c],s.vertices[3*a.b+1]-s.vertices[3*a.c+1],s.vertices[3*a.b+2]-s.vertices[3*
a.c+2]),z.cross(D),e(k,a.b,z),e(k,a.c,z),e(k,a.d,z))}var n,p,l,t,u,k,q;q=new THREE.Vector3;var s=this,r=new THREE.Vector3,x=new THREE.Vector3,y=new THREE.Vector3,z=new THREE.Vector3,D=new THREE.Vector3;void 0===d&&(d=1E5);if(void 0===this.__tmpVertices){l=new ArrayBuffer(12*this.vertices.length);k=this.__tmpVertices=new Float32Array(l);l=0;for(t=this.faces.length;l<t;l++)u=this.faces[l],u instanceof THREE.Face3?u.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3]:u instanceof THREE.Face4&&
(u.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3])}else{k=this.__tmpVertices;n=0;for(p=this.vertices.length;n<p;n++)k[3*n]=0,k[3*n+1]=0,k[3*n+2]=0}setTimeout(function(){a?f(m,0,0.5,function(){i();f(j,0.5,1,function(){b&&b()},d)},d):f(h,0,0.5,function(){i();f(j,0.5,1,function(){b&&b()},d)},d)},0)},computeMorphNormals:function(){var a,b,c,d,e;c=0;for(d=this.faces.length;c<d;c++){e=this.faces[c];e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=
e.normal.clone();e.__originalVertexNormals||(e.__originalVertexNormals=[]);a=0;for(b=e.vertexNormals.length;a<b;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone()}var f=new THREE.Geometry;f.faces=this.faces;a=0;for(b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={};this.morphNormals[a].faceNormals=[];this.morphNormals[a].vertexNormals=[];e=this.morphNormals[a].faceNormals;
var h=this.morphNormals[a].vertexNormals,i,j;c=0;for(d=this.faces.length;c<d;c++)i=new THREE.Vector3,j={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3},e.push(i),h.push(j)}h=this.morphNormals[a];f.vertices=this.morphTargets[a].vertices;f.computeFaceNormals();f.computeVertexNormals();c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],i=h.faceNormals[c],j=h.vertexNormals[c],i.copy(e.normal),j.a.copy(e.vertexNormals[0]),j.b.copy(e.vertexNormals[1]),j.c.copy(e.vertexNormals[2])}c=0;for(d=
this.faces.length;c<d;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){var a,b,c,d,e,f,h,i,j,m,n,p,l,t,u,k,q,s=[],r=[];c=new THREE.Vector3;var x=new THREE.Vector3,y=new THREE.Vector3,z=new THREE.Vector3,D=new THREE.Vector3;a=0;for(b=this.vertices.length;a<b;a++)s[a]=new THREE.Vector3,r[a]=new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)e=this.faces[a],f=this.faceVertexUvs[0][a],d=e.a,q=e.b,e=e.c,h=this.vertices[d],i=this.vertices[q],
j=this.vertices[e],m=f[0],n=f[1],p=f[2],f=i.x-h.x,l=j.x-h.x,t=i.y-h.y,u=j.y-h.y,i=i.z-h.z,h=j.z-h.z,j=n.x-m.x,k=p.x-m.x,n=n.y-m.y,m=p.y-m.y,p=1/(j*m-k*n),c.set((m*f-n*l)*p,(m*t-n*u)*p,(m*i-n*h)*p),x.set((j*l-k*f)*p,(j*u-k*t)*p,(j*h-k*i)*p),s[d].add(c),s[q].add(c),s[e].add(c),r[d].add(x),r[q].add(x),r[e].add(x);x=["a","b","c","d"];a=0;for(b=this.faces.length;a<b;a++){e=this.faces[a];for(c=0;c<Math.min(e.vertexNormals.length,3);c++)D.copy(e.vertexNormals[c]),d=e[x[c]],q=s[d],y.copy(q),y.sub(D.multiplyScalar(D.dot(q))).normalize(),
z.crossVectors(e.vertexNormals[c],q),d=z.dot(r[d]),d=0>d?-1:1,e.vertexTangents[c]=new THREE.Vector4(y.x,y.y,y.z,d)}this.hasTangents=!0},computeTangentsAsync:function(a,b,c){function d(a,b){ya.set(a[3*b],a[3*b+1],a[3*b+2]);return ya}function e(a,b,c){a[3*b]+=c.x;a[3*b+1]+=c.y;a[3*b+2]+=c.z}function f(a,b,c,d,f,h,i){function j(a,b){!a[b]&&0!=a[b]?a[b]=0:Infinity===a[b]?a[b]=1:-Infinity===a[b]&&(a[b]=-1)}t=a.vertices[b];u=a.vertices[c];k=a.vertices[d];q=l[f];s=l[h];r=l[i];x=u.x-t.x;y=k.x-t.x;z=u.y-t.y;
D=k.y-t.y;E=u.z-t.z;B=k.z-t.z;w=s.x-q.x;M=r.x-q.x;I=s.y-q.y;L=r.y-q.y;G=1/(w*L-M*I);A.set((L*x-I*y)*G,(L*z-I*D)*G,(L*E-I*B)*G);Q.set((w*y-M*x)*G,(w*D-M*z)*G,(w*B-M*E)*G);j(A,"x");j(A,"y");j(A,"z");j(Q,"x");j(Q,"y");j(Q,"z");e(ea,b,A);e(ea,c,A);e(ea,d,A);e(J,b,Q);e(J,c,Q);e(J,d,Q)}function h(a,c,d,e,f){for(var h=0,i=c,j=(d-c)/oa.faces.length;h<oa.faces.length;)(function(c){setTimeout(function(){var h=c,k=0;do a(oa.faces[h],h),h++,k++;while(k<f&&h<oa.faces.length);h<oa.faces.length?(i+=j*f,b&&b(i)):
(b(d),e())},0)})(h),h+=f}function i(a){for(m=0;m<a.vertexNormals.length;m++)ra.copy(a.vertexNormals[m]),n=a[tb[m]],v=d(ea,n),N.copy(v),N.sub(ra.multiplyScalar(ra.dot(v))).normalize(),Ca.crossVectors(a.vertexNormals[m],v),H=Ca.dot(d(J,n)),wa=0>H?-1:1,a.vertexTangents[m].set(N.x,N.y,N.z,wa)}var j,m,n,p,l,t,u,k,q,s,r,x,y,z,D,E,B,w,M,I,L,G,v,H,A=new THREE.Vector3,Q=new THREE.Vector3,N=new THREE.Vector3,Ca=new THREE.Vector3,ra=new THREE.Vector3,wa;for(j=0;j<this.faces.length;j++){p=this.faces[j];for(m=
0;m<p.vertexNormals.length;m++)p.vertexTangents[m]=new THREE.Vector4}void 0===c&&(c=1E5);j=12*this.vertices.length;var xa=new ArrayBuffer(j),U=new ArrayBuffer(j),ea=new Float32Array(xa),J=new Float32Array(U),ya=new THREE.Vector3,tb=["a","b","c","d"],oa=this;h(function(a,b){l=oa.faceVertexUvs[0][b];a instanceof THREE.Face3?f(oa,a.a,a.b,a.c,0,1,2):a instanceof THREE.Face4&&(f(oa,a.a,a.b,a.d,0,1,3),f(oa,a.b,a.c,a.d,1,2,3))},0,0.3,function(){h(i,0.3,1,function(){oa.hasTangents=!0;a&&(U=xa=J=ea=ya=void 0,
a())},c)},c)},computeTangentsAsync_Partial:function(a,b,c){function d(a,b,c,d,e,f,h){function i(a,b){!a[b]&&0!=a[b]?a[b]=0:Infinity===a[b]?a[b]=1:-Infinity===a[b]&&(a[b]=-1)}p=a.vertices[b];l=a.vertices[c];t=a.vertices[d];u=n[e];k=n[f];q=n[h];s=l.x-p.x;r=t.x-p.x;x=l.y-p.y;y=t.y-p.y;z=l.z-p.z;D=t.z-p.z;E=k.x-u.x;B=q.x-u.x;w=k.y-u.y;M=q.y-u.y;I=1/(E*M-B*w);L.set((M*s-w*r)*I,(M*x-w*y)*I,(M*z-w*D)*I);G.set((E*r-B*s)*I,(E*y-B*x)*I,(E*D-B*z)*I);i(L,"x");i(L,"y");i(G,"x");i(G,"y");v[b].x+=L.x;v[b].y+=L.y;
v[c].x+=L.x;v[c].y+=L.y;v[d].x+=L.x;v[d].y+=L.y;v[b].z+=G.x;v[b].w+=G.y;v[c].z+=G.x;v[c].w+=G.y;v[d].z+=G.x;v[d].w+=G.y}function e(a,c,d,e,f){for(var h=0,i=c,j=(d-c)/A.faces.length;h<A.faces.length;)(function(c){setTimeout(function(){var h=c,k=0;do a(A.faces[h],h),h++,k++;while(k<f&&h<A.faces.length);h<A.faces.length?(i+=j*f,b&&b(i)):(b(d),e())},0)})(h),h+=f}function f(a){for(j=0;j<a.vertexNormals.length;j++)m=a[H[j]],a.vertexTangents[j]=v[m]}var h,i,j,m,n,p,l,t,u,k,q,s,r,x,y,z,D,E,B,w,M,I,L=new THREE.Vector3,
G=new THREE.Vector3;new THREE.Vector3;new THREE.Vector3;new THREE.Vector3;var v=[];h=0;for(i=this.vertices.length;h<i;h++)v[h]=new THREE.Vector4;void 0===c&&(c=1E5);var H=["a","b","c","d"],A=this;e(function(a,b){n=A.faceVertexUvs[0][b];a instanceof THREE.Face3?d(A,a.a,a.b,a.c,0,1,2):a instanceof THREE.Face4&&(d(A,a.a,a.b,a.d,0,1,3),d(A,a.b,a.c,a.d,1,2,3))},0,0.3,function(){e(f,0.3,1,function(){A.hasTangents=!0;a&&a()},c)},c)},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<
d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);this.boundingSphere.setFromPoints(this.vertices)},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),f,h;this.__tmpVertices=void 0;f=0;for(h=this.vertices.length;f<h;f++)d=this.vertices[f],
d=Math.round(d.x*e)+"_"+Math.round(d.y*e)+"_"+Math.round(d.z*e),void 0===a[d]?(a[d]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[d]];a=[];f=0;for(h=this.faces.length;f<h;f++){e=this.faces[f];e.a=c[e.a];e.b=c[e.b];e.c=c[e.c];e=[e.a,e.b,e.c];for(d=0;3>d;d++)if(e[d]==e[(d+1)%3]){a.push(f);break}}for(f=a.length-1;0<=f;f--){this.faces.splice(f,1);c=0;for(h=this.faceVertexUvs.length;c<h;c++)this.faceVertexUvs[c].splice(f,1)}f=this.vertices.length-b.length;this.vertices=b;return f},clone:function(){for(var a=
new THREE.Geometry,b=this.vertices,c=0,d=b.length;c<d;c++)a.vertices.push(b[c].clone());b=this.faces;c=0;for(d=b.length;c<d;c++)a.faces.push(b[c].clone());b=this.faceVertexUvs[0];c=0;for(d=b.length;c<d;c++){for(var e=b[c],f=[],h=0,i=e.length;h<i;h++)f.push(new THREE.Vector2(e[h].x,e[h].y));a.faceVertexUvs[0].push(f)}return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype);THREE.GeometryIdCount=0;THREE.BufferGeometry=function(){this.id=THREE.GeometryIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.attributes={};this.dynamic=!0;this.offsets=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.morphTargets=[]};
THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,applyMatrix:function(a){var b,c;this.attributes.position&&(b=this.attributes.position.array);this.attributes.normal&&(c=this.attributes.normal.array);void 0!==b&&(a.multiplyVector3Array(b),this.verticesNeedUpdate=!0);void 0!==c&&((new THREE.Matrix3).getNormalMatrix(a).multiplyVector3Array(c),this.normalizeNormals(),this.normalsNeedUpdate=!0)},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var a=
this.attributes.position.array;if(a){var b=this.boundingBox,c,d,e;3<=a.length&&(b.min.x=b.max.x=a[0],b.min.y=b.max.y=a[1],b.min.z=b.max.z=a[2]);for(var f=3,h=a.length;f<h;f+=3)c=a[f],d=a[f+1],e=a[f+2],c<b.min.x?b.min.x=c:c>b.max.x&&(b.max.x=c),d<b.min.y?b.min.y=d:d>b.max.y&&(b.max.y=d),e<b.min.z?b.min.z=e:e>b.max.z&&(b.max.z=e)}if(void 0===a||0===a.length)this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=
new THREE.Sphere);var a=this.attributes.position.array;if(a){for(var b,c=0,d,e,f=0,h=a.length;f<h;f+=3)b=a[f],d=a[f+1],e=a[f+2],b=b*b+d*d+e*e,b>c&&(c=b);this.boundingSphere.radius=Math.sqrt(c)}},computeVertexNormals:function(){if(this.attributes.position){var a,b,c,d;a=this.attributes.position.array.length;if(void 0===this.attributes.normal)this.attributes.normal={itemSize:3,array:new Float32Array(a)};else{a=0;for(b=this.attributes.normal.array.length;a<b;a++)this.attributes.normal.array[a]=0}var e=
this.attributes.position.array,f=this.attributes.normal.array,h,i,j,m,n,p,l=new THREE.Vector3,t=new THREE.Vector3,u=new THREE.Vector3,k=new THREE.Vector3,q=new THREE.Vector3;if(this.attributes.index){var s=this.attributes.index.array,r=this.offsets;c=0;for(d=r.length;c<d;++c){b=r[c].start;h=r[c].count;var x=r[c].index;a=b;for(b+=h;a<b;a+=3)h=x+s[a],i=x+s[a+1],j=x+s[a+2],m=e[3*h],n=e[3*h+1],p=e[3*h+2],l.set(m,n,p),m=e[3*i],n=e[3*i+1],p=e[3*i+2],t.set(m,n,p),m=e[3*j],n=e[3*j+1],p=e[3*j+2],u.set(m,n,
p),k.subVectors(u,t),q.subVectors(l,t),k.cross(q),f[3*h]+=k.x,f[3*h+1]+=k.y,f[3*h+2]+=k.z,f[3*i]+=k.x,f[3*i+1]+=k.y,f[3*i+2]+=k.z,f[3*j]+=k.x,f[3*j+1]+=k.y,f[3*j+2]+=k.z}}else{a=0;for(b=e.length;a<b;a+=9)m=e[a],n=e[a+1],p=e[a+2],l.set(m,n,p),m=e[a+3],n=e[a+4],p=e[a+5],t.set(m,n,p),m=e[a+6],n=e[a+7],p=e[a+8],u.set(m,n,p),k.subVectors(u,t),q.subVectors(l,t),k.cross(q),f[a]=k.x,f[a+1]=k.y,f[a+2]=k.z,f[a+3]=k.x,f[a+4]=k.y,f[a+5]=k.z,f[a+6]=k.x,f[a+7]=k.y,f[a+8]=k.z}this.normalizeNormals();this.normalsNeedUpdate=
!0}},normalizeNormals:function(){for(var a=this.attributes.normal.array,b,c,d,e=0,f=a.length;e<f;e+=3)b=a[e],c=a[e+1],d=a[e+2],b=1/Math.sqrt(b*b+c*c+d*d),a[e]*=b,a[e+1]*=b,a[e+2]*=b},computeTangents:function(){function a(a){ra.x=d[3*a];ra.y=d[3*a+1];ra.z=d[3*a+2];wa.copy(ra);U=i[a];N.copy(U);N.sub(ra.multiplyScalar(ra.dot(U))).normalize();Ca.crossVectors(wa,U);ea=Ca.dot(j[a]);xa=0>ea?-1:1;h[4*a]=N.x;h[4*a+1]=N.y;h[4*a+2]=N.z;h[4*a+3]=xa}if(void 0===this.attributes.index||void 0===this.attributes.position||
void 0===this.attributes.normal||void 0===this.attributes.uv)console.warn("Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");else{var b=this.attributes.index.array,c=this.attributes.position.array,d=this.attributes.normal.array,e=this.attributes.uv.array,f=c.length/3;void 0===this.attributes.tangent&&(this.attributes.tangent={itemSize:4,array:new Float32Array(4*f)});for(var h=this.attributes.tangent.array,i=[],j=[],m=0;m<f;m++)i[m]=new THREE.Vector3,
j[m]=new THREE.Vector3;var n,p,l,t,u,k,q,s,r,x,y,z,D,E,B,f=new THREE.Vector3,m=new THREE.Vector3,w,M,I,L,G,v,H,A=this.offsets;I=0;for(L=A.length;I<L;++I){M=A[I].start;G=A[I].count;var Q=A[I].index;w=M;for(M+=G;w<M;w+=3)G=Q+b[w],v=Q+b[w+1],H=Q+b[w+2],n=c[3*G],p=c[3*G+1],l=c[3*G+2],t=c[3*v],u=c[3*v+1],k=c[3*v+2],q=c[3*H],s=c[3*H+1],r=c[3*H+2],x=e[2*G],y=e[2*G+1],z=e[2*v],D=e[2*v+1],E=e[2*H],B=e[2*H+1],t-=n,n=q-n,u-=p,p=s-p,k-=l,l=r-l,z-=x,x=E-x,D-=y,y=B-y,B=1/(z*y-x*D),f.set((y*t-D*n)*B,(y*u-D*p)*B,
(y*k-D*l)*B),m.set((z*n-x*t)*B,(z*p-x*u)*B,(z*l-x*k)*B),i[G].add(f),i[v].add(f),i[H].add(f),j[G].add(m),j[v].add(m),j[H].add(m)}var N=new THREE.Vector3,Ca=new THREE.Vector3,ra=new THREE.Vector3,wa=new THREE.Vector3,xa,U,ea;I=0;for(L=A.length;I<L;++I){M=A[I].start;G=A[I].count;Q=A[I].index;w=M;for(M+=G;w<M;w+=3)G=Q+b[w],v=Q+b[w+1],H=Q+b[w+2],a(G),a(v),a(H)}this.tangentsNeedUpdate=this.hasTangents=!0}},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype);THREE.Camera=function(){THREE.Object3D.call(this);this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4;this.projectionMatrixInverse=new THREE.Matrix4};THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);THREE.Camera.prototype.lookAt=function(){var a=new THREE.Matrix4;return function(b){a.lookAt(this.position,b,this.up);this.quaternion.setFromRotationMatrix(a)}}();THREE.OrthographicCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:0.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()};THREE.OrthographicCamera.prototype=Object.create(THREE.Camera.prototype);THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){this.projectionMatrix.makeOrthographic(this.left,this.right,this.top,this.bottom,this.near,this.far)};THREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.fov=void 0!==a?a:50;this.aspect=void 0!==b?b:1;this.near=void 0!==c?c:0.1;this.far=void 0!==d?d:2E3;this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype=Object.create(THREE.Camera.prototype);THREE.PerspectiveCamera.prototype.setLens=function(a,b){void 0===b&&(b=24);this.fov=2*THREE.Math.radToDeg(Math.atan(b/(2*a)));this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.setViewOffset=function(a,b,c,d,e,f){this.fullWidth=a;this.fullHeight=b;this.x=c;this.y=d;this.width=e;this.height=f;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){if(this.fullWidth){var a=this.fullWidth/this.fullHeight,b=Math.tan(THREE.Math.degToRad(0.5*this.fov))*this.near,c=-b,d=a*c,a=Math.abs(a*b-d),c=Math.abs(b-c);this.projectionMatrix.makeFrustum(d+this.x*a/this.fullWidth,d+(this.x+this.width)*a/this.fullWidth,b-(this.y+this.height)*c/this.fullHeight,b-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(this.fov,this.aspect,this.near,this.far)};THREE.Light=function(a){THREE.Object3D.call(this);this.color=new THREE.Color(a)};THREE.Light.prototype=Object.create(THREE.Object3D.prototype);THREE.Light.prototype.clone=function(a){void 0===a&&(a=new THREE.Light);THREE.Object3D.prototype.clone.call(this,a);a.color.copy(this.color);return a};THREE.AmbientLight=function(a){THREE.Light.call(this,a)};THREE.AmbientLight.prototype=Object.create(THREE.Light.prototype);THREE.AmbientLight.prototype.clone=function(){var a=new THREE.AmbientLight;THREE.Light.prototype.clone.call(this,a);return a};THREE.DirectionalLight=function(a,b){THREE.Light.call(this,a);this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraLeft=-500;this.shadowCameraTop=this.shadowCameraRight=500;this.shadowCameraBottom=-500;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowCascade=!1;this.shadowCascadeOffset=new THREE.Vector3(0,
0,-1E3);this.shadowCascadeCount=2;this.shadowCascadeBias=[0,0,0];this.shadowCascadeWidth=[512,512,512];this.shadowCascadeHeight=[512,512,512];this.shadowCascadeNearZ=[-1,0.99,0.998];this.shadowCascadeFarZ=[0.99,0.998,1];this.shadowCascadeArray=[];this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.DirectionalLight.prototype=Object.create(THREE.Light.prototype);
THREE.DirectionalLight.prototype.clone=function(){var a=new THREE.DirectionalLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;return a};THREE.HemisphereLight=function(a,b,c){THREE.Light.call(this,a);this.position.set(0,100,0);this.groundColor=new THREE.Color(b);this.intensity=void 0!==c?c:1};THREE.HemisphereLight.prototype=Object.create(THREE.Light.prototype);THREE.HemisphereLight.prototype.clone=function(){var a=new THREE.PointLight;THREE.Light.prototype.clone.call(this,a);a.groundColor.copy(this.groundColor);a.intensity=this.intensity;return a};THREE.PointLight=function(a,b,c){THREE.Light.call(this,a);this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0};THREE.PointLight.prototype=Object.create(THREE.Light.prototype);THREE.PointLight.prototype.clone=function(){var a=new THREE.PointLight;THREE.Light.prototype.clone.call(this,a);a.intensity=this.intensity;a.distance=this.distance;return a};THREE.SpotLight=function(a,b,c,d,e){THREE.Light.call(this,a);this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/3;this.exponent=void 0!==e?e:10;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraFov=50;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowMatrix=this.shadowCamera=this.shadowMapSize=
this.shadowMap=null};THREE.SpotLight.prototype=Object.create(THREE.Light.prototype);THREE.SpotLight.prototype.clone=function(){var a=new THREE.SpotLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.distance=this.distance;a.angle=this.angle;a.exponent=this.exponent;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;return a};THREE.Loader=function(a){this.statusDomElement=(this.showStatus=a)?THREE.Loader.prototype.addStatusElement():null;this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};
THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:"anonymous",addStatusElement:function(){var a=document.createElement("div");a.style.position="absolute";a.style.right="0px";a.style.top="0px";a.style.fontSize="0.8em";a.style.textAlign="left";a.style.background="rgba(0,0,0,0.25)";a.style.color="#fff";a.style.width="120px";a.style.padding="0.5em 0.5em 0.5em 0.5em";a.style.zIndex=1E3;a.innerHTML="Loading ...";return a},updateProgress:function(a){var b="Loaded ",b=a.total?b+((100*a.loaded/
a.total).toFixed(0)+"%"):b+((a.loaded/1E3).toFixed(2)+" KB");this.statusDomElement.innerHTML=b},extractUrlBase:function(a){a=a.split("/");a.pop();return(1>a.length?".":a.join("/"))+"/"},initMaterials:function(a,b){for(var c=[],d=0;d<a.length;++d)c[d]=THREE.Loader.prototype.createMaterial(a[d],b);return c},needsTangents:function(a){for(var b=0,c=a.length;b<c;b++)if(a[b]instanceof THREE.ShaderMaterial)return!0;return!1},createMaterial:function(a,b){function c(a){a=Math.log(a)/Math.LN2;return Math.floor(a)==
a}function d(a){a=Math.log(a)/Math.LN2;return Math.pow(2,Math.round(a))}function e(a,e,f,i,j,k,m){var s=/\.dds$/i.test(f),r=b+"/"+f;if(s){var x=THREE.ImageUtils.loadCompressedTexture(r);a[e]=x}else x=document.createElement("canvas"),a[e]=new THREE.Texture(x);a[e].sourceFile=f;i&&(a[e].repeat.set(i[0],i[1]),1!==i[0]&&(a[e].wrapS=THREE.RepeatWrapping),1!==i[1]&&(a[e].wrapT=THREE.RepeatWrapping));j&&a[e].offset.set(j[0],j[1]);k&&(f={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},void 0!==
f[k[0]]&&(a[e].wrapS=f[k[0]]),void 0!==f[k[1]]&&(a[e].wrapT=f[k[1]]));m&&(a[e].anisotropy=m);if(!s){var y=a[e],a=new Image;a.onload=function(){if(!c(this.width)||!c(this.height)){var a=d(this.width),b=d(this.height);y.image.width=a;y.image.height=b;y.image.getContext("2d").drawImage(this,0,0,a,b)}else y.image=this;y.needsUpdate=!0};a.crossOrigin=h.crossOrigin;a.src=r}}function f(a){return(255*a[0]<<16)+(255*a[1]<<8)+255*a[2]}var h=this,i="MeshLambertMaterial",j={color:15658734,opacity:1,map:null,
lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(a.shading){var m=a.shading.toLowerCase();"phong"===m?i="MeshPhongMaterial":"basic"===m&&(i="MeshBasicMaterial")}void 0!==a.blending&&void 0!==THREE[a.blending]&&(j.blending=THREE[a.blending]);if(void 0!==a.transparent||1>a.opacity)j.transparent=a.transparent;void 0!==a.depthTest&&(j.depthTest=a.depthTest);void 0!==a.depthWrite&&(j.depthWrite=a.depthWrite);void 0!==a.visible&&(j.visible=a.visible);void 0!==a.flipSided&&(j.side=THREE.BackSide);
void 0!==a.doubleSided&&(j.side=THREE.DoubleSide);void 0!==a.wireframe&&(j.wireframe=a.wireframe);void 0!==a.vertexColors&&("face"===a.vertexColors?j.vertexColors=THREE.FaceColors:a.vertexColors&&(j.vertexColors=THREE.VertexColors));a.colorDiffuse?j.color=f(a.colorDiffuse):a.DbgColor&&(j.color=a.DbgColor);a.colorSpecular&&(j.specular=f(a.colorSpecular));a.colorAmbient&&(j.ambient=f(a.colorAmbient));a.transparency&&(j.opacity=a.transparency);a.specularCoef&&(j.shininess=a.specularCoef);a.mapDiffuse&&
b&&e(j,"map",a.mapDiffuse,a.mapDiffuseRepeat,a.mapDiffuseOffset,a.mapDiffuseWrap,a.mapDiffuseAnisotropy);a.mapLight&&b&&e(j,"lightMap",a.mapLight,a.mapLightRepeat,a.mapLightOffset,a.mapLightWrap,a.mapLightAnisotropy);a.mapBump&&b&&e(j,"bumpMap",a.mapBump,a.mapBumpRepeat,a.mapBumpOffset,a.mapBumpWrap,a.mapBumpAnisotropy);a.mapNormal&&b&&e(j,"normalMap",a.mapNormal,a.mapNormalRepeat,a.mapNormalOffset,a.mapNormalWrap,a.mapNormalAnisotropy);a.mapSpecular&&b&&e(j,"specularMap",a.mapSpecular,a.mapSpecularRepeat,
a.mapSpecularOffset,a.mapSpecularWrap,a.mapSpecularAnisotropy);a.mapBumpScale&&(j.bumpScale=a.mapBumpScale);a.mapNormal?(i=THREE.ShaderLib.normalmap,m=THREE.UniformsUtils.clone(i.uniforms),m.tNormal.value=j.normalMap,a.mapNormalFactor&&m.uNormalScale.value.set(a.mapNormalFactor,a.mapNormalFactor),j.map&&(m.tDiffuse.value=j.map,m.enableDiffuse.value=!0),j.specularMap&&(m.tSpecular.value=j.specularMap,m.enableSpecular.value=!0),j.lightMap&&(m.tAO.value=j.lightMap,m.enableAO.value=!0),m.uDiffuseColor.value.setHex(j.color),
m.uSpecularColor.value.setHex(j.specular),m.uAmbientColor.value.setHex(j.ambient),m.uShininess.value=j.shininess,void 0!==j.opacity&&(m.uOpacity.value=j.opacity),i=new THREE.ShaderMaterial({fragmentShader:i.fragmentShader,vertexShader:i.vertexShader,uniforms:m,lights:!0,fog:!0}),j.transparent&&(i.transparent=!0)):i=new THREE[i](j);void 0!==a.DbgName&&(i.name=a.DbgName);return i}};THREE.ImageLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,b,c,d){var e=this,f=document.createElement("img");void 0!==b&&f.addEventListener("load",function(){e.manager.itemEnd(a);b(this)},!1);void 0!==c&&f.addEventListener("progress",function(a){c(a)},!1);void 0!==d&&f.addEventListener("error",function(a){d(a)},!1);void 0!==this.crossOrigin&&(f.crossOrigin=this.crossOrigin);f.src=a;e.manager.itemStart(a)},setCrossOrigin:function(a){this.crossOrigin=a}};THREE.JSONLoader=function(a){THREE.Loader.call(this,a);this.withCredentials=!1};THREE.JSONLoader.prototype=Object.create(THREE.Loader.prototype);THREE.JSONLoader.prototype.load=function(a,b,c){c=c&&"string"===typeof c?c:this.extractUrlBase(a);this.onLoadStart();this.loadAjaxJSON(this,a,b,c)};
THREE.JSONLoader.prototype.loadAjaxJSON=function(a,b,c,d,e){var f=new XMLHttpRequest,h=0;f.onreadystatechange=function(){if(f.readyState===f.DONE)if(200===f.status||0===f.status){if(f.responseText){var i=JSON.parse(f.responseText),i=a.parse(i,d);c(i.geometry,i.materials)}else console.warn("THREE.JSONLoader: ["+b+"] seems to be unreachable or file there is empty");a.onLoadComplete()}else console.error("THREE.JSONLoader: Couldn't load ["+b+"] ["+f.status+"]");else f.readyState===f.LOADING?e&&(0===h&&
(h=f.getResponseHeader("Content-Length")),e({total:h,loaded:f.responseText.length})):f.readyState===f.HEADERS_RECEIVED&&void 0!==e&&(h=f.getResponseHeader("Content-Length"))};f.open("GET",b,!0);f.withCredentials=this.withCredentials;f.send(null)};
THREE.JSONLoader.prototype.parse=function(a,b){var c=new THREE.Geometry,d=void 0!==a.scale?1/a.scale:1,e,f,h,i,j,m,n,p,l,t,u,k,q,s,r=a.faces;l=a.vertices;var x=a.normals,y=a.colors,z=0;if(void 0!==a.uvs){for(e=0;e<a.uvs.length;e++)a.uvs[e].length&&z++;for(e=0;e<z;e++)c.faceVertexUvs[e]=[]}i=0;for(j=l.length;i<j;)m=new THREE.Vector3,m.x=l[i++]*d,m.y=l[i++]*d,m.z=l[i++]*d,c.vertices.push(m);i=0;for(j=r.length;i<j;)if(l=r[i++],t=l&1,h=l&2,e=l&8,n=l&16,u=l&32,m=l&64,l&=128,t){t=new THREE.Face3;t.a=r[i];
t.b=r[i+1];t.c=r[i+3];k=new THREE.Face3;k.a=r[i+1];k.b=r[i+2];k.c=r[i+3];i+=4;h&&(h=r[i++],t.materialIndex=h,k.materialIndex=h);h=c.faces.length;if(e)for(e=0;e<z;e++){q=a.uvs[e];c.faceVertexUvs[e][h]=[];c.faceVertexUvs[e][h+1]=[];for(f=0;4>f;f++)p=r[i++],s=q[2*p],p=q[2*p+1],s=new THREE.Vector2(s,p),2!==f&&c.faceVertexUvs[e][h].push(s),0!==f&&c.faceVertexUvs[e][h+1].push(s)}n&&(n=3*r[i++],t.normal.set(x[n++],x[n++],x[n]),k.normal.copy(t.normal));if(u)for(e=0;4>e;e++)n=3*r[i++],u=new THREE.Vector3(x[n++],
x[n++],x[n]),2!==e&&t.vertexNormals.push(u),0!==e&&k.vertexNormals.push(u);m&&(m=r[i++],m=y[m],t.color.setHex(m),k.color.setHex(m));if(l)for(e=0;4>e;e++)m=r[i++],m=y[m],2!==e&&t.vertexColors.push(new THREE.Color(m)),0!==e&&k.vertexColors.push(new THREE.Color(m));c.faces.push(t);c.faces.push(k)}else{t=new THREE.Face3;t.a=r[i++];t.b=r[i++];t.c=r[i++];h&&(h=r[i++],t.materialIndex=h);h=c.faces.length;if(e)for(e=0;e<z;e++){q=a.uvs[e];c.faceVertexUvs[e][h]=[];for(f=0;3>f;f++)p=r[i++],s=q[2*p],p=q[2*p+1],
s=new THREE.Vector2(s,p),c.faceVertexUvs[e][h].push(s)}n&&(n=3*r[i++],t.normal.set(x[n++],x[n++],x[n]));if(u)for(e=0;3>e;e++)n=3*r[i++],u=new THREE.Vector3(x[n++],x[n++],x[n]),t.vertexNormals.push(u);m&&(m=r[i++],t.color.setHex(y[m]));if(l)for(e=0;3>e;e++)m=r[i++],t.vertexColors.push(new THREE.Color(y[m]));c.faces.push(t)}if(a.skinWeights){i=0;for(j=a.skinWeights.length;i<j;i+=2)r=a.skinWeights[i],x=a.skinWeights[i+1],c.skinWeights.push(new THREE.Vector4(r,x,0,0))}if(a.skinIndices){i=0;for(j=a.skinIndices.length;i<
j;i+=2)r=a.skinIndices[i],x=a.skinIndices[i+1],c.skinIndices.push(new THREE.Vector4(r,x,0,0))}c.bones=a.bones;c.animation=a.animation;if(void 0!==a.morphTargets){i=0;for(j=a.morphTargets.length;i<j;i++){c.morphTargets[i]={};c.morphTargets[i].name=a.morphTargets[i].name;c.morphTargets[i].vertices=[];y=c.morphTargets[i].vertices;z=a.morphTargets[i].vertices;r=0;for(x=z.length;r<x;r+=3)l=new THREE.Vector3,l.x=z[r]*d,l.y=z[r+1]*d,l.z=z[r+2]*d,y.push(l)}}if(void 0!==a.morphColors){i=0;for(j=a.morphColors.length;i<
j;i++){c.morphColors[i]={};c.morphColors[i].name=a.morphColors[i].name;c.morphColors[i].colors=[];x=c.morphColors[i].colors;y=a.morphColors[i].colors;d=0;for(r=y.length;d<r;d+=3)z=new THREE.Color(16755200),z.setRGB(y[d],y[d+1],y[d+2]),x.push(z)}}c.computeCentroids();c.computeFaceNormals();c.computeBoundingSphere();if(void 0===a.materials)return{geometry:c};d=this.initMaterials(a.materials,b);this.needsTangents(d)&&c.computeTangents();return{geometry:c,materials:d}};THREE.GeometryLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};THREE.GeometryLoader.prototype={constructor:THREE.GeometryLoader,load:function(a,b){var c=this,d=new THREE.XHRLoader;d.setCrossOrigin(this.crossOrigin);d.load(a,function(a){b(c.parse(JSON.parse(a)))})},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(){}};THREE.MaterialLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.MaterialLoader.prototype={constructor:THREE.MaterialLoader,load:function(a,b){var c=this,d=new THREE.XHRLoader;d.setCrossOrigin(this.crossOrigin);d.load(a,function(a){b(c.parse(JSON.parse(a)))})},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=new THREE[a.type];void 0!==a.color&&b.color.setHex(a.color);void 0!==a.ambient&&b.ambient.setHex(a.ambient);void 0!==a.emissive&&b.emissive.setHex(a.emissive);void 0!==a.specular&&b.specular.setHex(a.specular);void 0!==a.shininess&&
(b.shininess=a.shininess);void 0!==a.vertexColors&&(b.vertexColors=a.vertexColors);void 0!==a.blending&&(b.blending=a.blending);void 0!==a.opacity&&(b.opacity=a.opacity);void 0!==a.transparent&&(b.transparent=a.transparent);void 0!==a.wireframe&&(b.wireframe=a.wireframe);if(void 0!==a.materials)for(var c=0,d=a.materials.length;c<d;c++)b.materials.push(this.parse(a.materials[c]));return b}};THREE.SceneLoader=function(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){};this.callbackSync=function(){};this.callbackProgress=function(){};this.geometryHandlers={};this.hierarchyHandlers={};this.addGeometryHandler("ascii",THREE.JSONLoader)};
THREE.SceneLoader.prototype={constructor:THREE.SceneLoader,load:function(a,b){var c=this,d=new THREE.XHRLoader(c.manager);d.setCrossOrigin(this.crossOrigin);d.load(a,function(d){c.parse(JSON.parse(d),b,a)})},setCrossOrigin:function(a){this.crossOrigin=a},addGeometryHandler:function(a,b){this.geometryHandlers[a]={loaderClass:b}},addHierarchyHandler:function(a,b){this.hierarchyHandlers[a]={loaderClass:b}},parse:function(a,b,c){function d(a,b){return"relativeToHTML"==b?a:l+"/"+a}function e(){f(w.scene,
I.objects)}function f(a,b){var c,e,h,j,m,q,s;for(s in b){var n=w.objects[s],l=b[s];if(void 0===n){if(l.type&&l.type in p.hierarchyHandlers){if(void 0===l.loading){e={type:1,url:1,material:1,position:1,rotation:1,scale:1,visible:1,children:1,userData:1,skin:1,morph:1,mirroredLoop:1,duration:1};h={};for(var v in l)v in e||(h[v]=l[v]);u=w.materials[l.material];l.loading=!0;e=p.hierarchyHandlers[l.type].loaderObject;e.options?e.load(d(l.url,I.urlBaseType),i(s,a,u,l)):e.load(d(l.url,I.urlBaseType),i(s,
a,u,l),h)}}else if(void 0!==l.geometry){if(t=w.geometries[l.geometry]){n=!1;u=w.materials[l.material];n=u instanceof THREE.ShaderMaterial;h=l.position;j=l.rotation;m=l.scale;c=l.matrix;q=l.quaternion;l.material||(u=new THREE.MeshFaceMaterial(w.face_materials[l.geometry]));u instanceof THREE.MeshFaceMaterial&&0===u.materials.length&&(u=new THREE.MeshFaceMaterial(w.face_materials[l.geometry]));if(u instanceof THREE.MeshFaceMaterial)for(e=0;e<u.materials.length;e++)n=n||u.materials[e]instanceof THREE.ShaderMaterial;
n&&t.computeTangents();l.skin?n=new THREE.SkinnedMesh(t,u):l.morph?(n=new THREE.MorphAnimMesh(t,u),void 0!==l.duration&&(n.duration=l.duration),void 0!==l.time&&(n.time=l.time),void 0!==l.mirroredLoop&&(n.mirroredLoop=l.mirroredLoop),u.morphNormals&&t.computeMorphNormals()):n=new THREE.Mesh(t,u);n.name=s;c?(n.matrixAutoUpdate=!1,n.matrix.set(c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7],c[8],c[9],c[10],c[11],c[12],c[13],c[14],c[15])):(n.position.fromArray(h),q?n.quaternion.fromArray(q):n.rotation.fromArray(j),
n.scale.fromArray(m));n.visible=l.visible;n.castShadow=l.castShadow;n.receiveShadow=l.receiveShadow;a.add(n);w.objects[s]=n}}else"DirectionalLight"===l.type||"PointLight"===l.type||"AmbientLight"===l.type?(x=void 0!==l.color?l.color:16777215,y=void 0!==l.intensity?l.intensity:1,"DirectionalLight"===l.type?(h=l.direction,r=new THREE.DirectionalLight(x,y),r.position.fromArray(h),l.target&&(M.push({object:r,targetName:l.target}),r.target=null)):"PointLight"===l.type?(h=l.position,e=l.distance,r=new THREE.PointLight(x,
y,e),r.position.fromArray(h)):"AmbientLight"===l.type&&(r=new THREE.AmbientLight(x)),a.add(r),r.name=s,w.lights[s]=r,w.objects[s]=r):"PerspectiveCamera"===l.type||"OrthographicCamera"===l.type?(h=l.position,j=l.rotation,q=l.quaternion,"PerspectiveCamera"===l.type?k=new THREE.PerspectiveCamera(l.fov,l.aspect,l.near,l.far):"OrthographicCamera"===l.type&&(k=new THREE.OrthographicCamera(l.left,l.right,l.top,l.bottom,l.near,l.far)),k.name=s,k.position.fromArray(h),void 0!==q?k.quaternion.fromArray(q):
void 0!==j&&k.rotation.fromArray(j),a.add(k),w.cameras[s]=k,w.objects[s]=k):(h=l.position,j=l.rotation,m=l.scale,q=l.quaternion,n=new THREE.Object3D,n.name=s,n.position.fromArray(h),q?n.quaternion.fromArray(q):n.rotation.fromArray(j),n.scale.fromArray(m),n.visible=void 0!==l.visible?l.visible:!1,a.add(n),w.objects[s]=n,w.empties[s]=n);if(n){if(void 0!==l.userData)for(var z in l.userData)n.userData[z]=l.userData[z];if(void 0!==l.groups)for(e=0;e<l.groups.length;e++)h=l.groups[e],void 0===w.groups[h]&&
(w.groups[h]=[]),w.groups[h].push(s)}}void 0!==n&&void 0!==l.children&&f(n,l.children)}}function h(a){return function(b,c){b.name=a;w.geometries[a]=b;w.face_materials[a]=c;e();z-=1;p.onLoadComplete();m()}}function i(a,b,c,d){return function(f){var f=f.content?f.content:f.dae?f.scene:f,h=d.rotation,i=d.quaternion,j=d.scale;f.position.fromArray(d.position);i?f.quaternion.fromArray(i):f.rotation.fromArray(h);f.scale.fromArray(j);c&&f.traverse(function(a){a.material=c});var k=void 0!==d.visible?d.visible:
!0;f.traverse(function(a){a.visible=k});b.add(f);f.name=a;w.objects[a]=f;e();z-=1;p.onLoadComplete();m()}}function j(a){return function(b,c){b.name=a;w.geometries[a]=b;w.face_materials[a]=c}}function m(){p.callbackProgress({totalModels:E,totalTextures:B,loadedModels:E-z,loadedTextures:B-D},w);p.onLoadProgress();if(0===z&&0===D){for(var a=0;a<M.length;a++){var c=M[a],d=w.objects[c.targetName];d?c.object.target=d:(c.object.target=new THREE.Object3D,w.scene.add(c.object.target));c.object.target.userData.targetInverse=
c.object}b(w)}}function n(a,b){b(a);if(void 0!==a.children)for(var c in a.children)n(a.children[c],b)}var p=this,l=THREE.Loader.prototype.extractUrlBase(c),t,u,k,q,s,r,x,y,z,D,E,B,w,M=[],I=a,L;for(L in this.geometryHandlers)a=this.geometryHandlers[L].loaderClass,this.geometryHandlers[L].loaderObject=new a;for(L in this.hierarchyHandlers)a=this.hierarchyHandlers[L].loaderClass,this.hierarchyHandlers[L].loaderObject=new a;D=z=0;w={scene:new THREE.Scene,geometries:{},face_materials:{},materials:{},textures:{},
objects:{},cameras:{},lights:{},fogs:{},empties:{},groups:{}};if(I.transform&&(L=I.transform.position,a=I.transform.rotation,c=I.transform.scale,L&&w.scene.position.fromArray(L),a&&w.scene.rotation.fromArray(a),c&&w.scene.scale.fromArray(c),L||a||c))w.scene.updateMatrix(),w.scene.updateMatrixWorld();L=function(a){return function(){D-=a;m();p.onLoadComplete()}};for(var G in I.fogs)a=I.fogs[G],"linear"===a.type?q=new THREE.Fog(0,a.near,a.far):"exp2"===a.type&&(q=new THREE.FogExp2(0,a.density)),a=a.color,
q.color.setRGB(a[0],a[1],a[2]),w.fogs[G]=q;for(var v in I.geometries)q=I.geometries[v],q.type in this.geometryHandlers&&(z+=1,p.onLoadStart());for(var H in I.objects)n(I.objects[H],function(a){a.type&&a.type in p.hierarchyHandlers&&(z+=1,p.onLoadStart())});E=z;for(v in I.geometries)if(q=I.geometries[v],"cube"===q.type)t=new THREE.CubeGeometry(q.width,q.height,q.depth,q.widthSegments,q.heightSegments,q.depthSegments),t.name=v,w.geometries[v]=t;else if("plane"===q.type)t=new THREE.PlaneGeometry(q.width,
q.height,q.widthSegments,q.heightSegments),t.name=v,w.geometries[v]=t;else if("sphere"===q.type)t=new THREE.SphereGeometry(q.radius,q.widthSegments,q.heightSegments),t.name=v,w.geometries[v]=t;else if("cylinder"===q.type)t=new THREE.CylinderGeometry(q.topRad,q.botRad,q.height,q.radSegs,q.heightSegs),t.name=v,w.geometries[v]=t;else if("torus"===q.type)t=new THREE.TorusGeometry(q.radius,q.tube,q.segmentsR,q.segmentsT),t.name=v,w.geometries[v]=t;else if("icosahedron"===q.type)t=new THREE.IcosahedronGeometry(q.radius,
q.subdivisions),t.name=v,w.geometries[v]=t;else if(q.type in this.geometryHandlers){H={};for(s in q)"type"!==s&&"url"!==s&&(H[s]=q[s]);this.geometryHandlers[q.type].loaderObject.load(d(q.url,I.urlBaseType),h(v),H)}else"embedded"===q.type&&(H=I.embeds[q.id],H.metadata=I.metadata,H&&(H=this.geometryHandlers.ascii.loaderObject.parse(H,""),j(v)(H.geometry,H.materials)));for(var A in I.textures)if(v=I.textures[A],v.url instanceof Array){D+=v.url.length;for(s=0;s<v.url.length;s++)p.onLoadStart()}else D+=
1,p.onLoadStart();B=D;for(A in I.textures){v=I.textures[A];void 0!==v.mapping&&void 0!==THREE[v.mapping]&&(v.mapping=new THREE[v.mapping]);if(v.url instanceof Array){H=v.url.length;q=[];for(s=0;s<H;s++)q[s]=d(v.url[s],I.urlBaseType);s=(s=/\.dds$/i.test(q[0]))?THREE.ImageUtils.loadCompressedTextureCube(q,v.mapping,L(H)):THREE.ImageUtils.loadTextureCube(q,v.mapping,L(H))}else s=/\.dds$/i.test(v.url),H=d(v.url,I.urlBaseType),q=L(1),s=s?THREE.ImageUtils.loadCompressedTexture(H,v.mapping,q):THREE.ImageUtils.loadTexture(H,
v.mapping,q),void 0!==THREE[v.minFilter]&&(s.minFilter=THREE[v.minFilter]),void 0!==THREE[v.magFilter]&&(s.magFilter=THREE[v.magFilter]),v.anisotropy&&(s.anisotropy=v.anisotropy),v.repeat&&(s.repeat.set(v.repeat[0],v.repeat[1]),1!==v.repeat[0]&&(s.wrapS=THREE.RepeatWrapping),1!==v.repeat[1]&&(s.wrapT=THREE.RepeatWrapping)),v.offset&&s.offset.set(v.offset[0],v.offset[1]),v.wrap&&(H={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},void 0!==H[v.wrap[0]]&&(s.wrapS=H[v.wrap[0]]),void 0!==
H[v.wrap[1]]&&(s.wrapT=H[v.wrap[1]]));w.textures[A]=s}var Q,N;for(Q in I.materials){A=I.materials[Q];for(N in A.parameters)"envMap"===N||"map"===N||"lightMap"===N||"bumpMap"===N?A.parameters[N]=w.textures[A.parameters[N]]:"shading"===N?A.parameters[N]="flat"===A.parameters[N]?THREE.FlatShading:THREE.SmoothShading:"side"===N?A.parameters[N]="double"==A.parameters[N]?THREE.DoubleSide:"back"==A.parameters[N]?THREE.BackSide:THREE.FrontSide:"blending"===N?A.parameters[N]=A.parameters[N]in THREE?THREE[A.parameters[N]]:
THREE.NormalBlending:"combine"===N?A.parameters[N]=A.parameters[N]in THREE?THREE[A.parameters[N]]:THREE.MultiplyOperation:"vertexColors"===N?"face"==A.parameters[N]?A.parameters[N]=THREE.FaceColors:A.parameters[N]&&(A.parameters[N]=THREE.VertexColors):"wrapRGB"===N&&(L=A.parameters[N],A.parameters[N]=new THREE.Vector3(L[0],L[1],L[2]));void 0!==A.parameters.opacity&&1>A.parameters.opacity&&(A.parameters.transparent=!0);A.parameters.normalMap?(L=THREE.ShaderLib.normalmap,v=THREE.UniformsUtils.clone(L.uniforms),
s=A.parameters.color,H=A.parameters.specular,q=A.parameters.ambient,G=A.parameters.shininess,v.tNormal.value=w.textures[A.parameters.normalMap],A.parameters.normalScale&&v.uNormalScale.value.set(A.parameters.normalScale[0],A.parameters.normalScale[1]),A.parameters.map&&(v.tDiffuse.value=A.parameters.map,v.enableDiffuse.value=!0),A.parameters.envMap&&(v.tCube.value=A.parameters.envMap,v.enableReflection.value=!0,v.uReflectivity.value=A.parameters.reflectivity),A.parameters.lightMap&&(v.tAO.value=A.parameters.lightMap,
v.enableAO.value=!0),A.parameters.specularMap&&(v.tSpecular.value=w.textures[A.parameters.specularMap],v.enableSpecular.value=!0),A.parameters.displacementMap&&(v.tDisplacement.value=w.textures[A.parameters.displacementMap],v.enableDisplacement.value=!0,v.uDisplacementBias.value=A.parameters.displacementBias,v.uDisplacementScale.value=A.parameters.displacementScale),v.uDiffuseColor.value.setHex(s),v.uSpecularColor.value.setHex(H),v.uAmbientColor.value.setHex(q),v.uShininess.value=G,A.parameters.opacity&&
(v.uOpacity.value=A.parameters.opacity),u=new THREE.ShaderMaterial({fragmentShader:L.fragmentShader,vertexShader:L.vertexShader,uniforms:v,lights:!0,fog:!0})):u=new THREE[A.type](A.parameters);u.name=Q;w.materials[Q]=u}for(Q in I.materials)if(A=I.materials[Q],A.parameters.materials){N=[];for(s=0;s<A.parameters.materials.length;s++)N.push(w.materials[A.parameters.materials[s]]);w.materials[Q].materials=N}e();w.cameras&&I.defaults.camera&&(w.currentCamera=w.cameras[I.defaults.camera]);w.fogs&&I.defaults.fog&&
(w.scene.fog=w.fogs[I.defaults.fog]);p.callbackSync(w);m()}};THREE.TextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a,b){var c=new THREE.ImageLoader(this.manager);c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){a=new THREE.Texture(a);a.needsUpdate=!0;void 0!==b&&b(a)})},setCrossOrigin:function(a){this.crossOrigin=a}};THREE.Material=function(){this.id=THREE.MaterialIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.side=THREE.FrontSide;this.opacity=1;this.transparent=!1;this.blending=THREE.NormalBlending;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.depthWrite=this.depthTest=!0;this.polygonOffset=!1;this.overdraw=this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.needsUpdate=this.visible=!0};
THREE.Material.prototype={constructor:THREE.Material,setValues:function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)console.warn("THREE.Material: '"+b+"' parameter is undefined.");else if(b in this){var d=this[b];d instanceof THREE.Color?d.set(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):this[b]="overdraw"==b?Number(c):c}}},clone:function(a){void 0===a&&(a=new THREE.Material);a.name=this.name;a.side=this.side;a.opacity=this.opacity;a.transparent=this.transparent;
a.blending=this.blending;a.blendSrc=this.blendSrc;a.blendDst=this.blendDst;a.blendEquation=this.blendEquation;a.depthTest=this.depthTest;a.depthWrite=this.depthWrite;a.polygonOffset=this.polygonOffset;a.polygonOffsetFactor=this.polygonOffsetFactor;a.polygonOffsetUnits=this.polygonOffsetUnits;a.alphaTest=this.alphaTest;a.overdraw=this.overdraw;a.visible=this.visible;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Material.prototype);
THREE.MaterialIdCount=0;THREE.LineBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineBasicMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.linecap=this.linecap;a.linejoin=this.linejoin;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.LineDashedMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineDashedMaterial.prototype.clone=function(){var a=new THREE.LineDashedMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.scale=this.scale;a.dashSize=this.dashSize;a.gapSize=this.gapSize;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.MeshBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphTargets=this.skinning=!1;this.setValues(a)};
THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshBasicMaterial.prototype.clone=function(){var a=new THREE.MeshBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=
this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;return a};THREE.MeshLambertMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=
"round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshLambertMaterial.prototype.clone=function(){var a=new THREE.MeshLambertMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;
a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.MeshPhongMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.specular=new THREE.Color(1118481);this.shininess=30;this.metal=!1;this.perPixel=!0;this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.bumpMap=this.lightMap=this.map=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.envMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;
this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshPhongMaterial.prototype.clone=function(){var a=new THREE.MeshPhongMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.specular.copy(this.specular);a.shininess=this.shininess;a.metal=this.metal;a.perPixel=this.perPixel;a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.bumpMap=this.bumpMap;a.bumpScale=this.bumpScale;a.normalMap=this.normalMap;a.normalScale.copy(this.normalScale);
a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.MeshDepthMaterial=function(a){THREE.Material.call(this);this.wireframe=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.clone=function(){var a=new THREE.MeshDepthMaterial;THREE.Material.prototype.clone.call(this,a);a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);this.shading=THREE.FlatShading;this.wireframe=!1;this.wireframeLinewidth=1;this.morphTargets=!1;this.setValues(a)};THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.clone=function(){var a=new THREE.MeshNormalMaterial;THREE.Material.prototype.clone.call(this,a);a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshFaceMaterial=function(a){this.materials=a instanceof Array?a:[]};THREE.MeshFaceMaterial.prototype.clone=function(){return new THREE.MeshFaceMaterial(this.materials.slice(0))};THREE.ParticleBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.ParticleBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ParticleBasicMaterial.prototype.clone=function(){var a=new THREE.ParticleBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.size=this.size;a.sizeAttenuation=this.sizeAttenuation;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.ShaderMaterial=function(a){THREE.Material.call(this);this.vertexShader=this.fragmentShader="void main() {}";this.uniforms={};this.defines={};this.attributes=null;this.shading=THREE.SmoothShading;this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName="position";this.setValues(a)};
THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ShaderMaterial.prototype.clone=function(){var a=new THREE.ShaderMaterial;THREE.Material.prototype.clone.call(this,a);a.fragmentShader=this.fragmentShader;a.vertexShader=this.vertexShader;a.uniforms=THREE.UniformsUtils.clone(this.uniforms);a.attributes=this.attributes;a.defines=this.defines;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.fog=this.fog;a.lights=this.lights;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=
this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.SpriteMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=new THREE.Texture;this.useScreenCoordinates=!0;this.depthTest=!this.useScreenCoordinates;this.sizeAttenuation=!this.useScreenCoordinates;this.scaleByViewport=!this.sizeAttenuation;this.alignment=THREE.SpriteAlignment.center.clone();this.fog=!1;this.uvOffset=new THREE.Vector2(0,0);this.uvScale=new THREE.Vector2(1,1);this.setValues(a);a=a||{};void 0===a.depthTest&&(this.depthTest=!this.useScreenCoordinates);
void 0===a.sizeAttenuation&&(this.sizeAttenuation=!this.useScreenCoordinates);void 0===a.scaleByViewport&&(this.scaleByViewport=!this.sizeAttenuation)};THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.SpriteMaterial.prototype.clone=function(){var a=new THREE.SpriteMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.useScreenCoordinates=this.useScreenCoordinates;a.sizeAttenuation=this.sizeAttenuation;a.scaleByViewport=this.scaleByViewport;a.alignment.copy(this.alignment);a.uvOffset.copy(this.uvOffset);a.uvScale.copy(this.uvScale);a.fog=this.fog;return a};THREE.SpriteAlignment={};THREE.SpriteAlignment.topLeft=new THREE.Vector2(1,-1);
THREE.SpriteAlignment.topCenter=new THREE.Vector2(0,-1);THREE.SpriteAlignment.topRight=new THREE.Vector2(-1,-1);THREE.SpriteAlignment.centerLeft=new THREE.Vector2(1,0);THREE.SpriteAlignment.center=new THREE.Vector2(0,0);THREE.SpriteAlignment.centerRight=new THREE.Vector2(-1,0);THREE.SpriteAlignment.bottomLeft=new THREE.Vector2(1,1);THREE.SpriteAlignment.bottomCenter=new THREE.Vector2(0,1);THREE.SpriteAlignment.bottomRight=new THREE.Vector2(-1,1);THREE.Texture=function(a,b,c,d,e,f,h,i,j){this.id=THREE.TextureIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.image=a;this.mipmaps=[];this.mapping=void 0!==b?b:new THREE.UVMapping;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==j?j:1;this.format=void 0!==h?h:THREE.RGBAFormat;this.type=void 0!==i?i:THREE.UnsignedByteType;
this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.needsUpdate=!1;this.onUpdate=null};
THREE.Texture.prototype={constructor:THREE.Texture,clone:function(a){void 0===a&&(a=new THREE.Texture);a.image=this.image;a.mipmaps=this.mipmaps.slice(0);a.mapping=this.mapping;a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.format=this.format;a.type=this.type;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.generateMipmaps=this.generateMipmaps;a.premultiplyAlpha=this.premultiplyAlpha;a.flipY=this.flipY;a.unpackAlignment=
this.unpackAlignment;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype);THREE.TextureIdCount=0;THREE.CompressedTexture=function(a,b,c,d,e,f,h,i,j,m,n){THREE.Texture.call(this,null,f,h,i,j,m,d,e,n);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=!1};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);THREE.CompressedTexture.prototype.clone=function(){var a=new THREE.CompressedTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.DataTexture=function(a,b,c,d,e,f,h,i,j,m,n){THREE.Texture.call(this,null,f,h,i,j,m,d,e,n);this.image={data:a,width:b,height:c}};THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.clone=function(){var a=new THREE.DataTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.Particle=function(a){THREE.Object3D.call(this);this.material=a};THREE.Particle.prototype=Object.create(THREE.Object3D.prototype);THREE.Particle.prototype.clone=function(a){void 0===a&&(a=new THREE.Particle(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.ParticleSystem=function(a,b){THREE.Object3D.call(this);this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.ParticleBasicMaterial({color:16777215*Math.random()});this.frustumCulled=this.sortParticles=!1};THREE.ParticleSystem.prototype=Object.create(THREE.Object3D.prototype);
THREE.ParticleSystem.prototype.clone=function(a){void 0===a&&(a=new THREE.ParticleSystem(this.geometry,this.material));a.sortParticles=this.sortParticles;THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Line=function(a,b,c){THREE.Object3D.call(this);this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()});this.type=void 0!==c?c:THREE.LineStrip};THREE.LineStrip=0;THREE.LinePieces=1;THREE.Line.prototype=Object.create(THREE.Object3D.prototype);THREE.Line.prototype.clone=function(a){void 0===a&&(a=new THREE.Line(this.geometry,this.material,this.type));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Mesh=function(a,b){THREE.Object3D.call(this);this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random()});this.updateMorphTargets()};THREE.Mesh.prototype=Object.create(THREE.Object3D.prototype);
THREE.Mesh.prototype.updateMorphTargets=function(){if(0<this.geometry.morphTargets.length){this.morphTargetBase=-1;this.morphTargetForcedOrder=[];this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var a=0,b=this.geometry.morphTargets.length;a<b;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}};
THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){if(void 0!==this.morphTargetDictionary[a])return this.morphTargetDictionary[a];console.log("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0.");return 0};THREE.Mesh.prototype.clone=function(a){void 0===a&&(a=new THREE.Mesh(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Bone=function(a){THREE.Object3D.call(this);this.skin=a;this.skinMatrix=new THREE.Matrix4};THREE.Bone.prototype=Object.create(THREE.Object3D.prototype);THREE.Bone.prototype.update=function(a,b){this.matrixAutoUpdate&&(b|=this.updateMatrix());if(b||this.matrixWorldNeedsUpdate)a?this.skinMatrix.multiplyMatrices(a,this.matrix):this.skinMatrix.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,b=!0;var c,d=this.children.length;for(c=0;c<d;c++)this.children[c].update(this.skinMatrix,b)};THREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;this.bones=[];this.boneMatrices=[];var d,e,f;if(this.geometry&&void 0!==this.geometry.bones){for(a=0;a<this.geometry.bones.length;a++)c=this.geometry.bones[a],d=c.pos,e=c.rotq,f=c.scl,b=this.addBone(),b.name=c.name,b.position.set(d[0],d[1],d[2]),b.quaternion.set(e[0],e[1],e[2],e[3]),void 0!==f?b.scale.set(f[0],f[1],f[2]):b.scale.set(1,1,1);for(a=0;a<this.bones.length;a++)c=
this.geometry.bones[a],b=this.bones[a],-1===c.parent?this.add(b):this.bones[c.parent].add(b);a=this.bones.length;this.useVertexTexture?(this.boneTextureHeight=this.boneTextureWidth=a=256<a?64:64<a?32:16<a?16:8,this.boneMatrices=new Float32Array(4*this.boneTextureWidth*this.boneTextureHeight),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),this.boneTexture.minFilter=THREE.NearestFilter,this.boneTexture.magFilter=
THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):this.boneMatrices=new Float32Array(16*a);this.pose()}};THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.addBone=function(a){void 0===a&&(a=new THREE.Bone(this));this.bones.push(a);return a};
THREE.SkinnedMesh.prototype.updateMatrixWorld=function(){var a=new THREE.Matrix4;return function(b){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||b)this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1;for(var b=0,c=this.children.length;b<c;b++){var d=this.children[b];d instanceof THREE.Bone?d.update(this.identityMatrix,!1):d.updateMatrixWorld(!0)}if(void 0==this.boneInverses){this.boneInverses=
[];b=0;for(c=this.bones.length;b<c;b++)d=new THREE.Matrix4,d.getInverse(this.bones[b].skinMatrix),this.boneInverses.push(d)}b=0;for(c=this.bones.length;b<c;b++)a.multiplyMatrices(this.bones[b].skinMatrix,this.boneInverses[b]),a.flattenToArrayOffset(this.boneMatrices,16*b);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}();THREE.SkinnedMesh.prototype.pose=function(){this.updateMatrixWorld(!0);this.normalizeSkinWeights()};
THREE.SkinnedMesh.prototype.normalizeSkinWeights=function(){if(this.geometry instanceof THREE.Geometry)for(var a=0;a<this.geometry.skinIndices.length;a++){var b=this.geometry.skinWeights[a],c=1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1)}};THREE.SkinnedMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.SkinnedMesh(this.geometry,this.material,this.useVertexTexture));THREE.Mesh.prototype.clone.call(this,a);return a};THREE.MorphAnimMesh=function(a,b){THREE.Mesh.call(this,a,b);this.duration=1E3;this.mirroredLoop=!1;this.currentKeyframe=this.lastKeyframe=this.time=0;this.direction=1;this.directionBackwards=!1;this.setFrameRange(0,this.geometry.morphTargets.length-1)};THREE.MorphAnimMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.MorphAnimMesh.prototype.setFrameRange=function(a,b){this.startKeyframe=a;this.endKeyframe=b;this.length=this.endKeyframe-this.startKeyframe+1};
THREE.MorphAnimMesh.prototype.setDirectionForward=function(){this.direction=1;this.directionBackwards=!1};THREE.MorphAnimMesh.prototype.setDirectionBackward=function(){this.direction=-1;this.directionBackwards=!0};
THREE.MorphAnimMesh.prototype.parseAnimations=function(){var a=this.geometry;a.animations||(a.animations={});for(var b,c=a.animations,d=/([a-z]+)(\d+)/,e=0,f=a.morphTargets.length;e<f;e++){var h=a.morphTargets[e].name.match(d);if(h&&1<h.length){h=h[1];c[h]||(c[h]={start:Infinity,end:-Infinity});var i=c[h];e<i.start&&(i.start=e);e>i.end&&(i.end=e);b||(b=h)}}a.firstAnimation=b};
THREE.MorphAnimMesh.prototype.setAnimationLabel=function(a,b,c){this.geometry.animations||(this.geometry.animations={});this.geometry.animations[a]={start:b,end:c}};THREE.MorphAnimMesh.prototype.playAnimation=function(a,b){var c=this.geometry.animations[a];c?(this.setFrameRange(c.start,c.end),this.duration=1E3*((c.end-c.start)/b),this.time=0):console.warn("animation["+a+"] undefined")};
THREE.MorphAnimMesh.prototype.updateAnimation=function(a){var b=this.duration/this.length;this.time+=this.direction*a;if(this.mirroredLoop){if(this.time>this.duration||0>this.time)this.direction*=-1,this.time>this.duration&&(this.time=this.duration,this.directionBackwards=!0),0>this.time&&(this.time=0,this.directionBackwards=!1)}else this.time%=this.duration,0>this.time&&(this.time+=this.duration);a=this.startKeyframe+THREE.Math.clamp(Math.floor(this.time/b),0,this.length-1);a!==this.currentKeyframe&&
(this.morphTargetInfluences[this.lastKeyframe]=0,this.morphTargetInfluences[this.currentKeyframe]=1,this.morphTargetInfluences[a]=0,this.lastKeyframe=this.currentKeyframe,this.currentKeyframe=a);b=this.time%b/b;this.directionBackwards&&(b=1-b);this.morphTargetInfluences[this.currentKeyframe]=b;this.morphTargetInfluences[this.lastKeyframe]=1-b};
THREE.MorphAnimMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.MorphAnimMesh(this.geometry,this.material));a.duration=this.duration;a.mirroredLoop=this.mirroredLoop;a.time=this.time;a.lastKeyframe=this.lastKeyframe;a.currentKeyframe=this.currentKeyframe;a.direction=this.direction;a.directionBackwards=this.directionBackwards;THREE.Mesh.prototype.clone.call(this,a);return a};THREE.Ribbon=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=b};THREE.Ribbon.prototype=Object.create(THREE.Object3D.prototype);THREE.Ribbon.prototype.clone=function(a){void 0===a&&(a=new THREE.Ribbon(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.LOD=function(){THREE.Object3D.call(this);this.objects=[]};THREE.LOD.prototype=Object.create(THREE.Object3D.prototype);THREE.LOD.prototype.addLevel=function(a,b){void 0===b&&(b=0);for(var b=Math.abs(b),c=0;c<this.objects.length&&!(b<this.objects[c].distance);c++);this.objects.splice(c,0,{distance:b,object:a});this.add(a)};THREE.LOD.prototype.getObjectForDistance=function(a){for(var b=1,c=this.objects.length;b<c&&!(a<this.objects[b].distance);b++);return this.objects[b-1].object};
THREE.LOD.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){if(1<this.objects.length){a.getPositionFromMatrix(c.matrixWorld);b.getPositionFromMatrix(this.matrixWorld);c=a.distanceTo(b);this.objects[0].object.visible=!0;for(var d=1,e=this.objects.length;d<e;d++)if(c>=this.objects[d].distance)this.objects[d-1].object.visible=!1,this.objects[d].object.visible=!0;else break;for(;d<e;d++)this.objects[d].object.visible=!1}}}();THREE.LOD.prototype.clone=function(){};THREE.Sprite=function(a){THREE.Object3D.call(this);this.material=void 0!==a?a:new THREE.SpriteMaterial;this.rotation3d=this.rotation;this.rotation=0};THREE.Sprite.prototype=Object.create(THREE.Object3D.prototype);THREE.Sprite.prototype.updateMatrix=function(){this.rotation3d.set(0,0,this.rotation,this.rotation3d.order);this.quaternion.setFromEuler(this.rotation3d);this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0};
THREE.Sprite.prototype.clone=function(a){void 0===a&&(a=new THREE.Sprite(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Scene=function(){THREE.Object3D.call(this);this.overrideMaterial=this.fog=null;this.autoUpdate=!0;this.matrixAutoUpdate=!1;this.__objects=[];this.__lights=[];this.__objectsAdded=[];this.__objectsRemoved=[]};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.__addObject=function(a){if(a instanceof THREE.Light)-1===this.__lights.indexOf(a)&&this.__lights.push(a),a.target&&void 0===a.target.parent&&this.add(a.target);else if(!(a instanceof THREE.Camera||a instanceof THREE.Bone)&&-1===this.__objects.indexOf(a)){this.__objects.push(a);this.__objectsAdded.push(a);var b=this.__objectsRemoved.indexOf(a);-1!==b&&this.__objectsRemoved.splice(b,1)}for(b=0;b<a.children.length;b++)this.__addObject(a.children[b])};
THREE.Scene.prototype.__removeObject=function(a){if(a instanceof THREE.Light){var b=this.__lights.indexOf(a);-1!==b&&this.__lights.splice(b,1)}else a instanceof THREE.Camera||(b=this.__objects.indexOf(a),-1!==b&&(this.__objects.splice(b,1),this.__objectsRemoved.push(a),b=this.__objectsAdded.indexOf(a),-1!==b&&this.__objectsAdded.splice(b,1)));for(b=0;b<a.children.length;b++)this.__removeObject(a.children[b])};
THREE.Scene.prototype.clone=function(a){void 0===a&&(a=new THREE.Scene);THREE.Object3D.prototype.clone.call(this,a);null!==this.fog&&(a.fog=this.fog.clone());null!==this.overrideMaterial&&(a.overrideMaterial=this.overrideMaterial.clone());a.autoUpdate=this.autoUpdate;a.matrixAutoUpdate=this.matrixAutoUpdate;return a};THREE.Fog=function(a,b,c){this.name="";this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};THREE.FogExp2=function(a,b){this.name="";this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)};THREE.ShaderChunk={fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",fog_fragment:"#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",
envmap_pars_fragment:"#ifdef USE_ENVMAP\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nuniform bool useRefract;\nuniform float refractionRatio;\n#else\nvarying vec3 vReflect;\n#endif\n#endif",envmap_fragment:"#ifdef USE_ENVMAP\nvec3 reflectVec;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nreflectVec = refract( cameraToVertex, normal, refractionRatio );\n} else { \nreflectVec = reflect( cameraToVertex, normal );\n}\n#else\nreflectVec = vReflect;\n#endif\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#endif\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\n} else if ( combine == 2 ) {\ngl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\n} else {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\n}\n#endif",
envmap_pars_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n#ifdef USE_SKINNING\nvec4 worldPosition = modelMatrix * skinned;\n#endif\n#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n#endif\n#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n#endif\n#endif",
envmap_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\nworldNormal = normalize( worldNormal );\nvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, worldNormal );\n}\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_particle_fragment:"#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n#endif",map_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif",map_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",map_fragment:"#ifdef USE_MAP\nvec4 texelColor = texture2D( map, vUv );\n#ifdef GAMMA_INPUT\ntexelColor.xyz *= texelColor.xyz;\n#endif\ngl_FragColor = gl_FragColor * texelColor;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif",lightmap_pars_vertex:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif",
lightmap_fragment:"#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif",lightmap_vertex:"#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\nuniform sampler2D bumpMap;\nuniform float bumpScale;\nvec2 dHdxy_fwd() {\nvec2 dSTdx = dFdx( vUv );\nvec2 dSTdy = dFdy( vUv );\nfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\nfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\nfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\nreturn vec2( dBx, dBy );\n}\nvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\nvec3 vSigmaX = dFdx( surf_pos );\nvec3 vSigmaY = dFdy( surf_pos );\nvec3 vN = surf_norm;\nvec3 R1 = cross( vSigmaY, vN );\nvec3 R2 = cross( vN, vSigmaX );\nfloat fDet = dot( vSigmaX, R1 );\nvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\nreturn normalize( abs( fDet ) * surf_norm - vGrad );\n}\n#endif",
normalmap_pars_fragment:"#ifdef USE_NORMALMAP\nuniform sampler2D normalMap;\nuniform vec2 normalScale;\nvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\nvec3 q0 = dFdx( eye_pos.xyz );\nvec3 q1 = dFdy( eye_pos.xyz );\nvec2 st0 = dFdx( vUv.st );\nvec2 st1 = dFdy( vUv.st );\nvec3 S = normalize(  q0 * st1.t - q1 * st0.t );\nvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\nvec3 N = normalize( surf_norm );\nvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\nmapN.xy = normalScale * mapN.xy;\nmat3 tsn = mat3( S, T, N );\nreturn normalize( tsn * mapN );\n}\n#endif",
specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\nuniform sampler2D specularMap;\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\nvec4 texelSpecular = texture2D( specularMap, vUv );\nspecularStrength = texelSpecular.r;\n#else\nspecularStrength = 1.0;\n#endif",lights_lambert_pars_vertex:"uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif",
lights_lambert_vertex:"vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\nvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n#ifdef DOUBLE_SIDED\nvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n#endif\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n#endif",
lights_phong_pars_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif",
lights_phong_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nvSpotLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvWorldPosition = worldPosition.xyz;\n#endif",
lights_phong_pars_fragment:"uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#else\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
lights_phong_fragment:"vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#ifdef USE_NORMALMAP\nnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\nnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vSpotLight[ i ].xyz );\nfloat lDistance = vSpotLight[ i ].w;\n#endif\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += diffuse * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif",
color_pars_fragment:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_fragment:"#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif",color_pars_vertex:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n#ifdef BONE_TEXTURE\nuniform sampler2D boneTexture;\nmat4 getBoneMatrix( const in float i ) {\nfloat j = i * 4.0;\nfloat x = mod( j, N_BONE_PIXEL_X );\nfloat y = floor( j / N_BONE_PIXEL_X );\nconst float dx = 1.0 / N_BONE_PIXEL_X;\nconst float dy = 1.0 / N_BONE_PIXEL_Y;\ny = dy * ( y + 0.5 );\nvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\nvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\nvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\nvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\nmat4 bone = mat4( v1, v2, v3, v4 );\nreturn bone;\n}\n#else\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\nmat4 getBoneMatrix( const in float i ) {\nmat4 bone = boneGlobalMatrices[ int(i) ];\nreturn bone;\n}\n#endif\n#endif",
skinbase_vertex:"#ifdef USE_SKINNING\nmat4 boneMatX = getBoneMatrix( skinIndex.x );\nmat4 boneMatY = getBoneMatrix( skinIndex.y );\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n#ifdef USE_MORPHTARGETS\nvec4 skinVertex = vec4( morphed, 1.0 );\n#else\nvec4 skinVertex = vec4( position, 1.0 );\n#endif\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif",
morphtarget_vertex:"#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\n#endif",
default_vertex:"vec4 mvPosition;\n#ifdef USE_SKINNING\nmvPosition = modelViewMatrix * skinned;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( position, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\n#endif",
skinnormal_vertex:"#ifdef USE_SKINNING\nmat4 skinMatrix = skinWeight.x * boneMatX;\nskinMatrix \t+= skinWeight.y * boneMatY;\n#ifdef USE_MORPHNORMALS\nvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n#else\nvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n#endif\n#endif",defaultnormal_vertex:"vec3 objectNormal;\n#ifdef USE_SKINNING\nobjectNormal = skinnedNormal.xyz;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\nobjectNormal = morphedNormal;\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\nobjectNormal = normal;\n#endif\n#ifdef FLIP_SIDED\nobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;",
shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",shadowmap_fragment:"#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#if defined( SHADOWMAP_TYPE_PCF )\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\nfloat shadow = 0.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.0 * xPixelOffset;\nfloat dy0 = -1.0 * yPixelOffset;\nfloat dx1 = 1.0 * xPixelOffset;\nfloat dy1 = 1.0 * yPixelOffset;\nmat3 shadowKernel;\nmat3 depthKernel;\ndepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\ndepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\ndepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\ndepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\ndepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\ndepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\ndepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\ndepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\ndepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nvec3 shadowZ = vec3( shadowCoord.z );\nshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\nshadowKernel[0] *= vec3(0.25);\nshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\nshadowKernel[1] *= vec3(0.25);\nshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\nshadowKernel[2] *= vec3(0.25);\nvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\nshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\nshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\nvec4 shadowValues;\nshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\nshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\nshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\nshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\nshadow = dot( shadowValues, vec4( 1.0 ) );\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif",
shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif",alphatest_fragment:"#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif",linear_to_gamma_fragment:"#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif"};
THREE.UniformsUtils={merge:function(a){var b,c,d,e={};for(b=0;b<a.length;b++)for(c in d=this.clone(a[b]),d)e[c]=d[c];return e},clone:function(a){var b,c,d,e={};for(b in a)for(c in e[b]={},a[b])d=a[b][c],e[b][c]=d instanceof THREE.Color||d instanceof THREE.Vector2||d instanceof THREE.Vector3||d instanceof THREE.Vector4||d instanceof THREE.Matrix4||d instanceof THREE.Texture?d.clone():d instanceof Array?d.slice():d;return e}};
THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:null},specularMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"f",value:-1},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:0.98},combine:{type:"i",value:0},morphTargetInfluences:{type:"f",value:0}},bump:{bumpMap:{type:"t",
value:null},bumpScale:{type:"f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},fog:{fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},hemisphereLightDirection:{type:"fv",value:[]},hemisphereLightSkyColor:{type:"fv",
value:[]},hemisphereLightGroundColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",value:[]},spotLightAngleCos:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",
value:1},scale:{type:"f",value:1},map:{type:"t",value:null},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};
THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,
THREE.ShaderChunk.skinbase_vertex,"#ifdef USE_ENVMAP",THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,
THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,
THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",
THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,
THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,
THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif",THREE.ShaderChunk.lightmap_fragment,
THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bump,THREE.UniformsLib.normalmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",
value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define PHONG\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,
"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"vNormal = normalize( transformedNormal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"vViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,
THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,
THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;",
THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",value:1},totalSize:{type:"f",value:2}}]),vertexShader:["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vLineDistance = scale * lineDistance;\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n}"].join("\n"),
fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\nif ( mod( vLineDistance, totalSize ) > dashSize ) {\ndiscard;\n}\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",
value:1}},vertexShader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}"},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:["varying vec3 vNormal;",THREE.ShaderChunk.morphtarget_pars_vertex,"void main() {\nvNormal = normalize( normalMatrix * normal );",
THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}"},normalmap:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{enableAO:{type:"i",value:0},enableDiffuse:{type:"i",value:0},enableSpecular:{type:"i",value:0},enableReflection:{type:"i",value:0},enableDisplacement:{type:"i",
value:0},tDisplacement:{type:"t",value:null},tDiffuse:{type:"t",value:null},tCube:{type:"t",value:null},tNormal:{type:"t",value:null},tSpecular:{type:"t",value:null},tAO:{type:"t",value:null},uNormalScale:{type:"v2",value:new THREE.Vector2(1,1)},uDisplacementBias:{type:"f",value:0},uDisplacementScale:{type:"f",value:1},uDiffuseColor:{type:"c",value:new THREE.Color(16777215)},uSpecularColor:{type:"c",value:new THREE.Color(1118481)},uAmbientColor:{type:"c",value:new THREE.Color(16777215)},uShininess:{type:"f",
value:30},uOpacity:{type:"f",value:1},useRefract:{type:"i",value:0},uRefractionRatio:{type:"f",value:0.98},uReflectivity:{type:"f",value:0.5},uOffset:{type:"v2",value:new THREE.Vector2(0,0)},uRepeat:{type:"v2",value:new THREE.Vector2(1,1)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),fragmentShader:["uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform vec2 uNormalScale;\nuniform bool useRefract;\nuniform float uRefractionRatio;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\n#ifdef FLIP_SIDED\nfinalNormal = -finalNormal;\n#endif\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\nfloat pointDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\npointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\npointVector = normalize( pointVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n#else\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\nfloat spotDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\nspotVector = normalize( spotVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\n#endif\nspotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\nvec3 spotHalfVector = normalize( spotVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += uDiffuseColor * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\n#endif\nif ( enableReflection ) {\nvec3 vReflect;\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, normal, uRefractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, normal );\n}\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}",
THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n"),vertexShader:["attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\nuniform bool enableDisplacement;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,"#ifdef USE_SKINNING\nvNormal = normalize( normalMatrix * skinnedNormal.xyz );\nvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\nvTangent = normalize( normalMatrix * skinnedTangent.xyz );\n#else\nvNormal = normalize( normalMatrix * normal );\nvTangent = normalize( normalMatrix * tangent.xyz );\n#endif\nvBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\nvUv = uv * uRepeat + uOffset;\nvec3 displacedPosition;\n#ifdef VERTEX_TEXTURES\nif ( enableDisplacement ) {\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\ndisplacedPosition = position + normalize( normal ) * df;\n} else {\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n}\n#else\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n#endif\nvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\nvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\nvWorldPosition = worldPosition.xyz;\nvViewPosition = -mvPosition.xyz;\n#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif\n}"].join("\n")},
cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:"varying vec3 vWorldPosition;\nvoid main() {\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\nvWorldPosition = worldPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\nvoid main() {\ngl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n}"},
depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}"}};THREE.WebGLRenderer=function(a){function b(a,b){var c=a.vertices.length,d=b.material;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var e in d.attributes){var f=d.attributes[e];if(!f.__webglInitialized||f.createUniqueBuffers){f.__webglInitialized=!0;var h=1;"v2"===f.type?h=2:"v3"===f.type?h=3:"v4"===f.type?h=4:"c"===f.type&&(h=3);f.size=h;f.array=new Float32Array(c*h);f.buffer=g.createBuffer();f.buffer.belongsToAttribute=e;f.needsUpdate=!0}a.__webglCustomAttributesList.push(f)}}}
function c(a,b){var c=b.geometry,h=a.faces3,i=3*h.length,j=1*h.length,k=3*h.length,h=d(b,a),m=f(h),l=e(h),p=h.vertexColors?h.vertexColors:!1;a.__vertexArray=new Float32Array(3*i);l&&(a.__normalArray=new Float32Array(3*i));c.hasTangents&&(a.__tangentArray=new Float32Array(4*i));p&&(a.__colorArray=new Float32Array(3*i));m&&(0<c.faceVertexUvs.length&&(a.__uvArray=new Float32Array(2*i)),1<c.faceVertexUvs.length&&(a.__uv2Array=new Float32Array(2*i)));b.geometry.skinWeights.length&&b.geometry.skinIndices.length&&
(a.__skinIndexArray=new Float32Array(4*i),a.__skinWeightArray=new Float32Array(4*i));a.__faceArray=new Uint16Array(3*j);a.__lineArray=new Uint16Array(2*k);if(a.numMorphTargets){a.__morphTargetsArrays=[];c=0;for(m=a.numMorphTargets;c<m;c++)a.__morphTargetsArrays.push(new Float32Array(3*i))}if(a.numMorphNormals){a.__morphNormalsArrays=[];c=0;for(m=a.numMorphNormals;c<m;c++)a.__morphNormalsArrays.push(new Float32Array(3*i))}a.__webglFaceCount=3*j;a.__webglLineCount=2*k;if(h.attributes){void 0===a.__webglCustomAttributesList&&
(a.__webglCustomAttributesList=[]);for(var n in h.attributes){var j=h.attributes[n],k={},q;for(q in j)k[q]=j[q];if(!k.__webglInitialized||k.createUniqueBuffers)k.__webglInitialized=!0,c=1,"v2"===k.type?c=2:"v3"===k.type?c=3:"v4"===k.type?c=4:"c"===k.type&&(c=3),k.size=c,k.array=new Float32Array(i*c),k.buffer=g.createBuffer(),k.buffer.belongsToAttribute=n,j.needsUpdate=!0,k.__original=j;a.__webglCustomAttributesList.push(k)}}a.__inittedArrays=!0}function d(a,b){return a.material instanceof THREE.MeshFaceMaterial?
a.material.materials[b.materialIndex]:a.material}function e(a){return a instanceof THREE.MeshBasicMaterial&&!a.envMap||a instanceof THREE.MeshDepthMaterial?!1:a&&void 0!==a.shading&&a.shading===THREE.SmoothShading?THREE.SmoothShading:THREE.FlatShading}function f(a){return a.map||a.lightMap||a.bumpMap||a.normalMap||a.specularMap||a instanceof THREE.ShaderMaterial?!0:!1}function h(a){ab[a]||(g.enableVertexAttribArray(a),ab[a]=!0)}function i(){for(var a in ab)ab[a]&&(g.disableVertexAttribArray(a),ab[a]=
!1)}function j(a,b){return a.z!==b.z?b.z-a.z:a.id-b.id}function m(a,b){return b[0]-a[0]}function n(a,b,c){if(a.length)for(var d=0,g=a.length;d<g;d++)ma=oa=null,$a=Ra=V=sa=ka=Ta=pa=-1,Ua=!0,a[d].render(b,c,Gb,Hb),ma=oa=null,$a=Ra=V=sa=ka=Ta=pa=-1,Ua=!0}function p(a,b,c,d,g,e,f,h,i){var j,k,m,l,p;b?(j=a.length-1,p=b=-1):(j=0,b=a.length,p=1);for(var n=j;n!==b;n+=p)if(j=a[n],j.render){k=j.object;m=j.buffer;var q=!1,s,r,t;if(h)l=k instanceof THREE.SkinnedMesh?h.skinned:h["static"];else{l=j[c];if("opaque"==
c&&k.opacity&&1>j.object.opacity)continue;else"transparent"==c&&(k.opacity&&1>j.object.opacity)&&(l||(l=j.opaque),l.uniforms.opacity&&(q=!0,s=l.transparent,r=l.depthWrite,t=l.uniforms.opacity.value,l.uniforms.opacity.value=k.opacity,l.transparent=!0,l.depthWrite=!1));if(l)for(var u in i)l.uniforms[u]&&(l.uniforms[u].value=i[u].value);else continue;f&&J.setBlending(l.blending,l.blendEquation,l.blendSrc,l.blendDst);J.setDepthTest(l.depthTest);J.setDepthWrite(l.depthWrite);w(l.polygonOffset,l.polygonOffsetFactor,
l.polygonOffsetUnits)}J.setMaterialFaces(l);m instanceof THREE.BufferGeometry?J.renderBufferDirect(d,g,e,l,m,k,j.offsetIndices):J.renderBuffer(d,g,e,l,m,k);for(u in i)l.uniforms[u]&&(l.uniforms[u].value=i[u].defaultValue);q&&(l.uniforms.opacity.value=t,l.transparent=s,l.depthWrite=r)}}function l(a,b,c,d,g,e,f){for(var h,i,j=0,k=a.length;j<k;j++)if(h=a[j],i=h.object,i.visible){if(f)h=f;else{h=h[b];if(!h)continue;e&&J.setBlending(h.blending,h.blendEquation,h.blendSrc,h.blendDst);J.setDepthTest(h.depthTest);
J.setDepthWrite(h.depthWrite);w(h.polygonOffset,h.polygonOffsetFactor,h.polygonOffsetUnits)}J.renderImmediateObject(c,d,g,h,i)}}function t(a,d){var e,f,h,i,j;if(void 0===a.__webglInit&&(a.__webglInit=!0,a._modelViewMatrix=new THREE.Matrix4,a._normalMatrix=new THREE.Matrix3,f=a.geometry,!(void 0===f||f&&f.__webglInit)))if(f instanceof THREE.BufferGeometry){var k,l;for(k in f.attributes)l="index"===k||"index_wireframe"===k?g.ELEMENT_ARRAY_BUFFER:g.ARRAY_BUFFER,i=f.attributes[k],void 0===i.numItems&&
(i.numItems=i.array.length),i.buffer=g.createBuffer(),g.bindBuffer(l,i.buffer),g.bufferData(l,i.array,g.STATIC_DRAW)}else if(a instanceof THREE.Mesh){h=a.material;if(void 0===f.geometryGroups){k=f;var m,p,n;l={};var q=k.morphTargets.length,s=k.morphNormals.length,r=h instanceof THREE.MeshFaceMaterial;k.geometryGroups={};h=0;for(m=k.faces.length;h<m;h++)p=k.faces[h],p=r?p.materialIndex:0,void 0===l[p]&&(l[p]={hash:p,counter:0}),n=l[p].hash+"_"+l[p].counter,void 0===k.geometryGroups[n]&&(k.geometryGroups[n]=
{faces3:[],materialIndex:p,vertices:0,numMorphTargets:q,numMorphNormals:s}),65535<k.geometryGroups[n].vertices+3&&(l[p].counter+=1,n=l[p].hash+"_"+l[p].counter,void 0===k.geometryGroups[n]&&(k.geometryGroups[n]={faces3:[],materialIndex:p,vertices:0,numMorphTargets:q,numMorphNormals:s})),k.geometryGroups[n].faces3.push(h),k.geometryGroups[n].vertices+=3;k.geometryGroupsList=[];for(i in k.geometryGroups)k.geometryGroups[i].id=Z++,k.geometryGroupsList.push(k.geometryGroups[i])}for(e in f.geometryGroups)if(i=
f.geometryGroups[e],!i.__webglVertexBuffer){k=i;k.__webglVertexBuffer=g.createBuffer();k.__webglNormalBuffer=g.createBuffer();k.__webglTangentBuffer=g.createBuffer();k.__webglColorBuffer=g.createBuffer();k.__webglUVBuffer=g.createBuffer();k.__webglUV2Buffer=g.createBuffer();k.__webglSkinIndicesBuffer=g.createBuffer();k.__webglSkinWeightsBuffer=g.createBuffer();k.__webglFaceBuffer=g.createBuffer();k.__webglLineBuffer=g.createBuffer();q=l=void 0;if(k.numMorphTargets){k.__webglMorphTargetsBuffers=[];
l=0;for(q=k.numMorphTargets;l<q;l++)k.__webglMorphTargetsBuffers.push(g.createBuffer())}if(k.numMorphNormals){k.__webglMorphNormalsBuffers=[];l=0;for(q=k.numMorphNormals;l<q;l++)k.__webglMorphNormalsBuffers.push(g.createBuffer())}J.info.memory.geometries++;c(i,a);f.verticesNeedUpdate=!0;f.morphTargetsNeedUpdate=!0;f.elementsNeedUpdate=!0;f.uvsNeedUpdate=!0;f.normalsNeedUpdate=!0;f.tangentsNeedUpdate=!0;f.colorsNeedUpdate=!0}}else a instanceof THREE.Ribbon?f.__webglVertexBuffer||(i=f,i.__webglVertexBuffer=
g.createBuffer(),i.__webglColorBuffer=g.createBuffer(),i.__webglNormalBuffer=g.createBuffer(),J.info.memory.geometries++,i=f,k=i.vertices.length,i.__vertexArray=new Float32Array(3*k),i.__colorArray=new Float32Array(3*k),i.__normalArray=new Float32Array(3*k),i.__webglVertexCount=k,b(i,a),f.verticesNeedUpdate=!0,f.colorsNeedUpdate=!0,f.normalsNeedUpdate=!0):a instanceof THREE.Line?f.__webglVertexBuffer||(i=f,i.__webglVertexBuffer=g.createBuffer(),i.__webglColorBuffer=g.createBuffer(),i.__webglLineDistanceBuffer=
g.createBuffer(),J.info.memory.geometries++,i=f,k=i.vertices.length,i.__vertexArray=new Float32Array(3*k),i.__colorArray=new Float32Array(3*k),i.__lineDistanceArray=new Float32Array(1*k),i.__webglLineCount=k,b(i,a),f.verticesNeedUpdate=!0,f.colorsNeedUpdate=!0,f.lineDistancesNeedUpdate=!0):a instanceof THREE.ParticleSystem&&!f.__webglVertexBuffer&&(i=f,i.__webglVertexBuffer=g.createBuffer(),i.__webglColorBuffer=g.createBuffer(),J.info.memory.geometries++,i=f,k=i.vertices.length,i.__vertexArray=new Float32Array(3*
k),i.__colorArray=new Float32Array(3*k),i.__sortArray=[],i.__webglParticleCount=k,b(i,a),f.verticesNeedUpdate=!0,f.colorsNeedUpdate=!0);void 0!==a.geometry&&void 0===a.geometry.__webglInit&&(a.geometry.__webglInit=!0,a.geometry.addEventListener("dispose",Ib));if(void 0===a.__webglActive){if(a instanceof THREE.Mesh)if(f=a.geometry,f instanceof THREE.BufferGeometry)if(f.offsets){e={};for(i=0;i<f.offsets.length;++i)j=f.offsets[i],j=j.hasOwnProperty("materialIndex")?j.materialIndex:0,j in e||(e[j]=[]),
e[j].push(i);for(j in e)u(d.__webglObjects,f,a,e[j])}else u(d.__webglObjects,f,a);else{if(f instanceof THREE.Geometry)for(e in f.geometryGroups)i=f.geometryGroups[e],u(d.__webglObjects,i,a)}else a instanceof THREE.Ribbon||a instanceof THREE.Line||a instanceof THREE.ParticleSystem?(f=a.geometry,u(d.__webglObjects,f,a)):a instanceof THREE.ImmediateRenderObject||a.immediateRenderCallback?d.__webglObjectsImmediate.push({id:null,object:a,opaque:null,transparent:null,z:0}):a instanceof THREE.Sprite?d.__webglSprites.push(a):
a instanceof THREE.LensFlare&&d.__webglFlares.push(a);a.__webglActive=!0}}function u(a,b,c,d){a.push({id:null,buffer:b,object:c,opaque:null,transparent:null,z:0,offsetIndices:d})}function k(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;return!1}function q(a){for(var b in a.attributes)a.attributes[b].needsUpdate=!1}function s(a,b){a instanceof THREE.Mesh||a instanceof THREE.ParticleSystem||a instanceof THREE.Ribbon||a instanceof THREE.Line?r(b.__webglObjects,a):a instanceof THREE.Sprite?
x(b.__webglSprites,a):a instanceof THREE.LensFlare?x(b.__webglFlares,a):(a instanceof THREE.ImmediateRenderObject||a.immediateRenderCallback)&&r(b.__webglObjectsImmediate,a);delete a.__webglActive}function r(a,b){for(var c=a.length-1;0<=c;c--)a[c].object===b&&a.splice(c,1)}function x(a,b){for(var c=a.length-1;0<=c;c--)a[c]===b&&a.splice(c,1)}function y(a,b,c,d,e){ja=0;d.needsUpdate&&(d.program&&Jb(d),J.initMaterial(d,b,c,e),d.needsUpdate=!1);d.morphTargets&&!e.__webglMorphTargetInfluences&&(e.__webglMorphTargetInfluences=
new Float32Array(J.maxMorphTargets));var f=!1,h=d.program,i=h.uniforms,j=d.uniforms;h!==oa&&(g.useProgram(h),oa=h,f=!0);d.id!==$a&&($a=d.id,f=!0);if(f||a!==ma)g.uniformMatrix4fv(i.projectionMatrix,!1,a.projectionMatrix.elements),a!==ma&&(ma=a);if(d.skinning)if(Ab&&e.useVertexTexture){if(null!==i.boneTexture){var k=z();g.uniform1i(i.boneTexture,k);J.setTexture(e.boneTexture,k)}}else null!==i.boneGlobalMatrices&&g.uniformMatrix4fv(i.boneGlobalMatrices,!1,e.boneMatrices);if(f){c&&d.fog&&(j.fogColor.value=
c.color,c instanceof THREE.Fog?(j.fogNear.value=c.near,j.fogFar.value=c.far):c instanceof THREE.FogExp2&&(j.fogDensity.value=c.density));if(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d.lights){if(Ua){for(var l,m=k=0,p=0,n,q,s,r=Kb,t=r.directional.colors,u=r.directional.positions,v=r.point.colors,w=r.point.positions,y=r.point.distances,B=r.spot.colors,x=r.spot.positions,I=r.spot.distances,K=r.spot.directions,N=r.spot.anglesCos,G=r.spot.exponents,M=r.hemi.skyColors,
Q=r.hemi.groundColors,U=r.hemi.positions,V=0,Z=0,ba=0,ea=0,ka=0,S=0,T=0,R=0,qa=l=0,c=s=qa=0,f=b.length;c<f;c++)l=b[c],l.onlyShadow||(n=l.color,q=l.intensity,s=l.distance,l instanceof THREE.AmbientLight?l.visible&&(J.gammaInput?(k+=n.r*n.r,m+=n.g*n.g,p+=n.b*n.b):(k+=n.r,m+=n.g,p+=n.b)):l instanceof THREE.DirectionalLight?(ka+=1,l.visible&&(ha.getPositionFromMatrix(l.matrixWorld),na.getPositionFromMatrix(l.target.matrixWorld),ha.sub(na),ha.normalize(),0===ha.x&&0===ha.y&&0===ha.z||(l=3*V,u[l]=ha.x,
u[l+1]=ha.y,u[l+2]=ha.z,J.gammaInput?D(t,l,n,q*q):E(t,l,n,q),V+=1))):l instanceof THREE.PointLight?(S+=1,l.visible&&(qa=3*Z,J.gammaInput?D(v,qa,n,q*q):E(v,qa,n,q),na.getPositionFromMatrix(l.matrixWorld),w[qa]=na.x,w[qa+1]=na.y,w[qa+2]=na.z,y[Z]=s,Z+=1)):l instanceof THREE.SpotLight?(T+=1,l.visible&&(qa=3*ba,J.gammaInput?D(B,qa,n,q*q):E(B,qa,n,q),na.getPositionFromMatrix(l.matrixWorld),x[qa]=na.x,x[qa+1]=na.y,x[qa+2]=na.z,I[ba]=s,ha.copy(na),na.getPositionFromMatrix(l.target.matrixWorld),ha.sub(na),
ha.normalize(),K[qa]=ha.x,K[qa+1]=ha.y,K[qa+2]=ha.z,N[ba]=Math.cos(l.angle),G[ba]=l.exponent,ba+=1)):l instanceof THREE.HemisphereLight&&(R+=1,l.visible&&(ha.getPositionFromMatrix(l.matrixWorld),ha.normalize(),0===ha.x&&0===ha.y&&0===ha.z||(s=3*ea,U[s]=ha.x,U[s+1]=ha.y,U[s+2]=ha.z,n=l.color,l=l.groundColor,J.gammaInput?(q*=q,D(M,s,n,q),D(Q,s,l,q)):(E(M,s,n,q),E(Q,s,l,q)),ea+=1))));c=3*V;for(f=Math.max(t.length,3*ka);c<f;c++)t[c]=0;c=3*Z;for(f=Math.max(v.length,3*S);c<f;c++)v[c]=0;c=3*ba;for(f=Math.max(B.length,
3*T);c<f;c++)B[c]=0;c=3*ea;for(f=Math.max(M.length,3*R);c<f;c++)M[c]=0;c=3*ea;for(f=Math.max(Q.length,3*R);c<f;c++)Q[c]=0;r.directional.length=V;r.point.length=Z;r.spot.length=ba;r.hemi.length=ea;r.ambient[0]=k;r.ambient[1]=m;r.ambient[2]=p;Ua=!1}c=Kb;j.ambientLightColor.value=c.ambient;j.directionalLightColor.value=c.directional.colors;j.directionalLightDirection.value=c.directional.positions;j.pointLightColor.value=c.point.colors;j.pointLightPosition.value=c.point.positions;j.pointLightDistance.value=
c.point.distances;j.spotLightColor.value=c.spot.colors;j.spotLightPosition.value=c.spot.positions;j.spotLightDistance.value=c.spot.distances;j.spotLightDirection.value=c.spot.directions;j.spotLightAngleCos.value=c.spot.anglesCos;j.spotLightExponent.value=c.spot.exponents;j.hemisphereLightSkyColor.value=c.hemi.skyColors;j.hemisphereLightGroundColor.value=c.hemi.groundColors;j.hemisphereLightDirection.value=c.hemi.positions}if(d instanceof THREE.MeshBasicMaterial||d instanceof THREE.MeshLambertMaterial||
d instanceof THREE.MeshPhongMaterial){j.opacity.value=d.opacity;J.gammaInput?j.diffuse.value.copyGammaToLinear(d.color):j.diffuse.value=d.color;j.map.value=d.map;j.lightMap.value=d.lightMap;j.specularMap.value=d.specularMap;d.bumpMap&&(j.bumpMap.value=d.bumpMap,j.bumpScale.value=d.bumpScale);d.normalMap&&(j.normalMap.value=d.normalMap,j.normalScale.value.copy(d.normalScale));var la;d.map?la=d.map:d.specularMap?la=d.specularMap:d.normalMap?la=d.normalMap:d.bumpMap&&(la=d.bumpMap);void 0!==la&&(c=la.offset,
la=la.repeat,j.offsetRepeat.value.set(c.x,c.y,la.x,la.y));j.envMap.value=d.envMap;j.flipEnvMap.value=d.envMap instanceof THREE.WebGLRenderTargetCube?1:-1;j.reflectivity.value=d.reflectivity;j.refractionRatio.value=d.refractionRatio;j.combine.value=d.combine;j.useRefract.value=d.envMap&&d.envMap.mapping instanceof THREE.CubeRefractionMapping}d instanceof THREE.LineBasicMaterial?(j.diffuse.value=d.color,j.opacity.value=d.opacity):d instanceof THREE.LineDashedMaterial?(j.diffuse.value=d.color,j.opacity.value=
d.opacity,j.dashSize.value=d.dashSize,j.totalSize.value=d.dashSize+d.gapSize,j.scale.value=d.scale):d instanceof THREE.ParticleBasicMaterial?(j.psColor.value=d.color,j.opacity.value=d.opacity,j.size.value=d.size,j.scale.value=A.height/2,j.map.value=d.map):d instanceof THREE.MeshPhongMaterial?(j.shininess.value=d.shininess,J.gammaInput?(j.ambient.value.copyGammaToLinear(d.ambient),j.emissive.value.copyGammaToLinear(d.emissive),j.specular.value.copyGammaToLinear(d.specular)):(j.ambient.value=d.ambient,
j.emissive.value=d.emissive,j.specular.value=d.specular),d.wrapAround&&j.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshLambertMaterial?(J.gammaInput?(j.ambient.value.copyGammaToLinear(d.ambient),j.emissive.value.copyGammaToLinear(d.emissive)):(j.ambient.value=d.ambient,j.emissive.value=d.emissive),d.wrapAround&&j.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshDepthMaterial?(j.mNear.value=a.near,j.mFar.value=a.far,j.opacity.value=d.opacity):d instanceof THREE.MeshNormalMaterial&&(j.opacity.value=
d.opacity);if(e.receiveShadow&&!d._shadowPass&&j.shadowMatrix){c=la=0;for(f=b.length;c<f;c++)if(k=b[c],k.castShadow&&(k instanceof THREE.SpotLight||k instanceof THREE.DirectionalLight&&!k.shadowCascade))j.shadowMap.value[la]=k.shadowMap,j.shadowMapSize.value[la]=k.shadowMapSize,j.shadowMatrix.value[la]=k.shadowMatrix,j.shadowDarkness.value[la]=k.shadowDarkness,j.shadowBias.value[la]=k.shadowBias,la++}b=d.uniformsList;j=0;for(la=b.length;j<la;j++)if(f=h.uniforms[b[j][1]])if(c=b[j][0],m=c.type,k=c.value,
"i"===m)g.uniform1i(f,k);else if("f"===m)g.uniform1f(f,k);else if("v2"===m)g.uniform2f(f,k.x,k.y);else if("v3"===m)g.uniform3f(f,k.x,k.y,k.z);else if("v4"===m)g.uniform4f(f,k.x,k.y,k.z,k.w);else if("c"===m)g.uniform3f(f,k.r,k.g,k.b);else if("iv1"===m)g.uniform1iv(f,k);else if("iv"===m)g.uniform3iv(f,k);else if("fv1"===m)g.uniform1fv(f,k);else if("fv"===m)g.uniform3fv(f,k);else if("v2v"===m){void 0===c._array&&(c._array=new Float32Array(2*k.length));m=0;for(p=k.length;m<p;m++)r=2*m,c._array[r]=k[m].x,
c._array[r+1]=k[m].y;g.uniform2fv(f,c._array)}else if("v3v"===m){void 0===c._array&&(c._array=new Float32Array(3*k.length));m=0;for(p=k.length;m<p;m++)r=3*m,c._array[r]=k[m].x,c._array[r+1]=k[m].y,c._array[r+2]=k[m].z;g.uniform3fv(f,c._array)}else if("v4v"===m){void 0===c._array&&(c._array=new Float32Array(4*k.length));m=0;for(p=k.length;m<p;m++)r=4*m,c._array[r]=k[m].x,c._array[r+1]=k[m].y,c._array[r+2]=k[m].z,c._array[r+3]=k[m].w;g.uniform4fv(f,c._array)}else if("m4"===m)void 0===c._array&&(c._array=
new Float32Array(16)),k.flattenToArray(c._array),g.uniformMatrix4fv(f,!1,c._array);else if("m4v"===m){void 0===c._array&&(c._array=new Float32Array(16*k.length));m=0;for(p=k.length;m<p;m++)k[m].flattenToArrayOffset(c._array,16*m);g.uniformMatrix4fv(f,!1,c._array)}else if("t"===m){if(r=k,k=z(),g.uniform1i(f,k),r)if(r.image instanceof Array&&6===r.image.length){if(c=r,f=k,6===c.image.length)if(c.needsUpdate){c.image.__webglTextureCube||(c.addEventListener("dispose",Bb),c.image.__webglTextureCube=g.createTexture(),
J.info.memory.textures++);g.activeTexture(g.TEXTURE0+f);g.bindTexture(g.TEXTURE_CUBE_MAP,c.image.__webglTextureCube);g.pixelStorei(g.UNPACK_FLIP_Y_WEBGL,c.flipY);f=c instanceof THREE.CompressedTexture;k=[];for(m=0;6>m;m++)p=k,r=m,J.autoScaleCubemaps&&!f?(t=c.image[m],v=Lb,t.width<=v&&t.height<=v||(w=Math.max(t.width,t.height),u=Math.floor(t.width*v/w),v=Math.floor(t.height*v/w),w=document.createElement("canvas"),w.width=u,w.height=v,w.getContext("2d").drawImage(t,0,0,t.width,t.height,0,0,u,v),t=w)):
t=c.image[m],p[r]=t;m=k[0];p=0===(m.width&m.width-1)&&0===(m.height&m.height-1);r=H(c.format);t=H(c.type);L(g.TEXTURE_CUBE_MAP,c,p);for(m=0;6>m;m++)if(f){v=k[m].mipmaps;w=0;for(y=v.length;w<y;w++)u=v[w],g.compressedTexImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+m,w,r,u.width,u.height,0,u.data)}else g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+m,0,r,r,t,k[m]);c.generateMipmaps&&p&&g.generateMipmap(g.TEXTURE_CUBE_MAP);c.needsUpdate=!1;if(c.onUpdate)c.onUpdate()}else g.activeTexture(g.TEXTURE0+f),g.bindTexture(g.TEXTURE_CUBE_MAP,
c.image.__webglTextureCube)}else r instanceof THREE.WebGLRenderTargetCube?(c=r,g.activeTexture(g.TEXTURE0+k),g.bindTexture(g.TEXTURE_CUBE_MAP,c.__webglTexture)):J.setTexture(r,k)}else if("tv"===m){void 0===c._array&&(c._array=[]);m=0;for(p=c.value.length;m<p;m++)c._array[m]=z();g.uniform1iv(f,c._array);m=0;for(p=c.value.length;m<p;m++)r=c.value[m],k=c._array[m],r&&J.setTexture(r,k)}else console.warn("THREE.WebGLRenderer: Unknown uniform type: "+m);if((d instanceof THREE.ShaderMaterial||d instanceof
THREE.MeshPhongMaterial||d.envMap)&&null!==i.cameraPosition)na.getPositionFromMatrix(a.matrixWorld),g.uniform3f(i.cameraPosition,na.x,na.y,na.z);(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.ShaderMaterial||d.skinning)&&null!==i.viewMatrix&&g.uniformMatrix4fv(i.viewMatrix,!1,a.matrixWorldInverse.elements)}g.uniformMatrix4fv(i.modelViewMatrix,!1,e._modelViewMatrix.elements);i.normalMatrix&&g.uniformMatrix3fv(i.normalMatrix,!1,e._normalMatrix.elements);
null!==i.modelMatrix&&g.uniformMatrix4fv(i.modelMatrix,!1,e.matrixWorld.elements);return h}function z(){var a=ja;a>=ub&&console.warn("WebGLRenderer: trying to use "+a+" texture units while this GPU supports only "+ub);ja+=1;return a}function D(a,b,c,d){a[b]=c.r*c.r*d;a[b+1]=c.g*c.g*d;a[b+2]=c.b*c.b*d}function E(a,b,c,d){a[b]=c.r*d;a[b+1]=c.g*d;a[b+2]=c.b*d}function B(a){a!==Mb&&(g.lineWidth(a),Mb=a)}function w(a,b,c){Da!==a&&(a?g.enable(g.POLYGON_OFFSET_FILL):g.disable(g.POLYGON_OFFSET_FILL),Da=a);
if(a&&(bc!==b||cc!==c))g.polygonOffset(b,c),bc=b,cc=c}function M(a){for(var a=a.split("\n"),b=0,c=a.length;b<c;b++)a[b]=b+1+": "+a[b];return a.join("\n")}function I(a,b){var c;"fragment"===a?c=g.createShader(g.FRAGMENT_SHADER):"vertex"===a&&(c=g.createShader(g.VERTEX_SHADER));g.shaderSource(c,b);g.compileShader(c);return!g.getShaderParameter(c,g.COMPILE_STATUS)?(console.error(g.getShaderInfoLog(c)),console.error(M(b)),null):c}function L(a,b,c){c?(g.texParameteri(a,g.TEXTURE_WRAP_S,H(b.wrapS)),g.texParameteri(a,
g.TEXTURE_WRAP_T,H(b.wrapT)),g.texParameteri(a,g.TEXTURE_MAG_FILTER,H(b.magFilter)),g.texParameteri(a,g.TEXTURE_MIN_FILTER,H(b.minFilter))):(g.texParameteri(a,g.TEXTURE_WRAP_S,g.CLAMP_TO_EDGE),g.texParameteri(a,g.TEXTURE_WRAP_T,g.CLAMP_TO_EDGE),g.texParameteri(a,g.TEXTURE_MAG_FILTER,v(b.magFilter)),g.texParameteri(a,g.TEXTURE_MIN_FILTER,v(b.minFilter)));if(Va&&b.type!==THREE.FloatType&&(1<b.anisotropy||b.__oldAnisotropy))g.texParameterf(a,Va.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,dc)),b.__oldAnisotropy=
b.anisotropy}function G(a,b){g.bindRenderbuffer(g.RENDERBUFFER,a);b.depthBuffer&&!b.stencilBuffer?(g.renderbufferStorage(g.RENDERBUFFER,g.DEPTH_COMPONENT16,b.width,b.height),g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.RENDERBUFFER,a)):b.depthBuffer&&b.stencilBuffer?(g.renderbufferStorage(g.RENDERBUFFER,g.DEPTH_STENCIL,b.width,b.height),g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_STENCIL_ATTACHMENT,g.RENDERBUFFER,a)):g.renderbufferStorage(g.RENDERBUFFER,g.RGBA4,b.width,b.height)}
function v(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?g.NEAREST:g.LINEAR}function H(a){if(a===THREE.RepeatWrapping)return g.REPEAT;if(a===THREE.ClampToEdgeWrapping)return g.CLAMP_TO_EDGE;if(a===THREE.MirroredRepeatWrapping)return g.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return g.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return g.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return g.NEAREST_MIPMAP_LINEAR;if(a===
THREE.LinearFilter)return g.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return g.LINEAR_MIPMAP_NEAREST;if(a===THREE.LinearMipMapLinearFilter)return g.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return g.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return g.UNSIGNED_SHORT_4_4_4_4;if(a===THREE.UnsignedShort5551Type)return g.UNSIGNED_SHORT_5_5_5_1;if(a===THREE.UnsignedShort565Type)return g.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return g.BYTE;if(a===THREE.ShortType)return g.SHORT;if(a===
THREE.UnsignedShortType)return g.UNSIGNED_SHORT;if(a===THREE.IntType)return g.INT;if(a===THREE.UnsignedIntType)return g.UNSIGNED_INT;if(a===THREE.FloatType)return g.FLOAT;if(a===THREE.AlphaFormat)return g.ALPHA;if(a===THREE.RGBFormat)return g.RGB;if(a===THREE.RGBAFormat)return g.RGBA;if(a===THREE.LuminanceFormat)return g.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return g.LUMINANCE_ALPHA;if(a===THREE.AddEquation)return g.FUNC_ADD;if(a===THREE.SubtractEquation)return g.FUNC_SUBTRACT;if(a===THREE.ReverseSubtractEquation)return g.FUNC_REVERSE_SUBTRACT;
if(a===THREE.ZeroFactor)return g.ZERO;if(a===THREE.OneFactor)return g.ONE;if(a===THREE.SrcColorFactor)return g.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return g.ONE_MINUS_SRC_COLOR;if(a===THREE.SrcAlphaFactor)return g.SRC_ALPHA;if(a===THREE.OneMinusSrcAlphaFactor)return g.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return g.DST_ALPHA;if(a===THREE.OneMinusDstAlphaFactor)return g.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return g.DST_COLOR;if(a===THREE.OneMinusDstColorFactor)return g.ONE_MINUS_DST_COLOR;
if(a===THREE.SrcAlphaSaturateFactor)return g.SRC_ALPHA_SATURATE;if(void 0!==Wa){if(a===THREE.RGB_S3TC_DXT1_Format)return Wa.COMPRESSED_RGB_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT1_Format)return Wa.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT3_Format)return Wa.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return Wa.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(void 0!==bb){if(a===THREE.RGB_ATC_Format)return bb.COMPRESSED_RGB_ATC_WEBGL;if(a===THREE.RGBA_ATC_EXPLICIT_ALPHA_Format)return bb.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL;
if(a===THREE.RGBA_ATC_INTERP_ALPHA_Format)return bb.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL}if(void 0!==Ja){if(a===THREE.RGB_PVRTC_4BPPV1_Format)return Ja.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(a===THREE.RGB_PVRTC_2BPPV1_Format)return Ja.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(a===THREE.RGBA_PVRTC_4BPPV1_Format)return Ja.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(a===THREE.RGBA_PVRTC_2BPPV1_Format)return Ja.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION);var a=a||
{},A=void 0!==a.canvas?a.canvas:document.createElement("canvas"),Q=void 0!==a.precision?a.precision:"highp",N=void 0!==a.alpha?a.alpha:!0,Ca=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,ra=void 0!==a.antialias?a.antialias:!1,wa=void 0!==a.stencil?a.stencil:!0,xa=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,U=new THREE.Color(0),ea=0;void 0!==a.clearColor&&(console.warn("DEPRECATED: clearColor in WebGLRenderer constructor parameters is being removed. Use .setClearColor() instead."),
U.setHex(a.clearColor));void 0!==a.clearAlpha&&(console.warn("DEPRECATED: clearAlpha in WebGLRenderer constructor parameters is being removed. Use .setClearColor() instead."),ea=a.clearAlpha);this.domElement=A;this.context=null;this.devicePixelRatio=void 0!==a.devicePixelRatio?a.devicePixelRatio:void 0!==window.devicePixelRatio?window.devicePixelRatio:1;this.autoUpdateObjects=this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.shadowMapEnabled=this.physicallyBasedShading=
this.gammaOutput=this.gammaInput=!1;this.shadowMapAutoUpdate=!0;this.shadowMapType=THREE.PCFShadowMap;this.shadowMapCullFace=THREE.CullFaceFront;this.shadowMapCascade=this.shadowMapDebug=!1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;this.renderPluginsPre=[];this.renderPluginsPost=[];this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var J=this,ya=[],tb=0,oa=null,Aa=null,$a=-1,Ra=null,ma=null,Z=0,ja=0,sa=-1,V=-1,pa=-1,Ba=
-1,ba=-1,Sa=-1,Ta=-1,ka=-1,Da=null,bc=null,cc=null,Mb=null,Nb=0,Cb=0,Ob=0,Pb=0,Gb=0,Hb=0,ab={},Qb=new THREE.Frustum,ec=new THREE.Matrix4,zc=new THREE.Matrix4,na=new THREE.Vector3,ha=new THREE.Vector3,Ua=!0,Kb={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[]},spot:{length:0,colors:[],positions:[],distances:[],directions:[],anglesCos:[],exponents:[]},hemi:{length:0,skyColors:[],groundColors:[],positions:[]}},g,qb,Rb,Va,Wa,bb,Ja;try{if(!(g=
A.getContext("experimental-webgl",{alpha:N,premultipliedAlpha:Ca,antialias:ra,stencil:wa,preserveDrawingBuffer:xa})))throw"Error creating WebGL context.";}catch(Ac){console.error(Ac)}qb=g.getExtension("OES_texture_float");g.getExtension("OES_texture_float_linear");Rb=g.getExtension("OES_standard_derivatives");Va=g.getExtension("EXT_texture_filter_anisotropic")||g.getExtension("MOZ_EXT_texture_filter_anisotropic")||g.getExtension("WEBKIT_EXT_texture_filter_anisotropic");Wa=g.getExtension("WEBGL_compressed_texture_s3tc")||
g.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||g.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");bb=g.getExtension("WEBGL_compressed_texture_atc")||g.getExtension("MOZ_WEBGL_compressed_texture_atc")||g.getExtension("WEBKIT_WEBGL_compressed_texture_atc");Ja=g.getExtension("WEBGL_compressed_texture_pvrtc")||g.getExtension("MOZ_WEBGL_compressed_texture_pvrtc")||g.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");qb||console.log("THREE.WebGLRenderer: Float textures not supported.");Rb||
console.log("THREE.WebGLRenderer: Standard derivatives not supported.");Va||console.log("THREE.WebGLRenderer: Anisotropic texture filtering not supported.");Wa||console.log("THREE.WebGLRenderer: S3TC compressed textures not supported.");bb||console.log("THREE.WebGLRenderer: ATC compressed textures not supported.");Ja||console.log("THREE.WebGLRenderer: PVRTC compressed textures not supported.");void 0===g.getShaderPrecisionFormat&&(g.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,
precision:1}});g.clearColor(0,0,0,1);g.clearDepth(1);g.clearStencil(0);g.enable(g.DEPTH_TEST);g.depthFunc(g.LEQUAL);g.frontFace(g.CCW);g.cullFace(g.BACK);g.enable(g.CULL_FACE);g.enable(g.BLEND);g.blendEquation(g.FUNC_ADD);g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA);g.clearColor(U.r,U.g,U.b,ea);this.context=g;var ub=g.getParameter(g.MAX_TEXTURE_IMAGE_UNITS),fc=g.getParameter(g.MAX_VERTEX_TEXTURE_IMAGE_UNITS),Bc=g.getParameter(g.MAX_TEXTURE_SIZE),Lb=g.getParameter(g.MAX_CUBE_MAP_TEXTURE_SIZE),dc=
Va?g.getParameter(Va.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0,vb=0<fc,Ab=vb&&qb;(Wa||bb||Ja)&&g.getParameter(g.COMPRESSED_TEXTURE_FORMATS);var Cc=g.getShaderPrecisionFormat(g.VERTEX_SHADER,g.HIGH_FLOAT),Dc=g.getShaderPrecisionFormat(g.VERTEX_SHADER,g.MEDIUM_FLOAT);g.getShaderPrecisionFormat(g.VERTEX_SHADER,g.LOW_FLOAT);var Ec=g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,g.HIGH_FLOAT),Qc=g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,g.MEDIUM_FLOAT);g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,g.LOW_FLOAT);
g.getShaderPrecisionFormat(g.VERTEX_SHADER,g.HIGH_INT);g.getShaderPrecisionFormat(g.VERTEX_SHADER,g.MEDIUM_INT);g.getShaderPrecisionFormat(g.VERTEX_SHADER,g.LOW_INT);g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,g.HIGH_INT);g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,g.MEDIUM_INT);g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,g.LOW_INT);var Rc=0<Cc.precision&&0<Ec.precision,gc=0<Dc.precision&&0<Qc.precision;"highp"===Q&&!Rc&&(gc?(Q="mediump",console.warn("WebGLRenderer: highp not supported, using mediump")):
(Q="lowp",console.warn("WebGLRenderer: highp and mediump not supported, using lowp")));"mediump"===Q&&!gc&&(Q="lowp",console.warn("WebGLRenderer: mediump not supported, using lowp"));this.getContext=function(){return g};this.supportsVertexTextures=function(){return vb};this.supportsFloatTextures=function(){return qb};this.supportsStandardDerivatives=function(){return Rb};this.supportsCompressedTextureS3TC=function(){return Wa};this.supportsCompressedTextureATC=function(){return bb};this.supportsCompressedTexturePVRTC=
function(){return Ja};this.getMaxAnisotropy=function(){return dc};this.getMaxTextureSize=function(){return Bc};this.getMaxCubemapSize=function(){return Lb};this.getMaxTextures=function(){return ub};this.getMaxVertexTextures=function(){return fc};this.setPrecision=function(a){Q=void 0!==a?a:"highp"};this.getPrecision=function(){return Q};this.setSize=function(a,b,c){A.width=a*this.devicePixelRatio;A.height=b*this.devicePixelRatio;1!==this.devicePixelRatio&&!1!==c&&(A.style.width=a+"px",A.style.height=
b+"px");this.setViewport(0,0,A.width,A.height)};this.setViewport=function(a,b,c,d){Nb=void 0!==a?a:0;Cb=void 0!==b?b:0;Ob=void 0!==c?c:A.width;Pb=void 0!==d?d:A.height;g.viewport(Nb,Cb,Ob,Pb)};this.setScissor=function(a,b,c,d){g.scissor(a,b,c,d)};this.enableScissorTest=function(a){a?g.enable(g.SCISSOR_TEST):g.disable(g.SCISSOR_TEST)};this.setClearColor=function(a,b){U.set(a);ea=void 0!==b?b:1;g.clearColor(U.r,U.g,U.b,ea)};this.setClearColorHex=function(a,b){console.warn("DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.");
this.setClearColor(a,b)};this.getClearColor=function(){return U};this.getClearAlpha=function(){return ea};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=g.COLOR_BUFFER_BIT;if(void 0===b||b)d|=g.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=g.STENCIL_BUFFER_BIT;g.clear(d)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.addPostPlugin=function(a){a.init(this);this.renderPluginsPost.push(a)};this.addPrePlugin=function(a){a.init(this);this.renderPluginsPre.push(a)};this.updateShadowMap=
function(a,b){oa=null;$a=Ra=ka=Ta=pa=-1;Ua=!0;V=sa=-1;this.shadowMapPlugin.update(a,b)};var Ib=function(a){a=a.target;a.removeEventListener("dispose",Ib);a.__webglInit=void 0;if(a instanceof THREE.BufferGeometry){var b=a.attributes,c;for(c in b)void 0!==b[c].buffer&&g.deleteBuffer(b[c].buffer);J.info.memory.geometries--}else if(void 0!==a.geometryGroups)for(b in a.geometryGroups){c=a.geometryGroups[b];if(void 0!==c.numMorphTargets)for(var d=0,e=c.numMorphTargets;d<e;d++)g.deleteBuffer(c.__webglMorphTargetsBuffers[d]);
if(void 0!==c.numMorphNormals){d=0;for(e=c.numMorphNormals;d<e;d++)g.deleteBuffer(c.__webglMorphNormalsBuffers[d])}Sb(c)}else Sb(a)},Bb=function(a){a=a.target;a.removeEventListener("dispose",Bb);a.image&&a.image.__webglTextureCube?g.deleteTexture(a.image.__webglTextureCube):a.__webglInit&&(a.__webglInit=!1,g.deleteTexture(a.__webglTexture));J.info.memory.textures--},Tb=function(a){a=a.target;a.removeEventListener("dispose",Tb);if(a&&a.__webglTexture)if(g.deleteTexture(a.__webglTexture),a instanceof
THREE.WebGLRenderTargetCube)for(var b=0;6>b;b++)g.deleteFramebuffer(a.__webglFramebuffer[b]),g.deleteRenderbuffer(a.__webglRenderbuffer[b]);else g.deleteFramebuffer(a.__webglFramebuffer),g.deleteRenderbuffer(a.__webglRenderbuffer);J.info.memory.textures--},Ub=function(a){a=a.target;a.removeEventListener("dispose",Ub);Jb(a)},Sb=function(a){void 0!==a.__webglVertexBuffer&&g.deleteBuffer(a.__webglVertexBuffer);void 0!==a.__webglNormalBuffer&&g.deleteBuffer(a.__webglNormalBuffer);void 0!==a.__webglTangentBuffer&&
g.deleteBuffer(a.__webglTangentBuffer);void 0!==a.__webglColorBuffer&&g.deleteBuffer(a.__webglColorBuffer);void 0!==a.__webglUVBuffer&&g.deleteBuffer(a.__webglUVBuffer);void 0!==a.__webglUV2Buffer&&g.deleteBuffer(a.__webglUV2Buffer);void 0!==a.__webglSkinIndicesBuffer&&g.deleteBuffer(a.__webglSkinIndicesBuffer);void 0!==a.__webglSkinWeightsBuffer&&g.deleteBuffer(a.__webglSkinWeightsBuffer);void 0!==a.__webglFaceBuffer&&g.deleteBuffer(a.__webglFaceBuffer);void 0!==a.__webglLineBuffer&&g.deleteBuffer(a.__webglLineBuffer);
void 0!==a.__webglLineDistanceBuffer&&g.deleteBuffer(a.__webglLineDistanceBuffer);if(void 0!==a.__webglCustomAttributesList)for(var b in a.__webglCustomAttributesList)g.deleteBuffer(a.__webglCustomAttributesList[b].buffer);J.info.memory.geometries--},Jb=function(a){var b=a.program;if(void 0!==b){a.program=void 0;var c,d,e=!1,a=0;for(c=ya.length;a<c;a++)if(d=ya[a],d.program===b){d.usedTimes--;0===d.usedTimes&&(e=!0);break}if(!0===e){e=[];a=0;for(c=ya.length;a<c;a++)d=ya[a],d.program!==b&&e.push(d);
ya=e;g.deleteProgram(b);J.info.memory.programs--}}};this.renderBufferImmediate=function(a,b,c){a.hasPositions&&!a.__webglVertexBuffer&&(a.__webglVertexBuffer=g.createBuffer());a.hasNormals&&!a.__webglNormalBuffer&&(a.__webglNormalBuffer=g.createBuffer());a.hasUvs&&!a.__webglUvBuffer&&(a.__webglUvBuffer=g.createBuffer());a.hasColors&&!a.__webglColorBuffer&&(a.__webglColorBuffer=g.createBuffer());a.hasPositions&&(g.bindBuffer(g.ARRAY_BUFFER,a.__webglVertexBuffer),g.bufferData(g.ARRAY_BUFFER,a.positionArray,
g.DYNAMIC_DRAW),g.enableVertexAttribArray(b.attributes.position),g.vertexAttribPointer(b.attributes.position,3,g.FLOAT,!1,0,0));if(a.hasNormals){g.bindBuffer(g.ARRAY_BUFFER,a.__webglNormalBuffer);if(c.shading===THREE.FlatShading){var d,e,f,h,i,j,k,m,l,p,n,q=3*a.count;for(n=0;n<q;n+=9)p=a.normalArray,d=p[n],e=p[n+1],f=p[n+2],h=p[n+3],j=p[n+4],m=p[n+5],i=p[n+6],k=p[n+7],l=p[n+8],d=(d+h+i)/3,e=(e+j+k)/3,f=(f+m+l)/3,p[n]=d,p[n+1]=e,p[n+2]=f,p[n+3]=d,p[n+4]=e,p[n+5]=f,p[n+6]=d,p[n+7]=e,p[n+8]=f}g.bufferData(g.ARRAY_BUFFER,
a.normalArray,g.DYNAMIC_DRAW);g.enableVertexAttribArray(b.attributes.normal);g.vertexAttribPointer(b.attributes.normal,3,g.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(g.bindBuffer(g.ARRAY_BUFFER,a.__webglUvBuffer),g.bufferData(g.ARRAY_BUFFER,a.uvArray,g.DYNAMIC_DRAW),g.enableVertexAttribArray(b.attributes.uv),g.vertexAttribPointer(b.attributes.uv,2,g.FLOAT,!1,0,0));a.hasColors&&c.vertexColors!==THREE.NoColors&&(g.bindBuffer(g.ARRAY_BUFFER,a.__webglColorBuffer),g.bufferData(g.ARRAY_BUFFER,a.colorArray,g.DYNAMIC_DRAW),
g.enableVertexAttribArray(b.attributes.color),g.vertexAttribPointer(b.attributes.color,3,g.FLOAT,!1,0,0));g.drawArrays(g.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,f,j){if(!1!==d.visible){var k,m,l,p;k=y(a,b,c,d,f);b=k.attributes;a=e.attributes;c=!1;k=16777215*e.id+2*k.id+(d.wireframe?1:0);k!==Ra&&(Ra=k,c=!0);c&&i();if(f instanceof THREE.Mesh){var f=a.index,n=a.index_wireframe;if(f){e=e.offsets;1<e.length&&(c=!0);for(var q=0,s=j.length;q<s;q++){var r=e[j[q]],t=r.index;
if(c){for(m in a)"index"===m||"index_wireframe"===m||(l=b[m],k=a[m],0<=l&&(k?(p=k.itemSize,g.bindBuffer(g.ARRAY_BUFFER,k.buffer),h(l),g.vertexAttribPointer(l,p,g.FLOAT,!1,0,4*t*p)):d.defaultAttributeValues&&(2===d.defaultAttributeValues[m].length?g.vertexAttrib2fv(l,d.defaultAttributeValues[m]):3===d.defaultAttributeValues[m].length&&g.vertexAttrib3fv(l,d.defaultAttributeValues[m]))));d.wireframe&&n?g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,n.buffer):g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,f.buffer)}d.wireframe&&
n?g.drawElements(g.LINES,2*r.count,g.UNSIGNED_SHORT,4*r.start):g.drawElements(g.TRIANGLES,r.count,g.UNSIGNED_SHORT,2*r.start);J.info.render.calls++;J.info.render.vertices+=r.count;J.info.render.faces+=r.count/3}}else{if(c)for(m in b)"index"===m||"index_wireframe"===m||(l=b[m],k=a[m],0<=l&&(k?(p=k.itemSize,g.bindBuffer(g.ARRAY_BUFFER,k.buffer),h(l),g.vertexAttribPointer(l,p,g.FLOAT,!1,0,0)):d.defaultAttributeValues&&d.defaultAttributeValues[m]&&(2===d.defaultAttributeValues[m].length?g.vertexAttrib2fv(l,
d.defaultAttributeValues[m]):3===d.defaultAttributeValues[m].length&&g.vertexAttrib3fv(l,d.defaultAttributeValues[m]))));d=e.attributes.position;g.drawArrays(g.TRIANGLES,0,d.numItems/3);J.info.render.calls++;J.info.render.vertices+=d.numItems/3;J.info.render.faces+=d.numItems/3/3}}else if(f instanceof THREE.ParticleSystem){if(c){for(m in b)l=b[m],k=a[m],0<=l&&(k?(p=k.itemSize,g.bindBuffer(g.ARRAY_BUFFER,k.buffer),h(l),g.vertexAttribPointer(l,p,g.FLOAT,!1,0,0)):d.defaultAttributeValues&&d.defaultAttributeValues[m]&&
(2===d.defaultAttributeValues[m].length?g.vertexAttrib2fv(l,d.defaultAttributeValues[m]):3===d.defaultAttributeValues[m].length&&g.vertexAttrib3fv(l,d.defaultAttributeValues[m])));d=a.position;g.drawArrays(g.POINTS,0,d.numItems/3);J.info.render.calls++;J.info.render.points+=d.numItems/3}}else if(f instanceof THREE.Line&&c){for(m in b)l=b[m],k=a[m],0<=l&&(k?(p=k.itemSize,g.bindBuffer(g.ARRAY_BUFFER,k.buffer),h(l),g.vertexAttribPointer(l,p,g.FLOAT,!1,0,0)):d.defaultAttributeValues&&d.defaultAttributeValues[m]&&
(2===d.defaultAttributeValues[m].length?g.vertexAttrib2fv(l,d.defaultAttributeValues[m]):3===d.defaultAttributeValues[m].length&&g.vertexAttrib3fv(l,d.defaultAttributeValues[m])));j=f.type===THREE.LineStrip?g.LINE_STRIP:g.LINES;B(d.linewidth);d=a.position;g.drawArrays(j,0,d.numItems/3);J.info.render.calls++;J.info.render.points+=d.numItems}}};this.renderBuffer=function(a,b,c,d,e,f){if(!1!==d.visible){var j,k,c=y(a,b,c,d,f),a=c.attributes,b=!1,c=16777215*e.id+2*c.id+(d.wireframe?1:0);c!==Ra&&(Ra=c,
b=!0);b&&i();if(!d.morphTargets&&0<=a.position)b&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglVertexBuffer),h(a.position),g.vertexAttribPointer(a.position,3,g.FLOAT,!1,0,0));else if(f.morphTargetBase){c=d.program.attributes;-1!==f.morphTargetBase&&0<=c.position?(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[f.morphTargetBase]),h(c.position),g.vertexAttribPointer(c.position,3,g.FLOAT,!1,0,0)):0<=c.position&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglVertexBuffer),h(c.position),g.vertexAttribPointer(c.position,
3,g.FLOAT,!1,0,0));if(f.morphTargetForcedOrder.length){var l=0;k=f.morphTargetForcedOrder;for(j=f.morphTargetInfluences;l<d.numSupportedMorphTargets&&l<k.length;)0<=c["morphTarget"+l]&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[k[l]]),h(c["morphTarget"+l]),g.vertexAttribPointer(c["morphTarget"+l],3,g.FLOAT,!1,0,0)),0<=c["morphNormal"+l]&&d.morphNormals&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[k[l]]),h(c["morphNormal"+l]),g.vertexAttribPointer(c["morphNormal"+l],3,
g.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[l]=j[k[l]],l++}else{k=[];j=f.morphTargetInfluences;var p,n=j.length;for(p=0;p<n;p++)l=j[p],0<l&&k.push([l,p]);k.length>d.numSupportedMorphTargets?(k.sort(m),k.length=d.numSupportedMorphTargets):k.length>d.numSupportedMorphNormals?k.sort(m):0===k.length&&k.push([0,0]);for(l=0;l<d.numSupportedMorphTargets;)k[l]?(p=k[l][1],0<=c["morphTarget"+l]&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[p]),h(c["morphTarget"+l]),g.vertexAttribPointer(c["morphTarget"+
l],3,g.FLOAT,!1,0,0)),0<=c["morphNormal"+l]&&d.morphNormals&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[p]),h(c["morphNormal"+l]),g.vertexAttribPointer(c["morphNormal"+l],3,g.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[l]=j[p]):f.__webglMorphTargetInfluences[l]=0,l++}null!==d.program.uniforms.morphTargetInfluences&&g.uniform1fv(d.program.uniforms.morphTargetInfluences,f.__webglMorphTargetInfluences)}if(b){if(e.__webglCustomAttributesList){j=0;for(k=e.__webglCustomAttributesList.length;j<
k;j++)c=e.__webglCustomAttributesList[j],0<=a[c.buffer.belongsToAttribute]&&(g.bindBuffer(g.ARRAY_BUFFER,c.buffer),h(a[c.buffer.belongsToAttribute]),g.vertexAttribPointer(a[c.buffer.belongsToAttribute],c.size,g.FLOAT,!1,0,0))}0<=a.color&&(f.geometry.faces.length&&0<f.geometry.faces[0].vertexColors.length||f.geometry.__webglColorBuffer?(g.bindBuffer(g.ARRAY_BUFFER,e.__webglColorBuffer),h(a.color),g.vertexAttribPointer(a.color,3,g.FLOAT,!1,0,0)):d.defaultAttributeValues&&g.vertexAttrib3fv(a.color,d.defaultAttributeValues.color));
0<=a.normal&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglNormalBuffer),h(a.normal),g.vertexAttribPointer(a.normal,3,g.FLOAT,!1,0,0));0<=a.tangent&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglTangentBuffer),h(a.tangent),g.vertexAttribPointer(a.tangent,4,g.FLOAT,!1,0,0));0<=a.uv&&(f.geometry.faceVertexUvs[0]?(g.bindBuffer(g.ARRAY_BUFFER,e.__webglUVBuffer),h(a.uv),g.vertexAttribPointer(a.uv,2,g.FLOAT,!1,0,0)):d.defaultAttributeValues&&g.vertexAttrib2fv(a.uv,d.defaultAttributeValues.uv));0<=a.uv2&&(f.geometry.faceVertexUvs[1]?
(g.bindBuffer(g.ARRAY_BUFFER,e.__webglUV2Buffer),h(a.uv2),g.vertexAttribPointer(a.uv2,2,g.FLOAT,!1,0,0)):d.defaultAttributeValues&&g.vertexAttrib2fv(a.uv2,d.defaultAttributeValues.uv2));d.skinning&&(0<=a.skinIndex&&0<=a.skinWeight)&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglSkinIndicesBuffer),h(a.skinIndex),g.vertexAttribPointer(a.skinIndex,4,g.FLOAT,!1,0,0),g.bindBuffer(g.ARRAY_BUFFER,e.__webglSkinWeightsBuffer),h(a.skinWeight),g.vertexAttribPointer(a.skinWeight,4,g.FLOAT,!1,0,0));0<=a.lineDistance&&
(g.bindBuffer(g.ARRAY_BUFFER,e.__webglLineDistanceBuffer),h(a.lineDistance),g.vertexAttribPointer(a.lineDistance,1,g.FLOAT,!1,0,0))}f instanceof THREE.Mesh?(d.wireframe?(B(d.wireframeLinewidth),b&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,e.__webglLineBuffer),g.drawElements(g.LINES,e.__webglLineCount,g.UNSIGNED_SHORT,0)):(b&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,e.__webglFaceBuffer),g.drawElements(g.TRIANGLES,e.__webglFaceCount,g.UNSIGNED_SHORT,0)),J.info.render.calls++,J.info.render.vertices+=e.__webglFaceCount,
J.info.render.faces+=e.__webglFaceCount/3):f instanceof THREE.Line?(f=f.type===THREE.LineStrip?g.LINE_STRIP:g.LINES,B(d.linewidth),g.drawArrays(f,0,e.__webglLineCount),J.info.render.calls++):f instanceof THREE.ParticleSystem?(g.drawArrays(g.POINTS,0,e.__webglParticleCount),J.info.render.calls++,J.info.render.points+=e.__webglParticleCount):f instanceof THREE.Ribbon&&(g.drawArrays(g.TRIANGLE_STRIP,0,e.__webglVertexCount),J.info.render.calls++)}};this.render=function(a,b,c,d){if(!1===b instanceof THREE.Camera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
else{var e,f,h,i,k=a.__lights,m=a.fog;$a=-1;Ua=!0;!0===a.autoUpdate&&a.updateMatrixWorld();void 0===b.parent&&b.updateMatrixWorld();b.matrixWorldInverse.getInverse(b.matrixWorld);ec.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);Qb.setFromMatrix(ec);this.autoUpdateObjects&&this.initWebGLObjects(a);n(this.renderPluginsPre,a,b);J.info.render.calls=0;J.info.render.vertices=0;J.info.render.faces=0;J.info.render.points=0;this.setRenderTarget(c);(this.autoClear||d)&&this.clear(this.autoClearColor,
this.autoClearDepth,this.autoClearStencil);i=a.__webglObjects;d=0;for(e=i.length;d<e;d++)if(f=i[d],h=f.object,f.id=d,f.render=!1,h.visible&&(!(h instanceof THREE.Mesh||h instanceof THREE.ParticleSystem)||!h.frustumCulled||Qb.intersectsObject(h))){var q=h;q._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,q.matrixWorld);q._normalMatrix.getNormalMatrix(q._modelViewMatrix);var q=f,r=q.object,s=q.buffer,t=void 0,u=t=void 0,v=void 0,u=r.material;if(u instanceof THREE.MeshFaceMaterial)t=-1,s instanceof
THREE.BufferGeometry?q.offsetIndices&&(v=s.offsets[q.offsetIndices[0]],v.hasOwnProperty("materialIndex")&&(t=v.materialIndex)):t=s.materialIndex,t=0<=t?u.materials[t]:u,t.transparent?(q.transparent=t,q.opaque=null):(q.opaque=t,q.transparent=null);else if(t=u)t.transparent?(q.transparent=t,q.opaque=null):(q.opaque=t,q.transparent=null);q.picking||(q.picking=r.pickingMaterial);q.depth||(q.depth=r.customDepthMaterial);f.render=!0;!0===this.sortObjects&&(null!==h.renderDepth?f.z=h.renderDepth:(na.getPositionFromMatrix(h.matrixWorld),
na.applyProjection(ec),f.z=na.z))}this.sortObjects&&i.sort(j);i=a.__webglObjectsImmediate;d=0;for(e=i.length;d<e;d++)f=i[d],h=f.object,h.visible&&(h._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,h.matrixWorld),h._normalMatrix.getNormalMatrix(h._modelViewMatrix),h=f.object,q=h.material,q.transparent?(f.transparent=q,f.opaque=null):(f.opaque=q,f.transparent=null),f.picking||(f.picking=h.pickingMaterial),f.depth||(f.depth=h.customDepthMaterial));a.overrideMaterial?(d=a.overrideMaterial,this.setBlending(d["static"].blending,
d["static"].blendEquation,d["static"].blendSrc,d["static"].blendDst),this.setDepthTest(d["static"].depthTest),this.setDepthWrite(d["static"].depthWrite),w(d["static"].polygonOffset,d["static"].polygonOffsetFactor,d["static"].polygonOffsetUnits),p(a.__webglObjects,!1,"",b,k,m,!0,d),l(a.__webglObjectsImmediate,"",b,k,m,!1,d)):a.enablePicking?(this.setBlending(THREE.NormalBlending),p(a.__webglObjects,!1,"picking",b,[],void 0,!0),l(a.__webglObjectsImmediate,"picking",b,[],void 0,!1)):a.enableDepth?(this.setBlending(THREE.NormalBlending),
p(a.__webglObjects,!1,"depth",b,[],void 0,!0),l(a.__webglObjectsImmediate,"depth",b,[],void 0,!1)):(d=null,this.setBlending(THREE.NoBlending),p(a.__webglObjects,!0,"opaque",b,k,m,!1,d,a.overrideUniforms),l(a.__webglObjectsImmediate,"opaque",b,k,m,!1,d),p(a.__webglObjects,!1,"transparent",b,k,m,!0,d,a.overrideUniforms),l(a.__webglObjectsImmediate,"transparent",b,k,m,!0,d));n(this.renderPluginsPost,a,b);c&&(c.generateMipmaps&&c.minFilter!==THREE.NearestFilter&&c.minFilter!==THREE.LinearFilter)&&(c instanceof
THREE.WebGLRenderTargetCube?(g.bindTexture(g.TEXTURE_CUBE_MAP,c.__webglTexture),g.generateMipmap(g.TEXTURE_CUBE_MAP),g.bindTexture(g.TEXTURE_CUBE_MAP,null)):(g.bindTexture(g.TEXTURE_2D,c.__webglTexture),g.generateMipmap(g.TEXTURE_2D),g.bindTexture(g.TEXTURE_2D,null)));this.setDepthTest(!0);this.setDepthWrite(!0)}};this.renderImmediateObject=function(a,b,c,d,e){var f=y(a,b,c,d,e);Ra=-1;J.setMaterialFaces(d);e.immediateRenderCallback?e.immediateRenderCallback(f,g,Qb):e.render(function(a){J.renderBufferImmediate(a,
f,d)})};this.initWebGLObjects=function(a){a.__webglObjects||(a.__webglObjects=[],a.__webglObjectsImmediate=[],a.__webglSprites=[],a.__webglFlares=[]);for(;a.__objectsAdded.length;)t(a.__objectsAdded[0],a),a.__objectsAdded.splice(0,1);for(;a.__objectsRemoved.length;)s(a.__objectsRemoved[0],a),a.__objectsRemoved.splice(0,1);for(var b=0,h=a.__webglObjects.length;b<h;b++){var i=a.__webglObjects[b].object;void 0===i.__webglInit&&(void 0!==i.__webglActive&&s(i,a),t(i,a));var j=i,l=j.geometry,p=void 0,n=
void 0,r=void 0;if(l instanceof THREE.BufferGeometry){var u=g.DYNAMIC_DRAW,v=!l.dynamic,w=l.attributes,z=void 0,y=void 0;for(z in w)y=w[z],y.needsUpdate&&("index"===z||"index_wireframe"===z?(g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,y.buffer),g.bufferData(g.ELEMENT_ARRAY_BUFFER,y.array,u)):(g.bindBuffer(g.ARRAY_BUFFER,y.buffer),g.bufferData(g.ARRAY_BUFFER,y.array,u)),y.needsUpdate=!1),v&&!y.dynamic&&(y.array=null)}else if(j instanceof THREE.Mesh){for(var A=0,B=l.geometryGroupsList.length;A<B;A++)if(p=l.geometryGroupsList[A],
r=d(j,p),l.buffersNeedUpdate&&c(p,j),n=r.attributes&&k(r),l.verticesNeedUpdate||l.morphTargetsNeedUpdate||l.elementsNeedUpdate||l.uvsNeedUpdate||l.normalsNeedUpdate||l.colorsNeedUpdate||l.tangentsNeedUpdate||n){var x=p,D=j,E=g.DYNAMIC_DRAW,I=!l.dynamic,H=r;if(x.__inittedArrays){var J=e(H),L=H.vertexColors?H.vertexColors:!1,M=f(H),N=J===THREE.SmoothShading,K=void 0,G=void 0,Q=void 0,X=void 0,U=void 0,V=void 0,Z=void 0,ba=void 0,ea=void 0,ha=void 0,ka=void 0,S=void 0,T=void 0,R=void 0,qa=void 0,la=
void 0,ja=void 0,ma=void 0,oa=void 0,pa=void 0,ra=void 0,sa=void 0,wa=void 0,xa=void 0,ya=void 0,Aa=void 0,Ba=void 0,Ca=void 0,Da=void 0,za=void 0,Wa=void 0,Ja=void 0,Ra=void 0,Ta=void 0,Ka=void 0,bb=void 0,eb=void 0,fb=void 0,Sa=void 0,$a=void 0,cb=0,db=0,Ua=0,Va=0,ab=0,gb=0,La=0,rb=0,Xa=0,ia=0,ta=0,F=0,Ia=void 0,hb=x.__vertexArray,qb=x.__uvArray,tb=x.__uv2Array,wb=x.__normalArray,Ma=x.__tangentArray,ib=x.__colorArray,Na=x.__skinIndexArray,Oa=x.__skinWeightArray,Ab=x.__morphTargetsArrays,Bb=x.__morphNormalsArrays,
ub=x.__webglCustomAttributesList,C=void 0,hc=x.__faceArray,xb=x.__lineArray,Ea=D.geometry,Nb=Ea.elementsNeedUpdate,Cb=Ea.uvsNeedUpdate,Ob=Ea.normalsNeedUpdate,Pb=Ea.tangentsNeedUpdate,Qb=Ea.colorsNeedUpdate,Rb=Ea.morphTargetsNeedUpdate,vb=Ea.vertices,Y=x.faces3,jb=Ea.faces,Gb=Ea.faceVertexUvs[0],Hb=Ea.faceVertexUvs[1],Fc=Ea.skinIndices,ic=Ea.skinWeights,jc=Ea.morphTargets,Ib=Ea.morphNormals;if(Ea.verticesNeedUpdate){K=0;for(G=Y.length;K<G;K++)X=jb[Y[K]],S=vb[X.a],T=vb[X.b],R=vb[X.c],hb[db]=S.x,hb[db+
1]=S.y,hb[db+2]=S.z,hb[db+3]=T.x,hb[db+4]=T.y,hb[db+5]=T.z,hb[db+6]=R.x,hb[db+7]=R.y,hb[db+8]=R.z,db+=9;g.bindBuffer(g.ARRAY_BUFFER,x.__webglVertexBuffer);g.bufferData(g.ARRAY_BUFFER,hb,E)}if(Rb){Ka=0;for(bb=jc.length;Ka<bb;Ka++){K=ta=0;for(G=Y.length;K<G;K++)Sa=Y[K],X=jb[Sa],S=jc[Ka].vertices[X.a],T=jc[Ka].vertices[X.b],R=jc[Ka].vertices[X.c],eb=Ab[Ka],eb[ta]=S.x,eb[ta+1]=S.y,eb[ta+2]=S.z,eb[ta+3]=T.x,eb[ta+4]=T.y,eb[ta+5]=T.z,eb[ta+6]=R.x,eb[ta+7]=R.y,eb[ta+8]=R.z,H.morphNormals&&(N?($a=Ib[Ka].vertexNormals[Sa],
ma=$a.a,oa=$a.b,pa=$a.c):pa=oa=ma=Ib[Ka].faceNormals[Sa],fb=Bb[Ka],fb[ta]=ma.x,fb[ta+1]=ma.y,fb[ta+2]=ma.z,fb[ta+3]=oa.x,fb[ta+4]=oa.y,fb[ta+5]=oa.z,fb[ta+6]=pa.x,fb[ta+7]=pa.y,fb[ta+8]=pa.z),ta+=9;g.bindBuffer(g.ARRAY_BUFFER,x.__webglMorphTargetsBuffers[Ka]);g.bufferData(g.ARRAY_BUFFER,Ab[Ka],E);H.morphNormals&&(g.bindBuffer(g.ARRAY_BUFFER,x.__webglMorphNormalsBuffers[Ka]),g.bufferData(g.ARRAY_BUFFER,Bb[Ka],E))}}if(ic.length){K=0;for(G=Y.length;K<G;K++)X=jb[Y[K]],xa=ic[X.a],ya=ic[X.b],Aa=ic[X.c],
Oa[ia]=xa.x,Oa[ia+1]=xa.y,Oa[ia+2]=xa.z,Oa[ia+3]=xa.w,Oa[ia+4]=ya.x,Oa[ia+5]=ya.y,Oa[ia+6]=ya.z,Oa[ia+7]=ya.w,Oa[ia+8]=Aa.x,Oa[ia+9]=Aa.y,Oa[ia+10]=Aa.z,Oa[ia+11]=Aa.w,Ba=Fc[X.a],Ca=Fc[X.b],Da=Fc[X.c],Na[ia]=Ba.x,Na[ia+1]=Ba.y,Na[ia+2]=Ba.z,Na[ia+3]=Ba.w,Na[ia+4]=Ca.x,Na[ia+5]=Ca.y,Na[ia+6]=Ca.z,Na[ia+7]=Ca.w,Na[ia+8]=Da.x,Na[ia+9]=Da.y,Na[ia+10]=Da.z,Na[ia+11]=Da.w,ia+=12;0<ia&&(g.bindBuffer(g.ARRAY_BUFFER,x.__webglSkinIndicesBuffer),g.bufferData(g.ARRAY_BUFFER,Na,E),g.bindBuffer(g.ARRAY_BUFFER,
x.__webglSkinWeightsBuffer),g.bufferData(g.ARRAY_BUFFER,Oa,E))}if(Qb&&L){K=0;for(G=Y.length;K<G;K++)X=jb[Y[K]],Z=X.vertexColors,ba=X.color,3===Z.length&&L===THREE.VertexColors?(ra=Z[0],sa=Z[1],wa=Z[2]):wa=sa=ra=ba,ib[Xa]=ra.r,ib[Xa+1]=ra.g,ib[Xa+2]=ra.b,ib[Xa+3]=sa.r,ib[Xa+4]=sa.g,ib[Xa+5]=sa.b,ib[Xa+6]=wa.r,ib[Xa+7]=wa.g,ib[Xa+8]=wa.b,Xa+=9;0<Xa&&(g.bindBuffer(g.ARRAY_BUFFER,x.__webglColorBuffer),g.bufferData(g.ARRAY_BUFFER,ib,E))}if(Pb&&Ea.hasTangents){K=0;for(G=Y.length;K<G;K++)X=jb[Y[K]],ea=X.vertexTangents,
qa=ea[0],la=ea[1],ja=ea[2],Ma[La]=qa.x,Ma[La+1]=qa.y,Ma[La+2]=qa.z,Ma[La+3]=qa.w,Ma[La+4]=la.x,Ma[La+5]=la.y,Ma[La+6]=la.z,Ma[La+7]=la.w,Ma[La+8]=ja.x,Ma[La+9]=ja.y,Ma[La+10]=ja.z,Ma[La+11]=ja.w,La+=12;g.bindBuffer(g.ARRAY_BUFFER,x.__webglTangentBuffer);g.bufferData(g.ARRAY_BUFFER,Ma,E)}if(Ob&&J){K=0;for(G=Y.length;K<G;K++)if(X=jb[Y[K]],U=X.vertexNormals,V=X.normal,3===U.length&&N)for(za=0;3>za;za++)Ja=U[za],wb[gb]=Ja.x,wb[gb+1]=Ja.y,wb[gb+2]=Ja.z,gb+=3;else for(za=0;3>za;za++)wb[gb]=V.x,wb[gb+1]=
V.y,wb[gb+2]=V.z,gb+=3;g.bindBuffer(g.ARRAY_BUFFER,x.__webglNormalBuffer);g.bufferData(g.ARRAY_BUFFER,wb,E)}if(Cb&&Gb&&M){K=0;for(G=Y.length;K<G;K++)if(Q=Y[K],ha=Gb[Q],void 0!==ha)for(za=0;3>za;za++)Ra=ha[za],qb[Ua]=Ra.x,qb[Ua+1]=Ra.y,Ua+=2;0<Ua&&(g.bindBuffer(g.ARRAY_BUFFER,x.__webglUVBuffer),g.bufferData(g.ARRAY_BUFFER,qb,E))}if(Cb&&Hb&&M){K=0;for(G=Y.length;K<G;K++)if(Q=Y[K],ka=Hb[Q],void 0!==ka)for(za=0;3>za;za++)Ta=ka[za],tb[Va]=Ta.x,tb[Va+1]=Ta.y,Va+=2;0<Va&&(g.bindBuffer(g.ARRAY_BUFFER,x.__webglUV2Buffer),
g.bufferData(g.ARRAY_BUFFER,tb,E))}if(Nb){K=0;for(G=Y.length;K<G;K++)hc[ab]=cb,hc[ab+1]=cb+1,hc[ab+2]=cb+2,ab+=3,xb[rb]=cb,xb[rb+1]=cb+1,xb[rb+2]=cb,xb[rb+3]=cb+2,xb[rb+4]=cb+1,xb[rb+5]=cb+2,rb+=6,cb+=3;g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,x.__webglFaceBuffer);g.bufferData(g.ELEMENT_ARRAY_BUFFER,hc,E);g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,x.__webglLineBuffer);g.bufferData(g.ELEMENT_ARRAY_BUFFER,xb,E)}if(ub){za=0;for(Wa=ub.length;za<Wa;za++)if(C=ub[za],C.__original.needsUpdate){F=0;if(1===C.size)if(void 0===
C.boundTo||"vertices"===C.boundTo){K=0;for(G=Y.length;K<G;K++)X=jb[Y[K]],C.array[F]=C.value[X.a],C.array[F+1]=C.value[X.b],C.array[F+2]=C.value[X.c],F+=3}else{if("faces"===C.boundTo){K=0;for(G=Y.length;K<G;K++)Ia=C.value[Y[K]],C.array[F]=Ia,C.array[F+1]=Ia,C.array[F+2]=Ia,F+=3}}else if(2===C.size)if(void 0===C.boundTo||"vertices"===C.boundTo){K=0;for(G=Y.length;K<G;K++)X=jb[Y[K]],S=C.value[X.a],T=C.value[X.b],R=C.value[X.c],C.array[F]=S.x,C.array[F+1]=S.y,C.array[F+2]=T.x,C.array[F+3]=T.y,C.array[F+
4]=R.x,C.array[F+5]=R.y,F+=6}else{if("faces"===C.boundTo){K=0;for(G=Y.length;K<G;K++)R=T=S=Ia=C.value[Y[K]],C.array[F]=S.x,C.array[F+1]=S.y,C.array[F+2]=T.x,C.array[F+3]=T.y,C.array[F+4]=R.x,C.array[F+5]=R.y,F+=6}}else if(3===C.size){var ga;ga="c"===C.type?["r","g","b"]:["x","y","z"];if(void 0===C.boundTo||"vertices"===C.boundTo){K=0;for(G=Y.length;K<G;K++)X=jb[Y[K]],S=C.value[X.a],T=C.value[X.b],R=C.value[X.c],C.array[F]=S[ga[0]],C.array[F+1]=S[ga[1]],C.array[F+2]=S[ga[2]],C.array[F+3]=T[ga[0]],
C.array[F+4]=T[ga[1]],C.array[F+5]=T[ga[2]],C.array[F+6]=R[ga[0]],C.array[F+7]=R[ga[1]],C.array[F+8]=R[ga[2]],F+=9}else if("faces"===C.boundTo){K=0;for(G=Y.length;K<G;K++)R=T=S=Ia=C.value[Y[K]],C.array[F]=S[ga[0]],C.array[F+1]=S[ga[1]],C.array[F+2]=S[ga[2]],C.array[F+3]=T[ga[0]],C.array[F+4]=T[ga[1]],C.array[F+5]=T[ga[2]],C.array[F+6]=R[ga[0]],C.array[F+7]=R[ga[1]],C.array[F+8]=R[ga[2]],F+=9}else if("faceVertices"===C.boundTo){K=0;for(G=Y.length;K<G;K++)Ia=C.value[Y[K]],S=Ia[0],T=Ia[1],R=Ia[2],C.array[F]=
S[ga[0]],C.array[F+1]=S[ga[1]],C.array[F+2]=S[ga[2]],C.array[F+3]=T[ga[0]],C.array[F+4]=T[ga[1]],C.array[F+5]=T[ga[2]],C.array[F+6]=R[ga[0]],C.array[F+7]=R[ga[1]],C.array[F+8]=R[ga[2]],F+=9}}else if(4===C.size)if(void 0===C.boundTo||"vertices"===C.boundTo){K=0;for(G=Y.length;K<G;K++)X=jb[Y[K]],S=C.value[X.a],T=C.value[X.b],R=C.value[X.c],C.array[F]=S.x,C.array[F+1]=S.y,C.array[F+2]=S.z,C.array[F+3]=S.w,C.array[F+4]=T.x,C.array[F+5]=T.y,C.array[F+6]=T.z,C.array[F+7]=T.w,C.array[F+8]=R.x,C.array[F+
9]=R.y,C.array[F+10]=R.z,C.array[F+11]=R.w,F+=12}else if("faces"===C.boundTo){K=0;for(G=Y.length;K<G;K++)R=T=S=Ia=C.value[Y[K]],C.array[F]=S.x,C.array[F+1]=S.y,C.array[F+2]=S.z,C.array[F+3]=S.w,C.array[F+4]=T.x,C.array[F+5]=T.y,C.array[F+6]=T.z,C.array[F+7]=T.w,C.array[F+8]=R.x,C.array[F+9]=R.y,C.array[F+10]=R.z,C.array[F+11]=R.w,F+=12}else if("faceVertices"===C.boundTo){K=0;for(G=Y.length;K<G;K++)Ia=C.value[Y[K]],S=Ia[0],T=Ia[1],R=Ia[2],C.array[F]=S.x,C.array[F+1]=S.y,C.array[F+2]=S.z,C.array[F+
3]=S.w,C.array[F+4]=T.x,C.array[F+5]=T.y,C.array[F+6]=T.z,C.array[F+7]=T.w,C.array[F+8]=R.x,C.array[F+9]=R.y,C.array[F+10]=R.z,C.array[F+11]=R.w,F+=12}g.bindBuffer(g.ARRAY_BUFFER,C.buffer);g.bufferData(g.ARRAY_BUFFER,C.array,E)}}I&&(delete x.__inittedArrays,delete x.__colorArray,delete x.__normalArray,delete x.__tangentArray,delete x.__uvArray,delete x.__uv2Array,delete x.__faceArray,delete x.__vertexArray,delete x.__lineArray,delete x.__skinIndexArray,delete x.__skinWeightArray)}}l.verticesNeedUpdate=
!1;l.morphTargetsNeedUpdate=!1;l.elementsNeedUpdate=!1;l.uvsNeedUpdate=!1;l.normalsNeedUpdate=!1;l.colorsNeedUpdate=!1;l.tangentsNeedUpdate=!1;l.buffersNeedUpdate=!1;r.attributes&&q(r)}else if(j instanceof THREE.Ribbon){r=d(j,l);n=r.attributes&&k(r);if(l.verticesNeedUpdate||l.colorsNeedUpdate||l.normalsNeedUpdate||n){var Pa=l,kc=g.DYNAMIC_DRAW,Vb=void 0,Wb=void 0,Xb=void 0,lc=void 0,$=void 0,mc=void 0,nc=void 0,oc=void 0,Jb=void 0,ua=void 0,Db=void 0,ca=void 0,Fa=void 0,Kb=Pa.vertices,Lb=Pa.colors,
Mb=Pa.normals,bc=Kb.length,cc=Lb.length,dc=Mb.length,pc=Pa.__vertexArray,qc=Pa.__colorArray,rc=Pa.__normalArray,fc=Pa.colorsNeedUpdate,gc=Pa.normalsNeedUpdate,Gc=Pa.__webglCustomAttributesList;if(Pa.verticesNeedUpdate){for(Vb=0;Vb<bc;Vb++)lc=Kb[Vb],$=3*Vb,pc[$]=lc.x,pc[$+1]=lc.y,pc[$+2]=lc.z;g.bindBuffer(g.ARRAY_BUFFER,Pa.__webglVertexBuffer);g.bufferData(g.ARRAY_BUFFER,pc,kc)}if(fc){for(Wb=0;Wb<cc;Wb++)mc=Lb[Wb],$=3*Wb,qc[$]=mc.r,qc[$+1]=mc.g,qc[$+2]=mc.b;g.bindBuffer(g.ARRAY_BUFFER,Pa.__webglColorBuffer);
g.bufferData(g.ARRAY_BUFFER,qc,kc)}if(gc){for(Xb=0;Xb<dc;Xb++)nc=Mb[Xb],$=3*Xb,rc[$]=nc.x,rc[$+1]=nc.y,rc[$+2]=nc.z;g.bindBuffer(g.ARRAY_BUFFER,Pa.__webglNormalBuffer);g.bufferData(g.ARRAY_BUFFER,rc,kc)}if(Gc){oc=0;for(Jb=Gc.length;oc<Jb;oc++)if(ca=Gc[oc],ca.needsUpdate&&(void 0===ca.boundTo||"vertices"===ca.boundTo)){$=0;Db=ca.value.length;if(1===ca.size)for(ua=0;ua<Db;ua++)ca.array[ua]=ca.value[ua];else if(2===ca.size)for(ua=0;ua<Db;ua++)Fa=ca.value[ua],ca.array[$]=Fa.x,ca.array[$+1]=Fa.y,$+=2;
else if(3===ca.size)if("c"===ca.type)for(ua=0;ua<Db;ua++)Fa=ca.value[ua],ca.array[$]=Fa.r,ca.array[$+1]=Fa.g,ca.array[$+2]=Fa.b,$+=3;else for(ua=0;ua<Db;ua++)Fa=ca.value[ua],ca.array[$]=Fa.x,ca.array[$+1]=Fa.y,ca.array[$+2]=Fa.z,$+=3;else if(4===ca.size)for(ua=0;ua<Db;ua++)Fa=ca.value[ua],ca.array[$]=Fa.x,ca.array[$+1]=Fa.y,ca.array[$+2]=Fa.z,ca.array[$+3]=Fa.w,$+=4;g.bindBuffer(g.ARRAY_BUFFER,ca.buffer);g.bufferData(g.ARRAY_BUFFER,ca.array,kc)}}}l.verticesNeedUpdate=!1;l.colorsNeedUpdate=!1;l.normalsNeedUpdate=
!1;r.attributes&&q(r)}else if(j instanceof THREE.Line){r=d(j,l);n=r.attributes&&k(r);if(l.verticesNeedUpdate||l.colorsNeedUpdate||l.lineDistancesNeedUpdate||n){var Qa=l,sc=g.DYNAMIC_DRAW,Yb=void 0,Zb=void 0,$b=void 0,tc=void 0,fa=void 0,uc=void 0,Sb=Qa.vertices,Tb=Qa.colors,Ub=Qa.lineDistances,Ac=Sb.length,Bc=Tb.length,Cc=Ub.length,vc=Qa.__vertexArray,wc=Qa.__colorArray,Lc=Qa.__lineDistanceArray,Dc=Qa.colorsNeedUpdate,Ec=Qa.lineDistancesNeedUpdate,Hc=Qa.__webglCustomAttributesList,xc=void 0,Mc=void 0,
va=void 0,Eb=void 0,Ga=void 0,da=void 0;if(Qa.verticesNeedUpdate){for(Yb=0;Yb<Ac;Yb++)tc=Sb[Yb],fa=3*Yb,vc[fa]=tc.x,vc[fa+1]=tc.y,vc[fa+2]=tc.z;g.bindBuffer(g.ARRAY_BUFFER,Qa.__webglVertexBuffer);g.bufferData(g.ARRAY_BUFFER,vc,sc)}if(Dc){for(Zb=0;Zb<Bc;Zb++)uc=Tb[Zb],fa=3*Zb,wc[fa]=uc.r,wc[fa+1]=uc.g,wc[fa+2]=uc.b;g.bindBuffer(g.ARRAY_BUFFER,Qa.__webglColorBuffer);g.bufferData(g.ARRAY_BUFFER,wc,sc)}if(Ec){for($b=0;$b<Cc;$b++)Lc[$b]=Ub[$b];g.bindBuffer(g.ARRAY_BUFFER,Qa.__webglLineDistanceBuffer);
g.bufferData(g.ARRAY_BUFFER,Lc,sc)}if(Hc){xc=0;for(Mc=Hc.length;xc<Mc;xc++)if(da=Hc[xc],da.needsUpdate&&(void 0===da.boundTo||"vertices"===da.boundTo)){fa=0;Eb=da.value.length;if(1===da.size)for(va=0;va<Eb;va++)da.array[va]=da.value[va];else if(2===da.size)for(va=0;va<Eb;va++)Ga=da.value[va],da.array[fa]=Ga.x,da.array[fa+1]=Ga.y,fa+=2;else if(3===da.size)if("c"===da.type)for(va=0;va<Eb;va++)Ga=da.value[va],da.array[fa]=Ga.r,da.array[fa+1]=Ga.g,da.array[fa+2]=Ga.b,fa+=3;else for(va=0;va<Eb;va++)Ga=
da.value[va],da.array[fa]=Ga.x,da.array[fa+1]=Ga.y,da.array[fa+2]=Ga.z,fa+=3;else if(4===da.size)for(va=0;va<Eb;va++)Ga=da.value[va],da.array[fa]=Ga.x,da.array[fa+1]=Ga.y,da.array[fa+2]=Ga.z,da.array[fa+3]=Ga.w,fa+=4;g.bindBuffer(g.ARRAY_BUFFER,da.buffer);g.bufferData(g.ARRAY_BUFFER,da.array,sc)}}}l.verticesNeedUpdate=!1;l.colorsNeedUpdate=!1;l.lineDistancesNeedUpdate=!1;r.attributes&&q(r)}else if(j instanceof THREE.ParticleSystem){r=d(j,l);n=r.attributes&&k(r);if(l.verticesNeedUpdate||l.colorsNeedUpdate||
j.sortParticles||n){var kb=l,Ic=g.DYNAMIC_DRAW,ac=j,Ha=void 0,lb=void 0,mb=void 0,P=void 0,nb=void 0,sb=void 0,yc=kb.vertices,Jc=yc.length,Kc=kb.colors,Nc=Kc.length,yb=kb.__vertexArray,zb=kb.__colorArray,ob=kb.__sortArray,Oc=kb.verticesNeedUpdate,Pc=kb.colorsNeedUpdate,pb=kb.__webglCustomAttributesList,Ya=void 0,Fb=void 0,W=void 0,Za=void 0,aa=void 0,O=void 0;if(ac.sortParticles){zc.copy(ec);zc.multiply(ac.matrixWorld);for(Ha=0;Ha<Jc;Ha++)mb=yc[Ha],na.copy(mb),na.applyProjection(zc),ob[Ha]=[na.z,
Ha];ob.sort(m);for(Ha=0;Ha<Jc;Ha++)mb=yc[ob[Ha][1]],P=3*Ha,yb[P]=mb.x,yb[P+1]=mb.y,yb[P+2]=mb.z;for(lb=0;lb<Nc;lb++)P=3*lb,sb=Kc[ob[lb][1]],zb[P]=sb.r,zb[P+1]=sb.g,zb[P+2]=sb.b;if(pb){Ya=0;for(Fb=pb.length;Ya<Fb;Ya++)if(O=pb[Ya],void 0===O.boundTo||"vertices"===O.boundTo)if(P=0,Za=O.value.length,1===O.size)for(W=0;W<Za;W++)nb=ob[W][1],O.array[W]=O.value[nb];else if(2===O.size)for(W=0;W<Za;W++)nb=ob[W][1],aa=O.value[nb],O.array[P]=aa.x,O.array[P+1]=aa.y,P+=2;else if(3===O.size)if("c"===O.type)for(W=
0;W<Za;W++)nb=ob[W][1],aa=O.value[nb],O.array[P]=aa.r,O.array[P+1]=aa.g,O.array[P+2]=aa.b,P+=3;else for(W=0;W<Za;W++)nb=ob[W][1],aa=O.value[nb],O.array[P]=aa.x,O.array[P+1]=aa.y,O.array[P+2]=aa.z,P+=3;else if(4===O.size)for(W=0;W<Za;W++)nb=ob[W][1],aa=O.value[nb],O.array[P]=aa.x,O.array[P+1]=aa.y,O.array[P+2]=aa.z,O.array[P+3]=aa.w,P+=4}}else{if(Oc)for(Ha=0;Ha<Jc;Ha++)mb=yc[Ha],P=3*Ha,yb[P]=mb.x,yb[P+1]=mb.y,yb[P+2]=mb.z;if(Pc)for(lb=0;lb<Nc;lb++)sb=Kc[lb],P=3*lb,zb[P]=sb.r,zb[P+1]=sb.g,zb[P+2]=sb.b;
if(pb){Ya=0;for(Fb=pb.length;Ya<Fb;Ya++)if(O=pb[Ya],O.needsUpdate&&(void 0===O.boundTo||"vertices"===O.boundTo))if(Za=O.value.length,P=0,1===O.size)for(W=0;W<Za;W++)O.array[W]=O.value[W];else if(2===O.size)for(W=0;W<Za;W++)aa=O.value[W],O.array[P]=aa.x,O.array[P+1]=aa.y,P+=2;else if(3===O.size)if("c"===O.type)for(W=0;W<Za;W++)aa=O.value[W],O.array[P]=aa.r,O.array[P+1]=aa.g,O.array[P+2]=aa.b,P+=3;else for(W=0;W<Za;W++)aa=O.value[W],O.array[P]=aa.x,O.array[P+1]=aa.y,O.array[P+2]=aa.z,P+=3;else if(4===
O.size)for(W=0;W<Za;W++)aa=O.value[W],O.array[P]=aa.x,O.array[P+1]=aa.y,O.array[P+2]=aa.z,O.array[P+3]=aa.w,P+=4}}if(Oc||ac.sortParticles)g.bindBuffer(g.ARRAY_BUFFER,kb.__webglVertexBuffer),g.bufferData(g.ARRAY_BUFFER,yb,Ic);if(Pc||ac.sortParticles)g.bindBuffer(g.ARRAY_BUFFER,kb.__webglColorBuffer),g.bufferData(g.ARRAY_BUFFER,zb,Ic);if(pb){Ya=0;for(Fb=pb.length;Ya<Fb;Ya++)if(O=pb[Ya],O.needsUpdate||ac.sortParticles)g.bindBuffer(g.ARRAY_BUFFER,O.buffer),g.bufferData(g.ARRAY_BUFFER,O.array,Ic)}}l.verticesNeedUpdate=
!1;l.colorsNeedUpdate=!1;r.attributes&&q(r)}}};this.initMaterial=function(a,b,c,d){var e,f,h,i;a.addEventListener("dispose",Ub);var k,j,l,m,p;a instanceof THREE.MeshDepthMaterial?p="depth":a instanceof THREE.MeshNormalMaterial?p="normal":a instanceof THREE.MeshBasicMaterial?p="basic":a instanceof THREE.MeshLambertMaterial?p="lambert":a instanceof THREE.MeshPhongMaterial?p="phong":a instanceof THREE.LineBasicMaterial?p="basic":a instanceof THREE.LineDashedMaterial?p="dashed":a instanceof THREE.ParticleBasicMaterial&&
(p="particle_basic");if(p){var n=THREE.ShaderLib[p];a.uniforms=THREE.UniformsUtils.clone(n.uniforms);a.vertexShader=n.vertexShader;a.fragmentShader=n.fragmentShader}var q=e=0,r=0,s=n=0;for(f=b.length;s<f;s++)h=b[s],h.onlyShadow||(h instanceof THREE.DirectionalLight&&e++,h instanceof THREE.PointLight&&q++,h instanceof THREE.SpotLight&&r++,h instanceof THREE.HemisphereLight&&n++);f=q;h=r;i=n;r=n=0;for(q=b.length;r<q;r++)s=b[r],s.castShadow&&(s instanceof THREE.SpotLight&&n++,s instanceof THREE.DirectionalLight&&
!s.shadowCascade&&n++);m=n;Ab&&d&&d.useVertexTexture?l=1024:(b=g.getParameter(g.MAX_VERTEX_UNIFORM_VECTORS),b=Math.floor((b-20)/4),void 0!==d&&d instanceof THREE.SkinnedMesh&&(b=Math.min(d.bones.length,b),b<d.bones.length&&console.warn("WebGLRenderer: too many bones - "+d.bones.length+", this GPU supports just "+b+" (try OpenGL instead of ANGLE)")),l=b);a:{var r=a.fragmentShader,q=a.vertexShader,n=a.uniforms,b=a.attributes,s=a.defines,c={map:!!a.map,envMap:!!a.envMap,lightMap:!!a.lightMap,bumpMap:!!a.bumpMap,
normalMap:!!a.normalMap,specularMap:!!a.specularMap,vertexColors:a.vertexColors,fog:c,useFog:a.fog,fogExp:c instanceof THREE.FogExp2,sizeAttenuation:a.sizeAttenuation,skinning:a.skinning,maxBones:l,useVertexTexture:Ab&&d&&d.useVertexTexture,boneTextureWidth:d&&d.boneTextureWidth,boneTextureHeight:d&&d.boneTextureHeight,morphTargets:a.morphTargets,morphNormals:a.morphNormals,maxMorphTargets:this.maxMorphTargets,maxMorphNormals:this.maxMorphNormals,maxDirLights:e,maxPointLights:f,maxSpotLights:h,maxHemiLights:i,
maxShadows:m,shadowMapEnabled:this.shadowMapEnabled&&d.receiveShadow,shadowMapType:this.shadowMapType,shadowMapDebug:this.shadowMapDebug,shadowMapCascade:this.shadowMapCascade,alphaTest:a.alphaTest,metal:a.metal,perPixel:a.perPixel,wrapAround:a.wrapAround,doubleSided:a.side===THREE.DoubleSide,flipSided:a.side===THREE.BackSide},d=a.index0AttributeName,t,u,v;e=[];p?e.push(p):(e.push(r),e.push(q));for(u in s)e.push(u),e.push(s[u]);for(t in c)e.push(t),e.push(c[t]);p=e.join();t=0;for(u=ya.length;t<u;t++)if(e=
ya[t],e.code===p){e.usedTimes++;j=e.program;break a}t="SHADOWMAP_TYPE_BASIC";c.shadowMapType===THREE.PCFShadowMap?t="SHADOWMAP_TYPE_PCF":c.shadowMapType===THREE.PCFSoftShadowMap&&(t="SHADOWMAP_TYPE_PCF_SOFT");u=[];for(v in s)e=s[v],!1!==e&&(e="#define "+v+" "+e,u.push(e));e=u.join("\n");v=g.createProgram();u=["precision "+Q+" float;","precision "+Q+" int;",e,vb?"#define VERTEX_TEXTURES":"",J.gammaInput?"#define GAMMA_INPUT":"",J.gammaOutput?"#define GAMMA_OUTPUT":"",J.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":
"","#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_SHADOWS "+c.maxShadows,"#define MAX_BONES "+c.maxBones,c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?"#define USE_COLOR":"",c.skinning?
"#define USE_SKINNING":"",c.useVertexTexture?"#define BONE_TEXTURE":"",c.boneTextureWidth?"#define N_BONE_PIXEL_X "+c.boneTextureWidth.toFixed(1):"",c.boneTextureHeight?"#define N_BONE_PIXEL_Y "+c.boneTextureHeight.toFixed(1):"",c.morphTargets?"#define USE_MORPHTARGETS":"",c.morphNormals?"#define USE_MORPHNORMALS":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":"",c.shadowMapEnabled?"#define USE_SHADOWMAP":
"",c.shadowMapEnabled?"#define "+t:"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",c.sizeAttenuation?"#define USE_SIZEATTENUATION":"","uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n"].join("\n");
t=["precision "+Q+" float;","precision "+Q+" int;",c.bumpMap||c.normalMap?"#extension GL_OES_standard_derivatives : enable":"",e,"#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_SHADOWS "+c.maxShadows,c.alphaTest?"#define ALPHATEST "+c.alphaTest:"",J.gammaInput?"#define GAMMA_INPUT":"",J.gammaOutput?"#define GAMMA_OUTPUT":"",J.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":
"",c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fogExp?"#define FOG_EXP2":"",c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?"#define USE_COLOR":"",c.metal?"#define METAL":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":
"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+t:"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n");u=I("vertex",u+q);t=I("fragment",t+r);g.attachShader(v,u);g.attachShader(v,t);d&&g.bindAttribLocation(v,0,d);g.linkProgram(v);g.getProgramParameter(v,g.LINK_STATUS)||(console.error("Could not initialise shader\nVALIDATE_STATUS: "+g.getProgramParameter(v,
g.VALIDATE_STATUS)+", gl error ["+g.getError()+"]"),console.error("Program Info Log: "+g.getProgramInfoLog(v)));g.deleteShader(t);g.deleteShader(u);v.uniforms={};v.attributes={};var w;t="viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences".split(" ");c.useVertexTexture?t.push("boneTexture"):t.push("boneGlobalMatrices");for(w in n)t.push(w);w=t;t=0;for(u=w.length;t<u;t++)n=w[t],v.uniforms[n]=g.getUniformLocation(v,n);t="position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" ");
for(w=0;w<c.maxMorphTargets;w++)t.push("morphTarget"+w);for(w=0;w<c.maxMorphNormals;w++)t.push("morphNormal"+w);for(j in b)t.push(j);j=t;w=0;for(b=j.length;w<b;w++)t=j[w],v.attributes[t]=g.getAttribLocation(v,t);v.id=tb++;ya.push({program:v,code:p,usedTimes:1});J.info.memory.programs=ya.length;j=v}a.program=j;w=a.program.attributes;if(a.morphTargets){a.numSupportedMorphTargets=0;b="morphTarget";for(j=0;j<this.maxMorphTargets;j++)v=b+j,0<=w[v]&&a.numSupportedMorphTargets++}if(a.morphNormals){a.numSupportedMorphNormals=
0;b="morphNormal";for(j=0;j<this.maxMorphNormals;j++)v=b+j,0<=w[v]&&a.numSupportedMorphNormals++}a.uniformsList=[];for(k in a.uniforms)a.uniformsList.push([a.uniforms[k],k])};this.setFaceCulling=function(a,b){a===THREE.CullFaceNone?g.disable(g.CULL_FACE):(b===THREE.FrontFaceDirectionCW?g.frontFace(g.CW):g.frontFace(g.CCW),a===THREE.CullFaceBack?g.cullFace(g.BACK):a===THREE.CullFaceFront?g.cullFace(g.FRONT):g.cullFace(g.FRONT_AND_BACK),g.enable(g.CULL_FACE))};this.setMaterialFaces=function(a){var b=
a.side===THREE.DoubleSide,a=a.side===THREE.BackSide;sa!==b&&(b?g.disable(g.CULL_FACE):g.enable(g.CULL_FACE),sa=b);V!==a&&(a?g.frontFace(g.CW):g.frontFace(g.CCW),V=a)};this.setDepthTest=function(a){Ta!==a&&(a?g.enable(g.DEPTH_TEST):g.disable(g.DEPTH_TEST),Ta=a)};this.setDepthWrite=function(a){ka!==a&&(g.depthMask(a),ka=a)};this.setBlending=function(a,b,c,d){a!==pa&&(a===THREE.NoBlending?g.disable(g.BLEND):a===THREE.AdditiveBlending?(g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.SRC_ALPHA,
g.ONE)):a===THREE.SubtractiveBlending?(g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.ZERO,g.ONE_MINUS_SRC_COLOR)):a===THREE.MultiplyBlending?(g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.ZERO,g.SRC_COLOR)):a===THREE.CustomBlending?g.enable(g.BLEND):(g.enable(g.BLEND),g.blendEquationSeparate(g.FUNC_ADD,g.FUNC_ADD),g.blendFuncSeparate(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA,g.ONE,g.ONE_MINUS_SRC_ALPHA)),pa=a);if(a===THREE.CustomBlending){if(b!==Ba&&(g.blendEquation(H(b)),Ba=b),
c!==ba||d!==Sa)g.blendFunc(H(c),H(d)),ba=c,Sa=d}else Sa=ba=Ba=null};this.setTexture=function(a,b){if(a.needsUpdate){a.__webglInit||(a.__webglInit=!0,a.addEventListener("dispose",Bb),a.__webglTexture=g.createTexture(),J.info.memory.textures++);g.activeTexture(g.TEXTURE0+b);g.bindTexture(g.TEXTURE_2D,a.__webglTexture);g.pixelStorei(g.UNPACK_FLIP_Y_WEBGL,a.flipY);g.pixelStorei(g.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);g.pixelStorei(g.UNPACK_ALIGNMENT,a.unpackAlignment);var c=a.image,d=0===
(c.width&c.width-1)&&0===(c.height&c.height-1),e=H(a.format),f=H(a.type);L(g.TEXTURE_2D,a,d);var h=a.mipmaps;if(a instanceof THREE.DataTexture)if(0<h.length&&d){for(var i=0,j=h.length;i<j;i++)c=h[i],g.texImage2D(g.TEXTURE_2D,i,e,c.width,c.height,0,e,f,c.data);a.generateMipmaps=!1}else g.texImage2D(g.TEXTURE_2D,0,e,c.width,c.height,0,e,f,c.data);else if(a instanceof THREE.CompressedTexture){i=0;for(j=h.length;i<j;i++)c=h[i],g.compressedTexImage2D(g.TEXTURE_2D,i,e,c.width,c.height,0,c.data)}else if(0<
h.length&&d){i=0;for(j=h.length;i<j;i++)c=h[i],g.texImage2D(g.TEXTURE_2D,i,e,e,f,c);a.generateMipmaps=!1}else g.texImage2D(g.TEXTURE_2D,0,e,e,f,a.image);a.generateMipmaps&&d&&g.generateMipmap(g.TEXTURE_2D);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate()}else g.activeTexture(g.TEXTURE0+b),g.bindTexture(g.TEXTURE_2D,a.__webglTexture)};this.setRenderTarget=function(a){var b=a instanceof THREE.WebGLRenderTargetCube;if(a&&!a.__webglFramebuffer){void 0===a.depthBuffer&&(a.depthBuffer=!0);void 0===a.stencilBuffer&&
(a.stencilBuffer=!0);a.addEventListener("dispose",Tb);a.__webglTexture=g.createTexture();J.info.memory.textures++;var c=0===(a.width&a.width-1)&&0===(a.height&a.height-1),d=H(a.format),e=H(a.type);if(b){a.__webglFramebuffer=[];a.__webglRenderbuffer=[];g.bindTexture(g.TEXTURE_CUBE_MAP,a.__webglTexture);L(g.TEXTURE_CUBE_MAP,a,c);for(var f=0;6>f;f++){a.__webglFramebuffer[f]=g.createFramebuffer();a.__webglRenderbuffer[f]=g.createRenderbuffer();g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,d,a.width,
a.height,0,d,e,null);var h=a,i=g.TEXTURE_CUBE_MAP_POSITIVE_X+f;g.bindFramebuffer(g.FRAMEBUFFER,a.__webglFramebuffer[f]);g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,i,h.__webglTexture,0);G(a.__webglRenderbuffer[f],a)}c&&g.generateMipmap(g.TEXTURE_CUBE_MAP)}else a.__webglFramebuffer=g.createFramebuffer(),a.__webglRenderbuffer=a.shareDepthFrom?a.shareDepthFrom.__webglRenderbuffer:g.createRenderbuffer(),g.bindTexture(g.TEXTURE_2D,a.__webglTexture),L(g.TEXTURE_2D,a,c),g.texImage2D(g.TEXTURE_2D,
0,d,a.width,a.height,0,d,e,null),d=g.TEXTURE_2D,g.bindFramebuffer(g.FRAMEBUFFER,a.__webglFramebuffer),g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,d,a.__webglTexture,0),a.shareDepthFrom?a.depthBuffer&&!a.stencilBuffer?g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.RENDERBUFFER,a.__webglRenderbuffer):a.depthBuffer&&a.stencilBuffer&&g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_STENCIL_ATTACHMENT,g.RENDERBUFFER,a.__webglRenderbuffer):G(a.__webglRenderbuffer,a),c&&g.generateMipmap(g.TEXTURE_2D);
b?g.bindTexture(g.TEXTURE_CUBE_MAP,null):g.bindTexture(g.TEXTURE_2D,null);g.bindRenderbuffer(g.RENDERBUFFER,null);g.bindFramebuffer(g.FRAMEBUFFER,null)}a?(b=b?a.__webglFramebuffer[a.activeCubeFace]:a.__webglFramebuffer,c=a.width,a=a.height,e=d=0):(b=null,c=Ob,a=Pb,d=Nb,e=Cb);b!==Aa&&(g.bindFramebuffer(g.FRAMEBUFFER,b),g.viewport(d,e,c,a),Aa=b);Gb=c;Hb=a};this.shadowMapPlugin=new THREE.ShadowMapPlugin;this.addPrePlugin(this.shadowMapPlugin);this.addPostPlugin(new THREE.SpritePlugin);this.addPostPlugin(new THREE.LensFlarePlugin)};THREE.WebGLRenderTarget=function(a,b,c){this.width=a;this.height=b;c=c||{};this.wrapS=void 0!==c.wrapS?c.wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==c.wrapT?c.wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==c.magFilter?c.magFilter:THREE.LinearFilter;this.minFilter=void 0!==c.minFilter?c.minFilter:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==c.anisotropy?c.anisotropy:1;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.format=void 0!==c.format?c.format:
THREE.RGBAFormat;this.type=void 0!==c.type?c.type:THREE.UnsignedByteType;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.generateMipmaps=!0;this.shareDepthFrom=null};
THREE.WebGLRenderTarget.prototype={constructor:THREE.WebGLRenderTarget,clone:function(){var a=new THREE.WebGLRenderTarget(this.width,this.height);a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.format=this.format;a.type=this.type;a.depthBuffer=this.depthBuffer;a.stencilBuffer=this.stencilBuffer;a.generateMipmaps=this.generateMipmaps;a.shareDepthFrom=this.shareDepthFrom;
return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);THREE.RenderableVertex=function(){this.positionWorld=new THREE.Vector3;this.positionScreen=new THREE.Vector4;this.visible=!0};THREE.RenderableVertex.prototype.copy=function(a){this.positionWorld.copy(a.positionWorld);this.positionScreen.copy(a.positionScreen)};THREE.RenderableFace3=function(){this.id=0;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.centroidModel=new THREE.Vector3;this.normalModel=new THREE.Vector3;this.normalModelView=new THREE.Vector3;this.vertexNormalsLength=0;this.vertexNormalsModel=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.vertexNormalsModelView=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.material=this.color=null;this.uvs=[[]];this.z=
0};THREE.RenderableObject=function(){this.id=0;this.object=null;this.z=0};THREE.RenderableParticle=function(){this.id=0;this.object=null;this.z=this.y=this.x=0;this.rotation=null;this.scale=new THREE.Vector2;this.material=null};THREE.RenderableLine=function(){this.id=0;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.vertexColors=[new THREE.Color,new THREE.Color];this.material=null;this.z=0};THREE.Gyroscope=function(){THREE.Object3D.call(this)};THREE.Gyroscope.prototype=Object.create(THREE.Object3D.prototype);
THREE.Gyroscope.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?(this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(this.translationWorld,this.quaternionWorld,this.scaleWorld),this.matrix.decompose(this.translationObject,this.quaternionObject,this.scaleObject),this.matrixWorld.compose(this.translationWorld,this.quaternionObject,this.scaleWorld)):this.matrixWorld.copy(this.matrix),
this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)};THREE.Gyroscope.prototype.translationWorld=new THREE.Vector3;THREE.Gyroscope.prototype.translationObject=new THREE.Vector3;THREE.Gyroscope.prototype.quaternionWorld=new THREE.Quaternion;THREE.Gyroscope.prototype.quaternionObject=new THREE.Quaternion;THREE.Gyroscope.prototype.scaleWorld=new THREE.Vector3;THREE.Gyroscope.prototype.scaleObject=new THREE.Vector3;THREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.vertices.push(new THREE.Vector3);d.colors.push(new THREE.Color(b));void 0===f[a]&&(f[a]=[]);f[a].push(d.vertices.length-1)}var d=new THREE.Geometry,e=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),f={};b("n1","n2",16755200);b("n2","n4",16755200);b("n4","n3",16755200);b("n3","n1",16755200);b("f1","f2",16755200);b("f2","f4",16755200);b("f4","f3",16755200);b("f3","f1",16755200);b("n1","f1",16755200);
b("n2","f2",16755200);b("n3","f3",16755200);b("n4","f4",16755200);b("p","n1",16711680);b("p","n2",16711680);b("p","n3",16711680);b("p","n4",16711680);b("u1","u2",43775);b("u2","u3",43775);b("u3","u1",43775);b("c","t",16777215);b("p","c",3355443);b("cn1","cn2",3355443);b("cn3","cn4",3355443);b("cf1","cf2",3355443);b("cf3","cf4",3355443);THREE.Line.call(this,d,e,THREE.LinePieces);this.camera=a;this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=f;this.update()};
THREE.CameraHelper.prototype=Object.create(THREE.Line.prototype);
THREE.CameraHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Camera,c=new THREE.Projector;return function(){function d(d,h,i,j){a.set(h,i,j);c.unprojectVector(a,b);d=e.pointMap[d];if(void 0!==d){h=0;for(i=d.length;h<i;h++)e.geometry.vertices[d[h]].copy(a)}}var e=this;b.projectionMatrix.copy(this.camera.projectionMatrix);d("c",0,0,-1);d("t",0,0,1);d("n1",-1,-1,-1);d("n2",1,-1,-1);d("n3",-1,1,-1);d("n4",1,1,-1);d("f1",-1,-1,1);d("f2",1,-1,1);d("f3",-1,1,1);d("f4",1,1,1);d("u1",
0.7,1.1,-1);d("u2",-0.7,1.1,-1);d("u3",0,2,-1);d("cf1",-1,0,1);d("cf2",1,0,1);d("cf3",0,-1,1);d("cf4",0,1,1);d("cn1",-1,0,-1);d("cn2",1,0,-1);d("cn3",0,-1,-1);d("cn4",0,1,-1);this.geometry.verticesNeedUpdate=!0}}();THREE.DirectionalLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;var c=new THREE.PlaneGeometry(b,b),d=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightPlane=new THREE.Mesh(c,d);this.add(this.lightPlane);c=new THREE.Geometry;c.vertices.push(new THREE.Vector3);c.vertices.push(new THREE.Vector3);c.computeLineDistances();
d=new THREE.LineBasicMaterial({fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine=new THREE.Line(c,d);this.add(this.targetLine);this.update()};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.DirectionalLightHelper.prototype.update=function(){var a=new THREE.Vector3;return function(){a.getPositionFromMatrix(this.light.matrixWorld).negate();this.lightPlane.lookAt(a);this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine.geometry.vertices[1].copy(a);this.targetLine.geometry.verticesNeedUpdate=!0;this.targetLine.material.color.copy(this.lightPlane.material.color)}}();THREE.HemisphereLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;this.colors=[new THREE.Color,new THREE.Color];var c=new THREE.SphereGeometry(b,4,2);c.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));for(var d=0;8>d;d++)c.faces[d].color=this.colors[4>d?0:1];d=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0});this.lightSphere=new THREE.Mesh(c,d);this.add(this.lightSphere);
this.update()};THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.HemisphereLightHelper.prototype.update=function(){var a=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);this.lightSphere.lookAt(a.getPositionFromMatrix(this.light.matrixWorld).negate());this.lightSphere.geometry.colorsNeedUpdate=!0}}();THREE.PointLightHelper=function(a,b){this.light=a;this.light.updateMatrixWorld();var c=new THREE.SphereGeometry(b,4,2),d=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);THREE.Mesh.call(this,c,d);this.matrixWorld=this.light.matrixWorld;this.matrixAutoUpdate=!1};THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)};THREE.SpotLightHelper=function(a){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;a=new THREE.CylinderGeometry(0,1,1,8,1,!0);a.applyMatrix((new THREE.Matrix4).makeTranslation(0,-0.5,0));a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var b=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});this.cone=new THREE.Mesh(a,b);this.add(this.cone);this.update()};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.update=function(){var a=new THREE.Vector3;return function(){var b=this.light.distance?this.light.distance:1E4,c=b*Math.tan(this.light.angle);this.cone.scale.set(c,c,b);this.cone.lookAt(a.getPositionFromMatrix(this.light.matrixWorld).negate());this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}();THREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype);
THREE.LensFlare.prototype.add=function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:1,opacity:f,color:e,blending:d})};
THREE.LensFlare.prototype.updateLensFlares=function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=0.25*c.x*Math.PI,c.rotation+=0.25*(c.wantedRotation-c.rotation)};THREE.ImmediateRenderObject=function(){THREE.Object3D.call(this);this.render=function(){}};THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.LensFlarePlugin=function(){function a(a,c){var d=b.createProgram(),e=b.createShader(b.FRAGMENT_SHADER),f=b.createShader(b.VERTEX_SHADER),h="precision "+c+" float;\nprecision "+c+" int;\n";b.shaderSource(e,h+a.fragmentShader);b.shaderSource(f,h+a.vertexShader);b.compileShader(e);b.compileShader(f);b.attachShader(d,e);b.attachShader(d,f);b.linkProgram(d);return d}var b,c,d,e,f,h,i,j,m,n,p,l,t;this.init=function(u){b=u.context;c=u;d=u.getPrecision();e=new Float32Array(16);f=new Uint16Array(6);
u=0;e[u++]=-1;e[u++]=-1;e[u++]=0;e[u++]=0;e[u++]=1;e[u++]=-1;e[u++]=1;e[u++]=0;e[u++]=1;e[u++]=1;e[u++]=1;e[u++]=1;e[u++]=-1;e[u++]=1;e[u++]=0;e[u++]=1;u=0;f[u++]=0;f[u++]=1;f[u++]=2;f[u++]=0;f[u++]=2;f[u++]=3;h=b.createBuffer();i=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,h);b.bufferData(b.ARRAY_BUFFER,e,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,i);b.bufferData(b.ELEMENT_ARRAY_BUFFER,f,b.STATIC_DRAW);j=b.createTexture();m=b.createTexture();b.bindTexture(b.TEXTURE_2D,j);b.texImage2D(b.TEXTURE_2D,
0,b.RGB,16,16,0,b.RGB,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.bindTexture(b.TEXTURE_2D,m);b.texImage2D(b.TEXTURE_2D,0,b.RGBA,16,16,0,b.RGBA,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,
b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);0>=b.getParameter(b.MAX_VERTEX_TEXTURE_IMAGE_UNITS)?(n=!1,p=a(THREE.ShaderFlares.lensFlare,d)):(n=!0,p=a(THREE.ShaderFlares.lensFlareVertexTexture,d));l={};t={};l.vertex=b.getAttribLocation(p,"position");l.uv=b.getAttribLocation(p,"uv");t.renderType=b.getUniformLocation(p,"renderType");t.map=b.getUniformLocation(p,"map");t.occlusionMap=b.getUniformLocation(p,"occlusionMap");
t.opacity=b.getUniformLocation(p,"opacity");t.color=b.getUniformLocation(p,"color");t.scale=b.getUniformLocation(p,"scale");t.rotation=b.getUniformLocation(p,"rotation");t.screenPosition=b.getUniformLocation(p,"screenPosition")};this.render=function(a,d,e,f){var a=a.__webglFlares,r=a.length;if(r){var x=new THREE.Vector3,y=f/e,z=0.5*e,D=0.5*f,E=16/f,B=new THREE.Vector2(E*y,E),w=new THREE.Vector3(1,1,0),M=new THREE.Vector2(1,1),I=t,E=l;b.useProgram(p);b.enableVertexAttribArray(l.vertex);b.enableVertexAttribArray(l.uv);
b.uniform1i(I.occlusionMap,0);b.uniform1i(I.map,1);b.bindBuffer(b.ARRAY_BUFFER,h);b.vertexAttribPointer(E.vertex,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(E.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,i);b.disable(b.CULL_FACE);b.depthMask(!1);var L,G,v,H,A;for(L=0;L<r;L++)if(E=16/f,B.set(E*y,E),H=a[L],x.set(H.matrixWorld.elements[12],H.matrixWorld.elements[13],H.matrixWorld.elements[14]),x.applyMatrix4(d.matrixWorldInverse),x.applyProjection(d.projectionMatrix),w.copy(x),M.x=w.x*z+z,
M.y=w.y*D+D,n||0<M.x&&M.x<e&&0<M.y&&M.y<f){b.activeTexture(b.TEXTURE1);b.bindTexture(b.TEXTURE_2D,j);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGB,M.x-8,M.y-8,16,16,0);b.uniform1i(I.renderType,0);b.uniform2f(I.scale,B.x,B.y);b.uniform3f(I.screenPosition,w.x,w.y,w.z);b.disable(b.BLEND);b.enable(b.DEPTH_TEST);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);b.activeTexture(b.TEXTURE0);b.bindTexture(b.TEXTURE_2D,m);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGBA,M.x-8,M.y-8,16,16,0);b.uniform1i(I.renderType,1);b.disable(b.DEPTH_TEST);
b.activeTexture(b.TEXTURE1);b.bindTexture(b.TEXTURE_2D,j);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);H.positionScreen.copy(w);H.customUpdateCallback?H.customUpdateCallback(H):H.updateLensFlares();b.uniform1i(I.renderType,2);b.enable(b.BLEND);G=0;for(v=H.lensFlares.length;G<v;G++)A=H.lensFlares[G],0.001<A.opacity&&0.001<A.scale&&(w.x=A.x,w.y=A.y,w.z=A.z,E=A.size*A.scale/f,B.x=E*y,B.y=E,b.uniform3f(I.screenPosition,w.x,w.y,w.z),b.uniform2f(I.scale,B.x,B.y),b.uniform1f(I.rotation,A.rotation),b.uniform1f(I.opacity,
A.opacity),b.uniform3f(I.color,A.color.r,A.color.g,A.color.b),c.setBlending(A.blending,A.blendEquation,A.blendSrc,A.blendDst),c.setTexture(A.texture,1),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0))}b.enable(b.CULL_FACE);b.enable(b.DEPTH_TEST);b.depthMask(!0)}}};THREE.ShadowMapPlugin=function(){var a,b,c,d,e,f,h=new THREE.Frustum,i=new THREE.Matrix4,j=new THREE.Vector3,m=new THREE.Vector3,n=new THREE.Vector3;this.init=function(h){a=h.context;b=h;var h=THREE.ShaderLib.depthRGBA,i=THREE.UniformsUtils.clone(h.uniforms);c=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i});d=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i,morphTargets:!0});e=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,
vertexShader:h.vertexShader,uniforms:i,skinning:!0});f=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i,morphTargets:!0,skinning:!0});c._shadowPass=!0;d._shadowPass=!0;e._shadowPass=!0;f._shadowPass=!0};this.render=function(a,c){b.shadowMapEnabled&&b.shadowMapAutoUpdate&&this.update(a,c)};this.update=function(p,l){var t,u,k,q,s,r,x,y,z,D,E=[];q=0;a.clearColor(1,1,1,1);a.disable(a.BLEND);a.enable(a.CULL_FACE);a.frontFace(a.CCW);b.shadowMapCullFace===
THREE.CullFaceFront?a.cullFace(a.FRONT):a.cullFace(a.BACK);b.setDepthTest(!0);t=0;for(u=p.__lights.length;t<u;t++)if(k=p.__lights[t],k.castShadow)if(k instanceof THREE.DirectionalLight&&k.shadowCascade)for(s=0;s<k.shadowCascadeCount;s++){var B;if(k.shadowCascadeArray[s])B=k.shadowCascadeArray[s];else{y=k;z=s;B=new THREE.DirectionalLight;B.isVirtual=!0;B.onlyShadow=!0;B.castShadow=!0;B.shadowCameraNear=y.shadowCameraNear;B.shadowCameraFar=y.shadowCameraFar;B.shadowCameraLeft=y.shadowCameraLeft;B.shadowCameraRight=
y.shadowCameraRight;B.shadowCameraBottom=y.shadowCameraBottom;B.shadowCameraTop=y.shadowCameraTop;B.shadowCameraVisible=y.shadowCameraVisible;B.shadowDarkness=y.shadowDarkness;B.shadowBias=y.shadowCascadeBias[z];B.shadowMapWidth=y.shadowCascadeWidth[z];B.shadowMapHeight=y.shadowCascadeHeight[z];B.pointsWorld=[];B.pointsFrustum=[];D=B.pointsWorld;r=B.pointsFrustum;for(x=0;8>x;x++)D[x]=new THREE.Vector3,r[x]=new THREE.Vector3;D=y.shadowCascadeNearZ[z];y=y.shadowCascadeFarZ[z];r[0].set(-1,-1,D);r[1].set(1,
-1,D);r[2].set(-1,1,D);r[3].set(1,1,D);r[4].set(-1,-1,y);r[5].set(1,-1,y);r[6].set(-1,1,y);r[7].set(1,1,y);B.originalCamera=l;r=new THREE.Gyroscope;r.position=k.shadowCascadeOffset;r.add(B);r.add(B.target);l.add(r);k.shadowCascadeArray[s]=B;console.log("Created virtualLight",B)}z=k;D=s;y=z.shadowCascadeArray[D];y.position.copy(z.position);y.target.position.copy(z.target.position);y.lookAt(y.target);y.shadowCameraVisible=z.shadowCameraVisible;y.shadowDarkness=z.shadowDarkness;y.shadowBias=z.shadowCascadeBias[D];
r=z.shadowCascadeNearZ[D];z=z.shadowCascadeFarZ[D];y=y.pointsFrustum;y[0].z=r;y[1].z=r;y[2].z=r;y[3].z=r;y[4].z=z;y[5].z=z;y[6].z=z;y[7].z=z;E[q]=B;q++}else E[q]=k,q++;t=0;for(u=E.length;t<u;t++){k=E[t];k.shadowMap||(s=THREE.LinearFilter,b.shadowMapType===THREE.PCFSoftShadowMap&&(s=THREE.NearestFilter),k.shadowMap=new THREE.WebGLRenderTarget(k.shadowMapWidth,k.shadowMapHeight,{minFilter:s,magFilter:s,format:THREE.RGBAFormat}),k.shadowMapSize=new THREE.Vector2(k.shadowMapWidth,k.shadowMapHeight),k.shadowMatrix=
new THREE.Matrix4);if(!k.shadowCamera){if(k instanceof THREE.SpotLight)k.shadowCamera=new THREE.PerspectiveCamera(k.shadowCameraFov,k.shadowMapWidth/k.shadowMapHeight,k.shadowCameraNear,k.shadowCameraFar);else if(k instanceof THREE.DirectionalLight)k.shadowCamera=new THREE.OrthographicCamera(k.shadowCameraLeft,k.shadowCameraRight,k.shadowCameraTop,k.shadowCameraBottom,k.shadowCameraNear,k.shadowCameraFar);else{console.error("Unsupported light type for shadow");continue}p.add(k.shadowCamera);!0===
p.autoUpdate&&p.updateMatrixWorld()}k.shadowCameraVisible&&!k.cameraHelper&&(k.cameraHelper=new THREE.CameraHelper(k.shadowCamera),k.shadowCamera.add(k.cameraHelper));if(k.isVirtual&&B.originalCamera==l){s=l;q=k.shadowCamera;r=k.pointsFrustum;y=k.pointsWorld;j.set(Infinity,Infinity,Infinity);m.set(-Infinity,-Infinity,-Infinity);for(z=0;8>z;z++)D=y[z],D.copy(r[z]),THREE.ShadowMapPlugin.__projector.unprojectVector(D,s),D.applyMatrix4(q.matrixWorldInverse),D.x<j.x&&(j.x=D.x),D.x>m.x&&(m.x=D.x),D.y<j.y&&
(j.y=D.y),D.y>m.y&&(m.y=D.y),D.z<j.z&&(j.z=D.z),D.z>m.z&&(m.z=D.z);q.left=j.x;q.right=m.x;q.top=m.y;q.bottom=j.y;q.updateProjectionMatrix()}q=k.shadowMap;r=k.shadowMatrix;s=k.shadowCamera;s.position.getPositionFromMatrix(k.matrixWorld);n.getPositionFromMatrix(k.target.matrixWorld);s.lookAt(n);s.updateMatrixWorld();s.matrixWorldInverse.getInverse(s.matrixWorld);k.cameraHelper&&(k.cameraHelper.visible=k.shadowCameraVisible);k.shadowCameraVisible&&k.cameraHelper.update();r.set(0.5,0,0,0.5,0,0.5,0,0.5,
0,0,0.5,0.5,0,0,0,1);r.multiply(s.projectionMatrix);r.multiply(s.matrixWorldInverse);i.multiplyMatrices(s.projectionMatrix,s.matrixWorldInverse);h.setFromMatrix(i);b.setRenderTarget(q);b.clear();D=p.__webglObjects;k=0;for(q=D.length;k<q;k++)if(y=D[k],z=y.object,y.render=!1,z.visible&&z.castShadow&&(!(z instanceof THREE.Mesh||z instanceof THREE.ParticleSystem)||!z.frustumCulled||h.intersectsObject(z)))z._modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,z.matrixWorld),y.render=!0;var w;k=0;for(q=
D.length;k<q;k++)y=D[k],y.render&&(z=y.object,r=y.buffer,w=z.material instanceof THREE.MeshFaceMaterial?z.material.materials[0]:z.material,x=0<z.geometry.morphTargets.length&&w.morphTargets,w=z instanceof THREE.SkinnedMesh&&w.skinning,x=z.customDepthMaterial?z.customDepthMaterial:w?x?f:e:x?d:c,r instanceof THREE.BufferGeometry?b.renderBufferDirect(s,p.__lights,null,x,r,z,y.offsetIndices):b.renderBuffer(s,p.__lights,null,x,r,z));D=p.__webglObjectsImmediate;k=0;for(q=D.length;k<q;k++)y=D[k],z=y.object,
z.visible&&z.castShadow&&(z._modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,z.matrixWorld),b.renderImmediateObject(s,p.__lights,null,c,z))}t=b.getClearColor();u=b.getClearAlpha();a.clearColor(t.r,t.g,t.b,u);a.enable(a.BLEND);b.shadowMapCullFace===THREE.CullFaceFront&&a.cullFace(a.BACK)}};THREE.ShadowMapPlugin.__projector=new THREE.Projector;THREE.SpritePlugin=function(){function a(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}var b,c,d,e,f,h,i,j,m,n;this.init=function(a){b=a.context;c=a;d=a.getPrecision();e=new Float32Array(16);f=new Uint16Array(6);a=0;e[a++]=-1;e[a++]=-1;e[a++]=0;e[a++]=0;e[a++]=1;e[a++]=-1;e[a++]=1;e[a++]=0;e[a++]=1;e[a++]=1;e[a++]=1;e[a++]=1;e[a++]=-1;e[a++]=1;e[a++]=0;e[a++]=1;a=0;f[a++]=0;f[a++]=1;f[a++]=2;f[a++]=0;f[a++]=2;f[a++]=3;h=b.createBuffer();i=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,h);b.bufferData(b.ARRAY_BUFFER,
e,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,i);b.bufferData(b.ELEMENT_ARRAY_BUFFER,f,b.STATIC_DRAW);var a=THREE.ShaderSprite.sprite,l=b.createProgram(),t=b.createShader(b.FRAGMENT_SHADER),u=b.createShader(b.VERTEX_SHADER),k="precision "+d+" float;\nprecision "+d+" int;\n";b.shaderSource(t,k+a.fragmentShader);b.shaderSource(u,k+a.vertexShader);b.compileShader(t);b.compileShader(u);b.attachShader(l,t);b.attachShader(l,u);b.linkProgram(l);j=l;m={};n={};m.position=b.getAttribLocation(j,"position");
m.uv=b.getAttribLocation(j,"uv");n.uvOffset=b.getUniformLocation(j,"uvOffset");n.uvScale=b.getUniformLocation(j,"uvScale");n.rotation=b.getUniformLocation(j,"rotation");n.scale=b.getUniformLocation(j,"scale");n.alignment=b.getUniformLocation(j,"alignment");n.color=b.getUniformLocation(j,"color");n.map=b.getUniformLocation(j,"map");n.opacity=b.getUniformLocation(j,"opacity");n.useScreenCoordinates=b.getUniformLocation(j,"useScreenCoordinates");n.sizeAttenuation=b.getUniformLocation(j,"sizeAttenuation");
n.screenPosition=b.getUniformLocation(j,"screenPosition");n.modelViewMatrix=b.getUniformLocation(j,"modelViewMatrix");n.projectionMatrix=b.getUniformLocation(j,"projectionMatrix");n.fogType=b.getUniformLocation(j,"fogType");n.fogDensity=b.getUniformLocation(j,"fogDensity");n.fogNear=b.getUniformLocation(j,"fogNear");n.fogFar=b.getUniformLocation(j,"fogFar");n.fogColor=b.getUniformLocation(j,"fogColor");n.alphaTest=b.getUniformLocation(j,"alphaTest")};this.render=function(d,e,f,u){var k=d.__webglSprites,
q=k.length;if(q){var s=m,r=n,x=u/f,f=0.5*f,y=0.5*u;b.useProgram(j);b.enableVertexAttribArray(s.position);b.enableVertexAttribArray(s.uv);b.disable(b.CULL_FACE);b.enable(b.BLEND);b.bindBuffer(b.ARRAY_BUFFER,h);b.vertexAttribPointer(s.position,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(s.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,i);b.uniformMatrix4fv(r.projectionMatrix,!1,e.projectionMatrix.elements);b.activeTexture(b.TEXTURE0);b.uniform1i(r.map,0);var z=s=0,D=d.fog;D?(b.uniform3f(r.fogColor,
D.color.r,D.color.g,D.color.b),D instanceof THREE.Fog?(b.uniform1f(r.fogNear,D.near),b.uniform1f(r.fogFar,D.far),b.uniform1i(r.fogType,1),z=s=1):D instanceof THREE.FogExp2&&(b.uniform1f(r.fogDensity,D.density),b.uniform1i(r.fogType,2),z=s=2)):(b.uniform1i(r.fogType,0),z=s=0);for(var E,B,w=[],D=0;D<q;D++)E=k[D],B=E.material,E.visible&&0!==B.opacity&&(B.useScreenCoordinates?E.z=-E.position.z:(E._modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,E.matrixWorld),E.z=-E._modelViewMatrix.elements[14]));
k.sort(a);for(D=0;D<q;D++)E=k[D],B=E.material,E.visible&&0!==B.opacity&&(B.map&&B.map.image&&B.map.image.width)&&(b.uniform1f(r.alphaTest,B.alphaTest),!0===B.useScreenCoordinates?(b.uniform1i(r.useScreenCoordinates,1),b.uniform3f(r.screenPosition,(E.position.x*c.devicePixelRatio-f)/f,(y-E.position.y*c.devicePixelRatio)/y,Math.max(0,Math.min(1,E.position.z))),w[0]=c.devicePixelRatio,w[1]=c.devicePixelRatio):(b.uniform1i(r.useScreenCoordinates,0),b.uniform1i(r.sizeAttenuation,B.sizeAttenuation?1:0),
b.uniformMatrix4fv(r.modelViewMatrix,!1,E._modelViewMatrix.elements),w[0]=1,w[1]=1),e=d.fog&&B.fog?z:0,s!==e&&(b.uniform1i(r.fogType,e),s=e),e=1/(B.scaleByViewport?u:1),w[0]*=e*x*E.scale.x,w[1]*=e*E.scale.y,b.uniform2f(r.uvScale,B.uvScale.x,B.uvScale.y),b.uniform2f(r.uvOffset,B.uvOffset.x,B.uvOffset.y),b.uniform2f(r.alignment,B.alignment.x,B.alignment.y),b.uniform1f(r.opacity,B.opacity),b.uniform3f(r.color,B.color.r,B.color.g,B.color.b),b.uniform1f(r.rotation,E.rotation),b.uniform2fv(r.scale,w),c.setBlending(B.blending,
B.blendEquation,B.blendSrc,B.blendDst),c.setDepthTest(B.depthTest),c.setDepthWrite(B.depthWrite),c.setTexture(B.map,0),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0));b.enable(b.CULL_FACE)}}};THREE.ShaderFlares={lensFlareVertexTexture:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},lensFlare:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}};THREE.ShaderSprite={sprite:{vertexShader:"uniform int useScreenCoordinates;\nuniform int sizeAttenuation;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( sizeAttenuation == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}",
fragmentShader:"uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"}};
